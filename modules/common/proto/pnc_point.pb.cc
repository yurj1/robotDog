// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto

#include "modules/common/proto/pnc_point.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaussianInfo_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleMotionPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
namespace athena {
namespace common {
class SLPointProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLPointProto> _instance;
} _SLPointProto_default_instance_;
class FrenetFramePointProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrenetFramePointProto> _instance;
} _FrenetFramePointProto_default_instance_;
class SpeedPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedPoint> _instance;
} _SpeedPoint_default_instance_;
class PathPointProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPointProto> _instance;
} _PathPointProto_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class TrajectoryPointProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPointProto> _instance;
} _TrajectoryPointProto_default_instance_;
class TrajectoryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryProto> _instance;
} _TrajectoryProto_default_instance_;
class VehicleMotionPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleMotionPoint> _instance;
} _VehicleMotionPoint_default_instance_;
class VehicleMotionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleMotion> _instance;
} _VehicleMotion_default_instance_;
class GaussianInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GaussianInfo> _instance;
} _GaussianInfo_default_instance_;
}  // namespace common
}  // namespace athena
static void InitDefaultsscc_info_FrenetFramePointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_FrenetFramePointProto_default_instance_;
    new (ptr) ::athena::common::FrenetFramePointProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrenetFramePointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrenetFramePointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_GaussianInfo_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_GaussianInfo_default_instance_;
    new (ptr) ::athena::common::GaussianInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaussianInfo_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GaussianInfo_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_Path_default_instance_;
    new (ptr) ::athena::common::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {
      &scc_info_PathPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_PathPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_PathPointProto_default_instance_;
    new (ptr) ::athena::common::PathPointProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_SLPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_SLPointProto_default_instance_;
    new (ptr) ::athena::common::SLPointProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_SpeedPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_SpeedPoint_default_instance_;
    new (ptr) ::athena::common::SpeedPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_TrajectoryPointProto_default_instance_;
    new (ptr) ::athena::common::TrajectoryPointProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrajectoryPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {
      &scc_info_PathPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
      &scc_info_GaussianInfo_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_TrajectoryProto_default_instance_;
    new (ptr) ::athena::common::TrajectoryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajectoryProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {
      &scc_info_TrajectoryPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_VehicleMotion_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_VehicleMotion_default_instance_;
    new (ptr) ::athena::common::VehicleMotion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleMotion_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleMotion_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {
      &scc_info_VehicleMotionPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_VehicleMotionPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::athena::common::_VehicleMotionPoint_default_instance_;
    new (ptr) ::athena::common::VehicleMotionPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleMotionPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleMotionPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {
      &scc_info_TrajectoryPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::athena::common::SLPointProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::SLPointProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::SLPointProto, s_),
  PROTOBUF_FIELD_OFFSET(::athena::common::SLPointProto, l_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::athena::common::FrenetFramePointProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::FrenetFramePointProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::FrenetFramePointProto, s_),
  PROTOBUF_FIELD_OFFSET(::athena::common::FrenetFramePointProto, l_),
  PROTOBUF_FIELD_OFFSET(::athena::common::FrenetFramePointProto, dl_),
  PROTOBUF_FIELD_OFFSET(::athena::common::FrenetFramePointProto, ddl_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::athena::common::SpeedPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::SpeedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::SpeedPoint, s_),
  PROTOBUF_FIELD_OFFSET(::athena::common::SpeedPoint, t_),
  PROTOBUF_FIELD_OFFSET(::athena::common::SpeedPoint, v_),
  PROTOBUF_FIELD_OFFSET(::athena::common::SpeedPoint, a_),
  PROTOBUF_FIELD_OFFSET(::athena::common::SpeedPoint, da_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, x_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, y_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, z_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, theta_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, kappa_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, s_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, dkappa_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, ddkappa_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, lane_id_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, x_derivative_),
  PROTOBUF_FIELD_OFFSET(::athena::common::PathPointProto, y_derivative_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::athena::common::Path, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::Path, name_),
  PROTOBUF_FIELD_OFFSET(::athena::common::Path, path_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryPointProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryPointProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryPointProto, path_point_),
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryPointProto, v_),
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryPointProto, a_),
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryPointProto, relative_time_),
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryPointProto, da_),
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryPointProto, steer_),
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryPointProto, gaussian_info_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryProto, name_),
  PROTOBUF_FIELD_OFFSET(::athena::common::TrajectoryProto, trajectory_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::athena::common::VehicleMotionPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::VehicleMotionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::VehicleMotionPoint, trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::athena::common::VehicleMotionPoint, steer_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::athena::common::VehicleMotion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::VehicleMotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::VehicleMotion, name_),
  PROTOBUF_FIELD_OFFSET(::athena::common::VehicleMotion, vehicle_motion_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::athena::common::GaussianInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::athena::common::GaussianInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::athena::common::GaussianInfo, sigma_x_),
  PROTOBUF_FIELD_OFFSET(::athena::common::GaussianInfo, sigma_y_),
  PROTOBUF_FIELD_OFFSET(::athena::common::GaussianInfo, correlation_),
  PROTOBUF_FIELD_OFFSET(::athena::common::GaussianInfo, area_probability_),
  PROTOBUF_FIELD_OFFSET(::athena::common::GaussianInfo, ellipse_a_),
  PROTOBUF_FIELD_OFFSET(::athena::common::GaussianInfo, ellipse_b_),
  PROTOBUF_FIELD_OFFSET(::athena::common::GaussianInfo, theta_a_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::athena::common::SLPointProto)},
  { 9, 18, sizeof(::athena::common::FrenetFramePointProto)},
  { 22, 32, sizeof(::athena::common::SpeedPoint)},
  { 37, 53, sizeof(::athena::common::PathPointProto)},
  { 64, 71, sizeof(::athena::common::Path)},
  { 73, 85, sizeof(::athena::common::TrajectoryPointProto)},
  { 92, 99, sizeof(::athena::common::TrajectoryProto)},
  { 101, 108, sizeof(::athena::common::VehicleMotionPoint)},
  { 110, 117, sizeof(::athena::common::VehicleMotion)},
  { 119, 131, sizeof(::athena::common::GaussianInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_SLPointProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_FrenetFramePointProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_SpeedPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_PathPointProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_TrajectoryPointProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_TrajectoryProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_VehicleMotionPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_VehicleMotion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::athena::common::_GaussianInfo_default_instance_),
};

const char descriptor_table_protodef_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$modules/common/proto/pnc_point.proto\022\r"
  "athena.common\"$\n\014SLPointProto\022\t\n\001s\030\001 \001(\001"
  "\022\t\n\001l\030\002 \001(\001\"F\n\025FrenetFramePointProto\022\t\n\001"
  "s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\022\n\n\002dl\030\003 \001(\001\022\013\n\003ddl\030\004 "
  "\001(\001\"D\n\nSpeedPoint\022\t\n\001s\030\001 \001(\001\022\t\n\001t\030\002 \001(\001\022"
  "\t\n\001v\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\n\n\002da\030\005 \001(\001\"\270\001\n\016Pa"
  "thPointProto\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030"
  "\003 \001(\001\022\r\n\005theta\030\004 \001(\001\022\r\n\005kappa\030\005 \001(\001\022\t\n\001s"
  "\030\006 \001(\001\022\016\n\006dkappa\030\007 \001(\001\022\017\n\007ddkappa\030\010 \001(\001\022"
  "\017\n\007lane_id\030\t \001(\t\022\024\n\014x_derivative\030\n \001(\001\022\024"
  "\n\014y_derivative\030\013 \001(\001\"G\n\004Path\022\014\n\004name\030\001 \001"
  "(\t\0221\n\npath_point\030\002 \003(\0132\035.athena.common.P"
  "athPointProto\"\305\001\n\024TrajectoryPointProto\0221"
  "\n\npath_point\030\001 \001(\0132\035.athena.common.PathP"
  "ointProto\022\t\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001(\001\022\025\n\rrelat"
  "ive_time\030\004 \001(\001\022\n\n\002da\030\005 \001(\001\022\r\n\005steer\030\006 \001("
  "\001\0222\n\rgaussian_info\030\007 \001(\0132\033.athena.common"
  ".GaussianInfo\"^\n\017TrajectoryProto\022\014\n\004name"
  "\030\001 \001(\t\022=\n\020trajectory_point\030\002 \003(\0132#.athen"
  "a.common.TrajectoryPointProto\"b\n\022Vehicle"
  "MotionPoint\022=\n\020trajectory_point\030\001 \001(\0132#."
  "athena.common.TrajectoryPointProto\022\r\n\005st"
  "eer\030\002 \001(\001\"^\n\rVehicleMotion\022\014\n\004name\030\001 \001(\t"
  "\022\?\n\024vehicle_motion_point\030\002 \003(\0132!.athena."
  "common.VehicleMotionPoint\"\226\001\n\014GaussianIn"
  "fo\022\017\n\007sigma_x\030\001 \001(\001\022\017\n\007sigma_y\030\002 \001(\001\022\023\n\013"
  "correlation\030\003 \001(\001\022\030\n\020area_probability\030\004 "
  "\001(\001\022\021\n\tellipse_a\030\005 \001(\001\022\021\n\tellipse_b\030\006 \001("
  "\001\022\017\n\007theta_a\030\007 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_sccs[10] = {
  &scc_info_FrenetFramePointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_GaussianInfo_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_PathPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_SLPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_SpeedPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_TrajectoryPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_TrajectoryProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_VehicleMotion_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_VehicleMotionPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = {
  false, false, descriptor_table_protodef_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto, "modules/common/proto/pnc_point.proto", 1138,
  &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once, descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_sccs, descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::offsets,
  file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto, 10, file_level_enum_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto, file_level_service_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto)), true);
namespace athena {
namespace common {

// ===================================================================

class SLPointProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SLPointProto>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SLPointProto::SLPointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.SLPointProto)
}
SLPointProto::SLPointProto(const SLPointProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&s_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:athena.common.SLPointProto)
}

void SLPointProto::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&s_)) + sizeof(l_));
}

SLPointProto::~SLPointProto() {
  // @@protoc_insertion_point(destructor:athena.common.SLPointProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLPointProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLPointProto::ArenaDtor(void* object) {
  SLPointProto* _this = reinterpret_cast< SLPointProto* >(object);
  (void)_this;
}
void SLPointProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPointProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLPointProto& SLPointProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void SLPointProto::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.SLPointProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&l_) -
        reinterpret_cast<char*>(&s_)) + sizeof(l_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPointProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLPointProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.SLPointProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.SLPointProto)
  return target;
}

size_t SLPointProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.SLPointProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLPointProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.SLPointProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SLPointProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLPointProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.SLPointProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.SLPointProto)
    MergeFrom(*source);
  }
}

void SLPointProto::MergeFrom(const SLPointProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.SLPointProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SLPointProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.SLPointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLPointProto::CopyFrom(const SLPointProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.SLPointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPointProto::IsInitialized() const {
  return true;
}

void SLPointProto::InternalSwap(SLPointProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPointProto, l_)
      + sizeof(SLPointProto::l_)
      - PROTOBUF_FIELD_OFFSET(SLPointProto, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPointProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrenetFramePointProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FrenetFramePointProto>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ddl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FrenetFramePointProto::FrenetFramePointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.FrenetFramePointProto)
}
FrenetFramePointProto::FrenetFramePointProto(const FrenetFramePointProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&ddl_) -
    reinterpret_cast<char*>(&s_)) + sizeof(ddl_));
  // @@protoc_insertion_point(copy_constructor:athena.common.FrenetFramePointProto)
}

void FrenetFramePointProto::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ddl_) -
      reinterpret_cast<char*>(&s_)) + sizeof(ddl_));
}

FrenetFramePointProto::~FrenetFramePointProto() {
  // @@protoc_insertion_point(destructor:athena.common.FrenetFramePointProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrenetFramePointProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrenetFramePointProto::ArenaDtor(void* object) {
  FrenetFramePointProto* _this = reinterpret_cast< FrenetFramePointProto* >(object);
  (void)_this;
}
void FrenetFramePointProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrenetFramePointProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrenetFramePointProto& FrenetFramePointProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrenetFramePointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void FrenetFramePointProto::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.FrenetFramePointProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ddl_) -
        reinterpret_cast<char*>(&s_)) + sizeof(ddl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrenetFramePointProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_dl(&has_bits);
          dl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ddl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_ddl(&has_bits);
          ddl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrenetFramePointProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.FrenetFramePointProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_l(), target);
  }

  // optional double dl = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_dl(), target);
  }

  // optional double ddl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ddl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.FrenetFramePointProto)
  return target;
}

size_t FrenetFramePointProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.FrenetFramePointProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double dl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double ddl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrenetFramePointProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.FrenetFramePointProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FrenetFramePointProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrenetFramePointProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.FrenetFramePointProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.FrenetFramePointProto)
    MergeFrom(*source);
  }
}

void FrenetFramePointProto::MergeFrom(const FrenetFramePointProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.FrenetFramePointProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000004u) {
      dl_ = from.dl_;
    }
    if (cached_has_bits & 0x00000008u) {
      ddl_ = from.ddl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrenetFramePointProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.FrenetFramePointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrenetFramePointProto::CopyFrom(const FrenetFramePointProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.FrenetFramePointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrenetFramePointProto::IsInitialized() const {
  return true;
}

void FrenetFramePointProto::InternalSwap(FrenetFramePointProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrenetFramePointProto, ddl_)
      + sizeof(FrenetFramePointProto::ddl_)
      - PROTOBUF_FIELD_OFFSET(FrenetFramePointProto, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrenetFramePointProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpeedPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPoint>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_da(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SpeedPoint::SpeedPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.SpeedPoint)
}
SpeedPoint::SpeedPoint(const SpeedPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&da_) -
    reinterpret_cast<char*>(&s_)) + sizeof(da_));
  // @@protoc_insertion_point(copy_constructor:athena.common.SpeedPoint)
}

void SpeedPoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&da_) -
      reinterpret_cast<char*>(&s_)) + sizeof(da_));
}

SpeedPoint::~SpeedPoint() {
  // @@protoc_insertion_point(destructor:athena.common.SpeedPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeedPoint::ArenaDtor(void* object) {
  SpeedPoint* _this = reinterpret_cast< SpeedPoint* >(object);
  (void)_this;
}
void SpeedPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedPoint& SpeedPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void SpeedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.SpeedPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&da_) -
        reinterpret_cast<char*>(&s_)) + sizeof(da_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_t(&has_bits);
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double da = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_da(&has_bits);
          da_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.SpeedPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_v(), target);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_da(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.SpeedPoint)
  return target;
}

size_t SpeedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.SpeedPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.SpeedPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.SpeedPoint)
    MergeFrom(*source);
  }
}

void SpeedPoint::MergeFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      da_ = from.da_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPoint::CopyFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPoint::IsInitialized() const {
  return true;
}

void SpeedPoint::InternalSwap(SpeedPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedPoint, da_)
      + sizeof(SpeedPoint::da_)
      - PROTOBUF_FIELD_OFFSET(SpeedPoint, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PathPointProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPointProto>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ddkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_y_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

PathPointProto::PathPointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.PathPointProto)
}
PathPointProto::PathPointProto(const PathPointProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lane_id()) {
    lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_id(), 
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_derivative_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_derivative_));
  // @@protoc_insertion_point(copy_constructor:athena.common.PathPointProto)
}

void PathPointProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_derivative_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_derivative_));
}

PathPointProto::~PathPointProto() {
  // @@protoc_insertion_point(destructor:athena.common.PathPointProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PathPointProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PathPointProto::ArenaDtor(void* object) {
  PathPointProto* _this = reinterpret_cast< PathPointProto* >(object);
  (void)_this;
}
void PathPointProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathPointProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPointProto& PathPointProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void PathPointProto::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.PathPointProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dkappa_) -
        reinterpret_cast<char*>(&x_)) + sizeof(dkappa_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&ddkappa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_derivative_) -
        reinterpret_cast<char*>(&ddkappa_)) + sizeof(y_derivative_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPointProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double kappa = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_kappa(&has_bits);
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dkappa = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_dkappa(&has_bits);
          dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ddkappa = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_ddkappa(&has_bits);
          ddkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string lane_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "athena.common.PathPointProto.lane_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double x_derivative = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_x_derivative(&has_bits);
          x_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y_derivative = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_y_derivative(&has_bits);
          y_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPointProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.PathPointProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_theta(), target);
  }

  // optional double kappa = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_kappa(), target);
  }

  // optional double s = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s(), target);
  }

  // optional double dkappa = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dkappa(), target);
  }

  // optional double ddkappa = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_ddkappa(), target);
  }

  // optional string lane_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "athena.common.PathPointProto.lane_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lane_id(), target);
  }

  // optional double x_derivative = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_x_derivative(), target);
  }

  // optional double y_derivative = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_y_derivative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.PathPointProto)
  return target;
}

size_t PathPointProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.PathPointProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lane_id = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double kappa = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double s = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double dkappa = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double ddkappa = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double x_derivative = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double y_derivative = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.PathPointProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPointProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.PathPointProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.PathPointProto)
    MergeFrom(*source);
  }
}

void PathPointProto::MergeFrom(const PathPointProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.PathPointProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000080u) {
      dkappa_ = from.dkappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ddkappa_ = from.ddkappa_;
    }
    if (cached_has_bits & 0x00000200u) {
      x_derivative_ = from.x_derivative_;
    }
    if (cached_has_bits & 0x00000400u) {
      y_derivative_ = from.y_derivative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathPointProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.PathPointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointProto::CopyFrom(const PathPointProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.PathPointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointProto::IsInitialized() const {
  return true;
}

void PathPointProto::InternalSwap(PathPointProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_id_.Swap(&other->lane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathPointProto, y_derivative_)
      + sizeof(PathPointProto::y_derivative_)
      - PROTOBUF_FIELD_OFFSET(PathPointProto, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Path::_Internal {
 public:
  using HasBits = decltype(std::declval<Path>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  path_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      path_point_(from.path_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:athena.common.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:athena.common.Path)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "athena.common.Path.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .athena.common.PathPointProto path_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "athena.common.Path.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .athena.common.PathPointProto path_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_path_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .athena.common.PathPointProto path_point = 2;
  total_size += 1UL * this->_internal_path_point_size();
  for (const auto& msg : this->path_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_point_.MergeFrom(from.path_point_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_point_.InternalSwap(&other->path_point_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrajectoryPointProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPointProto>()._has_bits_);
  static const ::athena::common::PathPointProto& path_point(const TrajectoryPointProto* msg);
  static void set_has_path_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_da(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::athena::common::GaussianInfo& gaussian_info(const TrajectoryPointProto* msg);
  static void set_has_gaussian_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::athena::common::PathPointProto&
TrajectoryPointProto::_Internal::path_point(const TrajectoryPointProto* msg) {
  return *msg->path_point_;
}
const ::athena::common::GaussianInfo&
TrajectoryPointProto::_Internal::gaussian_info(const TrajectoryPointProto* msg) {
  return *msg->gaussian_info_;
}
TrajectoryPointProto::TrajectoryPointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.TrajectoryPointProto)
}
TrajectoryPointProto::TrajectoryPointProto(const TrajectoryPointProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_point()) {
    path_point_ = new ::athena::common::PathPointProto(*from.path_point_);
  } else {
    path_point_ = nullptr;
  }
  if (from._internal_has_gaussian_info()) {
    gaussian_info_ = new ::athena::common::GaussianInfo(*from.gaussian_info_);
  } else {
    gaussian_info_ = nullptr;
  }
  ::memcpy(&v_, &from.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&v_)) + sizeof(steer_));
  // @@protoc_insertion_point(copy_constructor:athena.common.TrajectoryPointProto)
}

void TrajectoryPointProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&path_point_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&path_point_)) + sizeof(steer_));
}

TrajectoryPointProto::~TrajectoryPointProto() {
  // @@protoc_insertion_point(destructor:athena.common.TrajectoryPointProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrajectoryPointProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_point_;
  if (this != internal_default_instance()) delete gaussian_info_;
}

void TrajectoryPointProto::ArenaDtor(void* object) {
  TrajectoryPointProto* _this = reinterpret_cast< TrajectoryPointProto* >(object);
  (void)_this;
}
void TrajectoryPointProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryPointProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPointProto& TrajectoryPointProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPointProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPointProto::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.TrajectoryPointProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_point_ != nullptr);
      path_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gaussian_info_ != nullptr);
      gaussian_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_) -
        reinterpret_cast<char*>(&v_)) + sizeof(steer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPointProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .athena.common.PathPointProto path_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_relative_time(&has_bits);
          relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double da = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_da(&has_bits);
          da_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_steer(&has_bits);
          steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .athena.common.GaussianInfo gaussian_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaussian_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPointProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.TrajectoryPointProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .athena.common.PathPointProto path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path_point(this), target, stream);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_v(), target);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_a(), target);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_relative_time(), target);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_da(), target);
  }

  // optional double steer = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_steer(), target);
  }

  // optional .athena.common.GaussianInfo gaussian_info = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gaussian_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.TrajectoryPointProto)
  return target;
}

size_t TrajectoryPointProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.TrajectoryPointProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .athena.common.PathPointProto path_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_point_);
    }

    // optional .athena.common.GaussianInfo gaussian_info = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gaussian_info_);
    }

    // optional double v = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double steer = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPointProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.TrajectoryPointProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPointProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPointProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.TrajectoryPointProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.TrajectoryPointProto)
    MergeFrom(*source);
  }
}

void TrajectoryPointProto::MergeFrom(const TrajectoryPointProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.TrajectoryPointProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_point()->::athena::common::PathPointProto::MergeFrom(from._internal_path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gaussian_info()->::athena::common::GaussianInfo::MergeFrom(from._internal_gaussian_info());
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_time_ = from.relative_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      da_ = from.da_;
    }
    if (cached_has_bits & 0x00000040u) {
      steer_ = from.steer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPointProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.TrajectoryPointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointProto::CopyFrom(const TrajectoryPointProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.TrajectoryPointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointProto::IsInitialized() const {
  return true;
}

void TrajectoryPointProto::InternalSwap(TrajectoryPointProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryPointProto, steer_)
      + sizeof(TrajectoryPointProto::steer_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryPointProto, path_point_)>(
          reinterpret_cast<char*>(&path_point_),
          reinterpret_cast<char*>(&other->path_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPointProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrajectoryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrajectoryProto::TrajectoryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectory_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.TrajectoryProto)
}
TrajectoryProto::TrajectoryProto(const TrajectoryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:athena.common.TrajectoryProto)
}

void TrajectoryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrajectoryProto::~TrajectoryProto() {
  // @@protoc_insertion_point(destructor:athena.common.TrajectoryProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrajectoryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrajectoryProto::ArenaDtor(void* object) {
  TrajectoryProto* _this = reinterpret_cast< TrajectoryProto* >(object);
  (void)_this;
}
void TrajectoryProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryProto& TrajectoryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryProto_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.TrajectoryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "athena.common.TrajectoryProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .athena.common.TrajectoryPointProto trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.TrajectoryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "athena.common.TrajectoryProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .athena.common.TrajectoryPointProto trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trajectory_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.TrajectoryProto)
  return target;
}

size_t TrajectoryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.TrajectoryProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .athena.common.TrajectoryPointProto trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.TrajectoryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.TrajectoryProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.TrajectoryProto)
    MergeFrom(*source);
  }
}

void TrajectoryProto::MergeFrom(const TrajectoryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.TrajectoryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void TrajectoryProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.TrajectoryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryProto::CopyFrom(const TrajectoryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.TrajectoryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryProto::IsInitialized() const {
  return true;
}

void TrajectoryProto::InternalSwap(TrajectoryProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VehicleMotionPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleMotionPoint>()._has_bits_);
  static const ::athena::common::TrajectoryPointProto& trajectory_point(const VehicleMotionPoint* msg);
  static void set_has_trajectory_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::athena::common::TrajectoryPointProto&
VehicleMotionPoint::_Internal::trajectory_point(const VehicleMotionPoint* msg) {
  return *msg->trajectory_point_;
}
VehicleMotionPoint::VehicleMotionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.VehicleMotionPoint)
}
VehicleMotionPoint::VehicleMotionPoint(const VehicleMotionPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trajectory_point()) {
    trajectory_point_ = new ::athena::common::TrajectoryPointProto(*from.trajectory_point_);
  } else {
    trajectory_point_ = nullptr;
  }
  steer_ = from.steer_;
  // @@protoc_insertion_point(copy_constructor:athena.common.VehicleMotionPoint)
}

void VehicleMotionPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleMotionPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_point_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&trajectory_point_)) + sizeof(steer_));
}

VehicleMotionPoint::~VehicleMotionPoint() {
  // @@protoc_insertion_point(destructor:athena.common.VehicleMotionPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleMotionPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trajectory_point_;
}

void VehicleMotionPoint::ArenaDtor(void* object) {
  VehicleMotionPoint* _this = reinterpret_cast< VehicleMotionPoint* >(object);
  (void)_this;
}
void VehicleMotionPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleMotionPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleMotionPoint& VehicleMotionPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleMotionPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void VehicleMotionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.VehicleMotionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(trajectory_point_ != nullptr);
    trajectory_point_->Clear();
  }
  steer_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleMotionPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .athena.common.TrajectoryPointProto trajectory_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double steer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steer(&has_bits);
          steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleMotionPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.VehicleMotionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .athena.common.TrajectoryPointProto trajectory_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trajectory_point(this), target, stream);
  }

  // optional double steer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_steer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.VehicleMotionPoint)
  return target;
}

size_t VehicleMotionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.VehicleMotionPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .athena.common.TrajectoryPointProto trajectory_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_point_);
    }

    // optional double steer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleMotionPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.VehicleMotionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMotionPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleMotionPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.VehicleMotionPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.VehicleMotionPoint)
    MergeFrom(*source);
  }
}

void VehicleMotionPoint::MergeFrom(const VehicleMotionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.VehicleMotionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trajectory_point()->::athena::common::TrajectoryPointProto::MergeFrom(from._internal_trajectory_point());
    }
    if (cached_has_bits & 0x00000002u) {
      steer_ = from.steer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleMotionPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.VehicleMotionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMotionPoint::CopyFrom(const VehicleMotionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.VehicleMotionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotionPoint::IsInitialized() const {
  return true;
}

void VehicleMotionPoint::InternalSwap(VehicleMotionPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleMotionPoint, steer_)
      + sizeof(VehicleMotionPoint::steer_)
      - PROTOBUF_FIELD_OFFSET(VehicleMotionPoint, trajectory_point_)>(
          reinterpret_cast<char*>(&trajectory_point_),
          reinterpret_cast<char*>(&other->trajectory_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleMotionPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VehicleMotion::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleMotion>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VehicleMotion::VehicleMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vehicle_motion_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.VehicleMotion)
}
VehicleMotion::VehicleMotion(const VehicleMotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vehicle_motion_point_(from.vehicle_motion_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:athena.common.VehicleMotion)
}

void VehicleMotion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleMotion_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VehicleMotion::~VehicleMotion() {
  // @@protoc_insertion_point(destructor:athena.common.VehicleMotion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleMotion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VehicleMotion::ArenaDtor(void* object) {
  VehicleMotion* _this = reinterpret_cast< VehicleMotion* >(object);
  (void)_this;
}
void VehicleMotion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleMotion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleMotion& VehicleMotion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleMotion_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void VehicleMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.VehicleMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_motion_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleMotion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "athena.common.VehicleMotion.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .athena.common.VehicleMotionPoint vehicle_motion_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicle_motion_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleMotion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.VehicleMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "athena.common.VehicleMotion.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .athena.common.VehicleMotionPoint vehicle_motion_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehicle_motion_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vehicle_motion_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.VehicleMotion)
  return target;
}

size_t VehicleMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.VehicleMotion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .athena.common.VehicleMotionPoint vehicle_motion_point = 2;
  total_size += 1UL * this->_internal_vehicle_motion_point_size();
  for (const auto& msg : this->vehicle_motion_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleMotion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.VehicleMotion)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMotion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleMotion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.VehicleMotion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.VehicleMotion)
    MergeFrom(*source);
  }
}

void VehicleMotion::MergeFrom(const VehicleMotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.VehicleMotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_motion_point_.MergeFrom(from.vehicle_motion_point_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void VehicleMotion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.VehicleMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMotion::CopyFrom(const VehicleMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.VehicleMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotion::IsInitialized() const {
  return true;
}

void VehicleMotion::InternalSwap(VehicleMotion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vehicle_motion_point_.InternalSwap(&other->vehicle_motion_point_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleMotion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GaussianInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GaussianInfo>()._has_bits_);
  static void set_has_sigma_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sigma_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_correlation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_area_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ellipse_a(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ellipse_b(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_theta_a(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

GaussianInfo::GaussianInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:athena.common.GaussianInfo)
}
GaussianInfo::GaussianInfo(const GaussianInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sigma_x_, &from.sigma_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_a_) -
    reinterpret_cast<char*>(&sigma_x_)) + sizeof(theta_a_));
  // @@protoc_insertion_point(copy_constructor:athena.common.GaussianInfo)
}

void GaussianInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&theta_a_) -
      reinterpret_cast<char*>(&sigma_x_)) + sizeof(theta_a_));
}

GaussianInfo::~GaussianInfo() {
  // @@protoc_insertion_point(destructor:athena.common.GaussianInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GaussianInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GaussianInfo::ArenaDtor(void* object) {
  GaussianInfo* _this = reinterpret_cast< GaussianInfo* >(object);
  (void)_this;
}
void GaussianInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GaussianInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GaussianInfo& GaussianInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GaussianInfo_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void GaussianInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:athena.common.GaussianInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&sigma_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&theta_a_) -
        reinterpret_cast<char*>(&sigma_x_)) + sizeof(theta_a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GaussianInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double sigma_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_sigma_x(&has_bits);
          sigma_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sigma_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sigma_y(&has_bits);
          sigma_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double correlation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_correlation(&has_bits);
          correlation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double area_probability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_area_probability(&has_bits);
          area_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ellipse_a = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ellipse_a(&has_bits);
          ellipse_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ellipse_b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ellipse_b(&has_bits);
          ellipse_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double theta_a = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_theta_a(&has_bits);
          theta_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GaussianInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:athena.common.GaussianInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double sigma_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sigma_x(), target);
  }

  // optional double sigma_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_sigma_y(), target);
  }

  // optional double correlation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_correlation(), target);
  }

  // optional double area_probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_area_probability(), target);
  }

  // optional double ellipse_a = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ellipse_a(), target);
  }

  // optional double ellipse_b = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ellipse_b(), target);
  }

  // optional double theta_a = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_theta_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:athena.common.GaussianInfo)
  return target;
}

size_t GaussianInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:athena.common.GaussianInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double sigma_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double sigma_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double correlation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double area_probability = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ellipse_a = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double ellipse_b = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double theta_a = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GaussianInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:athena.common.GaussianInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GaussianInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GaussianInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:athena.common.GaussianInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:athena.common.GaussianInfo)
    MergeFrom(*source);
  }
}

void GaussianInfo::MergeFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:athena.common.GaussianInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      sigma_x_ = from.sigma_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      sigma_y_ = from.sigma_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      correlation_ = from.correlation_;
    }
    if (cached_has_bits & 0x00000008u) {
      area_probability_ = from.area_probability_;
    }
    if (cached_has_bits & 0x00000010u) {
      ellipse_a_ = from.ellipse_a_;
    }
    if (cached_has_bits & 0x00000020u) {
      ellipse_b_ = from.ellipse_b_;
    }
    if (cached_has_bits & 0x00000040u) {
      theta_a_ = from.theta_a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GaussianInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:athena.common.GaussianInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaussianInfo::CopyFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:athena.common.GaussianInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaussianInfo::IsInitialized() const {
  return true;
}

void GaussianInfo::InternalSwap(GaussianInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GaussianInfo, theta_a_)
      + sizeof(GaussianInfo::theta_a_)
      - PROTOBUF_FIELD_OFFSET(GaussianInfo, sigma_x_)>(
          reinterpret_cast<char*>(&sigma_x_),
          reinterpret_cast<char*>(&other->sigma_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GaussianInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace athena
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::athena::common::SLPointProto* Arena::CreateMaybeMessage< ::athena::common::SLPointProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::SLPointProto >(arena);
}
template<> PROTOBUF_NOINLINE ::athena::common::FrenetFramePointProto* Arena::CreateMaybeMessage< ::athena::common::FrenetFramePointProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::FrenetFramePointProto >(arena);
}
template<> PROTOBUF_NOINLINE ::athena::common::SpeedPoint* Arena::CreateMaybeMessage< ::athena::common::SpeedPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::SpeedPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::athena::common::PathPointProto* Arena::CreateMaybeMessage< ::athena::common::PathPointProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::PathPointProto >(arena);
}
template<> PROTOBUF_NOINLINE ::athena::common::Path* Arena::CreateMaybeMessage< ::athena::common::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::athena::common::TrajectoryPointProto* Arena::CreateMaybeMessage< ::athena::common::TrajectoryPointProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::TrajectoryPointProto >(arena);
}
template<> PROTOBUF_NOINLINE ::athena::common::TrajectoryProto* Arena::CreateMaybeMessage< ::athena::common::TrajectoryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::TrajectoryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::athena::common::VehicleMotionPoint* Arena::CreateMaybeMessage< ::athena::common::VehicleMotionPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::VehicleMotionPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::athena::common::VehicleMotion* Arena::CreateMaybeMessage< ::athena::common::VehicleMotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::VehicleMotion >(arena);
}
template<> PROTOBUF_NOINLINE ::athena::common::GaussianInfo* Arena::CreateMaybeMessage< ::athena::common::GaussianInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::athena::common::GaussianInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
