// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
namespace athena {
namespace common {
class FrenetFramePointProto;
class FrenetFramePointProtoDefaultTypeInternal;
extern FrenetFramePointProtoDefaultTypeInternal _FrenetFramePointProto_default_instance_;
class GaussianInfo;
class GaussianInfoDefaultTypeInternal;
extern GaussianInfoDefaultTypeInternal _GaussianInfo_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathPointProto;
class PathPointProtoDefaultTypeInternal;
extern PathPointProtoDefaultTypeInternal _PathPointProto_default_instance_;
class SLPointProto;
class SLPointProtoDefaultTypeInternal;
extern SLPointProtoDefaultTypeInternal _SLPointProto_default_instance_;
class SpeedPoint;
class SpeedPointDefaultTypeInternal;
extern SpeedPointDefaultTypeInternal _SpeedPoint_default_instance_;
class TrajectoryPointProto;
class TrajectoryPointProtoDefaultTypeInternal;
extern TrajectoryPointProtoDefaultTypeInternal _TrajectoryPointProto_default_instance_;
class TrajectoryProto;
class TrajectoryProtoDefaultTypeInternal;
extern TrajectoryProtoDefaultTypeInternal _TrajectoryProto_default_instance_;
class VehicleMotion;
class VehicleMotionDefaultTypeInternal;
extern VehicleMotionDefaultTypeInternal _VehicleMotion_default_instance_;
class VehicleMotionPoint;
class VehicleMotionPointDefaultTypeInternal;
extern VehicleMotionPointDefaultTypeInternal _VehicleMotionPoint_default_instance_;
}  // namespace common
}  // namespace athena
PROTOBUF_NAMESPACE_OPEN
template<> ::athena::common::FrenetFramePointProto* Arena::CreateMaybeMessage<::athena::common::FrenetFramePointProto>(Arena*);
template<> ::athena::common::GaussianInfo* Arena::CreateMaybeMessage<::athena::common::GaussianInfo>(Arena*);
template<> ::athena::common::Path* Arena::CreateMaybeMessage<::athena::common::Path>(Arena*);
template<> ::athena::common::PathPointProto* Arena::CreateMaybeMessage<::athena::common::PathPointProto>(Arena*);
template<> ::athena::common::SLPointProto* Arena::CreateMaybeMessage<::athena::common::SLPointProto>(Arena*);
template<> ::athena::common::SpeedPoint* Arena::CreateMaybeMessage<::athena::common::SpeedPoint>(Arena*);
template<> ::athena::common::TrajectoryPointProto* Arena::CreateMaybeMessage<::athena::common::TrajectoryPointProto>(Arena*);
template<> ::athena::common::TrajectoryProto* Arena::CreateMaybeMessage<::athena::common::TrajectoryProto>(Arena*);
template<> ::athena::common::VehicleMotion* Arena::CreateMaybeMessage<::athena::common::VehicleMotion>(Arena*);
template<> ::athena::common::VehicleMotionPoint* Arena::CreateMaybeMessage<::athena::common::VehicleMotionPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace athena {
namespace common {

// ===================================================================

class SLPointProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.SLPointProto) */ {
 public:
  inline SLPointProto() : SLPointProto(nullptr) {}
  virtual ~SLPointProto();

  SLPointProto(const SLPointProto& from);
  SLPointProto(SLPointProto&& from) noexcept
    : SLPointProto() {
    *this = ::std::move(from);
  }

  inline SLPointProto& operator=(const SLPointProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLPointProto& operator=(SLPointProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLPointProto& default_instance();

  static inline const SLPointProto* internal_default_instance() {
    return reinterpret_cast<const SLPointProto*>(
               &_SLPointProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLPointProto& a, SLPointProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SLPointProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLPointProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLPointProto* New() const final {
    return CreateMaybeMessage<SLPointProto>(nullptr);
  }

  SLPointProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLPointProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLPointProto& from);
  void MergeFrom(const SLPointProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLPointProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.SLPointProto";
  }
  protected:
  explicit SLPointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kLFieldNumber = 2,
  };
  // optional double s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional double l = 2;
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  double l() const;
  void set_l(double value);
  private:
  double _internal_l() const;
  void _internal_set_l(double value);
  public:

  // @@protoc_insertion_point(class_scope:athena.common.SLPointProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double s_;
  double l_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class FrenetFramePointProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.FrenetFramePointProto) */ {
 public:
  inline FrenetFramePointProto() : FrenetFramePointProto(nullptr) {}
  virtual ~FrenetFramePointProto();

  FrenetFramePointProto(const FrenetFramePointProto& from);
  FrenetFramePointProto(FrenetFramePointProto&& from) noexcept
    : FrenetFramePointProto() {
    *this = ::std::move(from);
  }

  inline FrenetFramePointProto& operator=(const FrenetFramePointProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrenetFramePointProto& operator=(FrenetFramePointProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrenetFramePointProto& default_instance();

  static inline const FrenetFramePointProto* internal_default_instance() {
    return reinterpret_cast<const FrenetFramePointProto*>(
               &_FrenetFramePointProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrenetFramePointProto& a, FrenetFramePointProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FrenetFramePointProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrenetFramePointProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrenetFramePointProto* New() const final {
    return CreateMaybeMessage<FrenetFramePointProto>(nullptr);
  }

  FrenetFramePointProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrenetFramePointProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrenetFramePointProto& from);
  void MergeFrom(const FrenetFramePointProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrenetFramePointProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.FrenetFramePointProto";
  }
  protected:
  explicit FrenetFramePointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kLFieldNumber = 2,
    kDlFieldNumber = 3,
    kDdlFieldNumber = 4,
  };
  // optional double s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional double l = 2;
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  double l() const;
  void set_l(double value);
  private:
  double _internal_l() const;
  void _internal_set_l(double value);
  public:

  // optional double dl = 3;
  bool has_dl() const;
  private:
  bool _internal_has_dl() const;
  public:
  void clear_dl();
  double dl() const;
  void set_dl(double value);
  private:
  double _internal_dl() const;
  void _internal_set_dl(double value);
  public:

  // optional double ddl = 4;
  bool has_ddl() const;
  private:
  bool _internal_has_ddl() const;
  public:
  void clear_ddl();
  double ddl() const;
  void set_ddl(double value);
  private:
  double _internal_ddl() const;
  void _internal_set_ddl(double value);
  public:

  // @@protoc_insertion_point(class_scope:athena.common.FrenetFramePointProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double s_;
  double l_;
  double dl_;
  double ddl_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class SpeedPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.SpeedPoint) */ {
 public:
  inline SpeedPoint() : SpeedPoint(nullptr) {}
  virtual ~SpeedPoint();

  SpeedPoint(const SpeedPoint& from);
  SpeedPoint(SpeedPoint&& from) noexcept
    : SpeedPoint() {
    *this = ::std::move(from);
  }

  inline SpeedPoint& operator=(const SpeedPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedPoint& operator=(SpeedPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedPoint& default_instance();

  static inline const SpeedPoint* internal_default_instance() {
    return reinterpret_cast<const SpeedPoint*>(
               &_SpeedPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpeedPoint& a, SpeedPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedPoint* New() const final {
    return CreateMaybeMessage<SpeedPoint>(nullptr);
  }

  SpeedPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedPoint& from);
  void MergeFrom(const SpeedPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.SpeedPoint";
  }
  protected:
  explicit SpeedPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kTFieldNumber = 2,
    kVFieldNumber = 3,
    kAFieldNumber = 4,
    kDaFieldNumber = 5,
  };
  // optional double s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional double t = 2;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // optional double v = 3;
  bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  void clear_v();
  double v() const;
  void set_v(double value);
  private:
  double _internal_v() const;
  void _internal_set_v(double value);
  public:

  // optional double a = 4;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // optional double da = 5;
  bool has_da() const;
  private:
  bool _internal_has_da() const;
  public:
  void clear_da();
  double da() const;
  void set_da(double value);
  private:
  double _internal_da() const;
  void _internal_set_da(double value);
  public:

  // @@protoc_insertion_point(class_scope:athena.common.SpeedPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double s_;
  double t_;
  double v_;
  double a_;
  double da_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class PathPointProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.PathPointProto) */ {
 public:
  inline PathPointProto() : PathPointProto(nullptr) {}
  virtual ~PathPointProto();

  PathPointProto(const PathPointProto& from);
  PathPointProto(PathPointProto&& from) noexcept
    : PathPointProto() {
    *this = ::std::move(from);
  }

  inline PathPointProto& operator=(const PathPointProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathPointProto& operator=(PathPointProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathPointProto& default_instance();

  static inline const PathPointProto* internal_default_instance() {
    return reinterpret_cast<const PathPointProto*>(
               &_PathPointProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PathPointProto& a, PathPointProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PathPointProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathPointProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathPointProto* New() const final {
    return CreateMaybeMessage<PathPointProto>(nullptr);
  }

  PathPointProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathPointProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathPointProto& from);
  void MergeFrom(const PathPointProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPointProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.PathPointProto";
  }
  protected:
  explicit PathPointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdFieldNumber = 9,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kThetaFieldNumber = 4,
    kKappaFieldNumber = 5,
    kSFieldNumber = 6,
    kDkappaFieldNumber = 7,
    kDdkappaFieldNumber = 8,
    kXDerivativeFieldNumber = 10,
    kYDerivativeFieldNumber = 11,
  };
  // optional string lane_id = 9;
  bool has_lane_id() const;
  private:
  bool _internal_has_lane_id() const;
  public:
  void clear_lane_id();
  const std::string& lane_id() const;
  void set_lane_id(const std::string& value);
  void set_lane_id(std::string&& value);
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  std::string* mutable_lane_id();
  std::string* release_lane_id();
  void set_allocated_lane_id(std::string* lane_id);
  private:
  const std::string& _internal_lane_id() const;
  void _internal_set_lane_id(const std::string& value);
  std::string* _internal_mutable_lane_id();
  public:

  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double theta = 4;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double kappa = 5;
  bool has_kappa() const;
  private:
  bool _internal_has_kappa() const;
  public:
  void clear_kappa();
  double kappa() const;
  void set_kappa(double value);
  private:
  double _internal_kappa() const;
  void _internal_set_kappa(double value);
  public:

  // optional double s = 6;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional double dkappa = 7;
  bool has_dkappa() const;
  private:
  bool _internal_has_dkappa() const;
  public:
  void clear_dkappa();
  double dkappa() const;
  void set_dkappa(double value);
  private:
  double _internal_dkappa() const;
  void _internal_set_dkappa(double value);
  public:

  // optional double ddkappa = 8;
  bool has_ddkappa() const;
  private:
  bool _internal_has_ddkappa() const;
  public:
  void clear_ddkappa();
  double ddkappa() const;
  void set_ddkappa(double value);
  private:
  double _internal_ddkappa() const;
  void _internal_set_ddkappa(double value);
  public:

  // optional double x_derivative = 10;
  bool has_x_derivative() const;
  private:
  bool _internal_has_x_derivative() const;
  public:
  void clear_x_derivative();
  double x_derivative() const;
  void set_x_derivative(double value);
  private:
  double _internal_x_derivative() const;
  void _internal_set_x_derivative(double value);
  public:

  // optional double y_derivative = 11;
  bool has_y_derivative() const;
  private:
  bool _internal_has_y_derivative() const;
  public:
  void clear_y_derivative();
  double y_derivative() const;
  void set_y_derivative(double value);
  private:
  double _internal_y_derivative() const;
  void _internal_set_y_derivative(double value);
  public:

  // @@protoc_insertion_point(class_scope:athena.common.PathPointProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_id_;
  double x_;
  double y_;
  double z_;
  double theta_;
  double kappa_;
  double s_;
  double dkappa_;
  double ddkappa_;
  double x_derivative_;
  double y_derivative_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class Path PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPointFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .athena.common.PathPointProto path_point = 2;
  int path_point_size() const;
  private:
  int _internal_path_point_size() const;
  public:
  void clear_path_point();
  ::athena::common::PathPointProto* mutable_path_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::PathPointProto >*
      mutable_path_point();
  private:
  const ::athena::common::PathPointProto& _internal_path_point(int index) const;
  ::athena::common::PathPointProto* _internal_add_path_point();
  public:
  const ::athena::common::PathPointProto& path_point(int index) const;
  ::athena::common::PathPointProto* add_path_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::PathPointProto >&
      path_point() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:athena.common.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::PathPointProto > path_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryPointProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.TrajectoryPointProto) */ {
 public:
  inline TrajectoryPointProto() : TrajectoryPointProto(nullptr) {}
  virtual ~TrajectoryPointProto();

  TrajectoryPointProto(const TrajectoryPointProto& from);
  TrajectoryPointProto(TrajectoryPointProto&& from) noexcept
    : TrajectoryPointProto() {
    *this = ::std::move(from);
  }

  inline TrajectoryPointProto& operator=(const TrajectoryPointProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPointProto& operator=(TrajectoryPointProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryPointProto& default_instance();

  static inline const TrajectoryPointProto* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPointProto*>(
               &_TrajectoryPointProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TrajectoryPointProto& a, TrajectoryPointProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPointProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryPointProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPointProto* New() const final {
    return CreateMaybeMessage<TrajectoryPointProto>(nullptr);
  }

  TrajectoryPointProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPointProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryPointProto& from);
  void MergeFrom(const TrajectoryPointProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPointProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.TrajectoryPointProto";
  }
  protected:
  explicit TrajectoryPointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPointFieldNumber = 1,
    kGaussianInfoFieldNumber = 7,
    kVFieldNumber = 2,
    kAFieldNumber = 3,
    kRelativeTimeFieldNumber = 4,
    kDaFieldNumber = 5,
    kSteerFieldNumber = 6,
  };
  // optional .athena.common.PathPointProto path_point = 1;
  bool has_path_point() const;
  private:
  bool _internal_has_path_point() const;
  public:
  void clear_path_point();
  const ::athena::common::PathPointProto& path_point() const;
  ::athena::common::PathPointProto* release_path_point();
  ::athena::common::PathPointProto* mutable_path_point();
  void set_allocated_path_point(::athena::common::PathPointProto* path_point);
  private:
  const ::athena::common::PathPointProto& _internal_path_point() const;
  ::athena::common::PathPointProto* _internal_mutable_path_point();
  public:
  void unsafe_arena_set_allocated_path_point(
      ::athena::common::PathPointProto* path_point);
  ::athena::common::PathPointProto* unsafe_arena_release_path_point();

  // optional .athena.common.GaussianInfo gaussian_info = 7;
  bool has_gaussian_info() const;
  private:
  bool _internal_has_gaussian_info() const;
  public:
  void clear_gaussian_info();
  const ::athena::common::GaussianInfo& gaussian_info() const;
  ::athena::common::GaussianInfo* release_gaussian_info();
  ::athena::common::GaussianInfo* mutable_gaussian_info();
  void set_allocated_gaussian_info(::athena::common::GaussianInfo* gaussian_info);
  private:
  const ::athena::common::GaussianInfo& _internal_gaussian_info() const;
  ::athena::common::GaussianInfo* _internal_mutable_gaussian_info();
  public:
  void unsafe_arena_set_allocated_gaussian_info(
      ::athena::common::GaussianInfo* gaussian_info);
  ::athena::common::GaussianInfo* unsafe_arena_release_gaussian_info();

  // optional double v = 2;
  bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  void clear_v();
  double v() const;
  void set_v(double value);
  private:
  double _internal_v() const;
  void _internal_set_v(double value);
  public:

  // optional double a = 3;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // optional double relative_time = 4;
  bool has_relative_time() const;
  private:
  bool _internal_has_relative_time() const;
  public:
  void clear_relative_time();
  double relative_time() const;
  void set_relative_time(double value);
  private:
  double _internal_relative_time() const;
  void _internal_set_relative_time(double value);
  public:

  // optional double da = 5;
  bool has_da() const;
  private:
  bool _internal_has_da() const;
  public:
  void clear_da();
  double da() const;
  void set_da(double value);
  private:
  double _internal_da() const;
  void _internal_set_da(double value);
  public:

  // optional double steer = 6;
  bool has_steer() const;
  private:
  bool _internal_has_steer() const;
  public:
  void clear_steer();
  double steer() const;
  void set_steer(double value);
  private:
  double _internal_steer() const;
  void _internal_set_steer(double value);
  public:

  // @@protoc_insertion_point(class_scope:athena.common.TrajectoryPointProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::athena::common::PathPointProto* path_point_;
  ::athena::common::GaussianInfo* gaussian_info_;
  double v_;
  double a_;
  double relative_time_;
  double da_;
  double steer_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.TrajectoryProto) */ {
 public:
  inline TrajectoryProto() : TrajectoryProto(nullptr) {}
  virtual ~TrajectoryProto();

  TrajectoryProto(const TrajectoryProto& from);
  TrajectoryProto(TrajectoryProto&& from) noexcept
    : TrajectoryProto() {
    *this = ::std::move(from);
  }

  inline TrajectoryProto& operator=(const TrajectoryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryProto& operator=(TrajectoryProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryProto& default_instance();

  static inline const TrajectoryProto* internal_default_instance() {
    return reinterpret_cast<const TrajectoryProto*>(
               &_TrajectoryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrajectoryProto& a, TrajectoryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryProto* New() const final {
    return CreateMaybeMessage<TrajectoryProto>(nullptr);
  }

  TrajectoryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryProto& from);
  void MergeFrom(const TrajectoryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.TrajectoryProto";
  }
  protected:
  explicit TrajectoryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPointFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .athena.common.TrajectoryPointProto trajectory_point = 2;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;
  public:
  void clear_trajectory_point();
  ::athena::common::TrajectoryPointProto* mutable_trajectory_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::TrajectoryPointProto >*
      mutable_trajectory_point();
  private:
  const ::athena::common::TrajectoryPointProto& _internal_trajectory_point(int index) const;
  ::athena::common::TrajectoryPointProto* _internal_add_trajectory_point();
  public:
  const ::athena::common::TrajectoryPointProto& trajectory_point(int index) const;
  ::athena::common::TrajectoryPointProto* add_trajectory_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::TrajectoryPointProto >&
      trajectory_point() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:athena.common.TrajectoryProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::TrajectoryPointProto > trajectory_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class VehicleMotionPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.VehicleMotionPoint) */ {
 public:
  inline VehicleMotionPoint() : VehicleMotionPoint(nullptr) {}
  virtual ~VehicleMotionPoint();

  VehicleMotionPoint(const VehicleMotionPoint& from);
  VehicleMotionPoint(VehicleMotionPoint&& from) noexcept
    : VehicleMotionPoint() {
    *this = ::std::move(from);
  }

  inline VehicleMotionPoint& operator=(const VehicleMotionPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleMotionPoint& operator=(VehicleMotionPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleMotionPoint& default_instance();

  static inline const VehicleMotionPoint* internal_default_instance() {
    return reinterpret_cast<const VehicleMotionPoint*>(
               &_VehicleMotionPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VehicleMotionPoint& a, VehicleMotionPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleMotionPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleMotionPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleMotionPoint* New() const final {
    return CreateMaybeMessage<VehicleMotionPoint>(nullptr);
  }

  VehicleMotionPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleMotionPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleMotionPoint& from);
  void MergeFrom(const VehicleMotionPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleMotionPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.VehicleMotionPoint";
  }
  protected:
  explicit VehicleMotionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPointFieldNumber = 1,
    kSteerFieldNumber = 2,
  };
  // optional .athena.common.TrajectoryPointProto trajectory_point = 1;
  bool has_trajectory_point() const;
  private:
  bool _internal_has_trajectory_point() const;
  public:
  void clear_trajectory_point();
  const ::athena::common::TrajectoryPointProto& trajectory_point() const;
  ::athena::common::TrajectoryPointProto* release_trajectory_point();
  ::athena::common::TrajectoryPointProto* mutable_trajectory_point();
  void set_allocated_trajectory_point(::athena::common::TrajectoryPointProto* trajectory_point);
  private:
  const ::athena::common::TrajectoryPointProto& _internal_trajectory_point() const;
  ::athena::common::TrajectoryPointProto* _internal_mutable_trajectory_point();
  public:
  void unsafe_arena_set_allocated_trajectory_point(
      ::athena::common::TrajectoryPointProto* trajectory_point);
  ::athena::common::TrajectoryPointProto* unsafe_arena_release_trajectory_point();

  // optional double steer = 2;
  bool has_steer() const;
  private:
  bool _internal_has_steer() const;
  public:
  void clear_steer();
  double steer() const;
  void set_steer(double value);
  private:
  double _internal_steer() const;
  void _internal_set_steer(double value);
  public:

  // @@protoc_insertion_point(class_scope:athena.common.VehicleMotionPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::athena::common::TrajectoryPointProto* trajectory_point_;
  double steer_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class VehicleMotion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.VehicleMotion) */ {
 public:
  inline VehicleMotion() : VehicleMotion(nullptr) {}
  virtual ~VehicleMotion();

  VehicleMotion(const VehicleMotion& from);
  VehicleMotion(VehicleMotion&& from) noexcept
    : VehicleMotion() {
    *this = ::std::move(from);
  }

  inline VehicleMotion& operator=(const VehicleMotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleMotion& operator=(VehicleMotion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleMotion& default_instance();

  static inline const VehicleMotion* internal_default_instance() {
    return reinterpret_cast<const VehicleMotion*>(
               &_VehicleMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VehicleMotion& a, VehicleMotion& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleMotion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleMotion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleMotion* New() const final {
    return CreateMaybeMessage<VehicleMotion>(nullptr);
  }

  VehicleMotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleMotion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleMotion& from);
  void MergeFrom(const VehicleMotion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleMotion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.VehicleMotion";
  }
  protected:
  explicit VehicleMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleMotionPointFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .athena.common.VehicleMotionPoint vehicle_motion_point = 2;
  int vehicle_motion_point_size() const;
  private:
  int _internal_vehicle_motion_point_size() const;
  public:
  void clear_vehicle_motion_point();
  ::athena::common::VehicleMotionPoint* mutable_vehicle_motion_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::VehicleMotionPoint >*
      mutable_vehicle_motion_point();
  private:
  const ::athena::common::VehicleMotionPoint& _internal_vehicle_motion_point(int index) const;
  ::athena::common::VehicleMotionPoint* _internal_add_vehicle_motion_point();
  public:
  const ::athena::common::VehicleMotionPoint& vehicle_motion_point(int index) const;
  ::athena::common::VehicleMotionPoint* add_vehicle_motion_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::VehicleMotionPoint >&
      vehicle_motion_point() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:athena.common.VehicleMotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::VehicleMotionPoint > vehicle_motion_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class GaussianInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.common.GaussianInfo) */ {
 public:
  inline GaussianInfo() : GaussianInfo(nullptr) {}
  virtual ~GaussianInfo();

  GaussianInfo(const GaussianInfo& from);
  GaussianInfo(GaussianInfo&& from) noexcept
    : GaussianInfo() {
    *this = ::std::move(from);
  }

  inline GaussianInfo& operator=(const GaussianInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaussianInfo& operator=(GaussianInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GaussianInfo& default_instance();

  static inline const GaussianInfo* internal_default_instance() {
    return reinterpret_cast<const GaussianInfo*>(
               &_GaussianInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GaussianInfo& a, GaussianInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GaussianInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GaussianInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GaussianInfo* New() const final {
    return CreateMaybeMessage<GaussianInfo>(nullptr);
  }

  GaussianInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GaussianInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GaussianInfo& from);
  void MergeFrom(const GaussianInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GaussianInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.common.GaussianInfo";
  }
  protected:
  explicit GaussianInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigmaXFieldNumber = 1,
    kSigmaYFieldNumber = 2,
    kCorrelationFieldNumber = 3,
    kAreaProbabilityFieldNumber = 4,
    kEllipseAFieldNumber = 5,
    kEllipseBFieldNumber = 6,
    kThetaAFieldNumber = 7,
  };
  // optional double sigma_x = 1;
  bool has_sigma_x() const;
  private:
  bool _internal_has_sigma_x() const;
  public:
  void clear_sigma_x();
  double sigma_x() const;
  void set_sigma_x(double value);
  private:
  double _internal_sigma_x() const;
  void _internal_set_sigma_x(double value);
  public:

  // optional double sigma_y = 2;
  bool has_sigma_y() const;
  private:
  bool _internal_has_sigma_y() const;
  public:
  void clear_sigma_y();
  double sigma_y() const;
  void set_sigma_y(double value);
  private:
  double _internal_sigma_y() const;
  void _internal_set_sigma_y(double value);
  public:

  // optional double correlation = 3;
  bool has_correlation() const;
  private:
  bool _internal_has_correlation() const;
  public:
  void clear_correlation();
  double correlation() const;
  void set_correlation(double value);
  private:
  double _internal_correlation() const;
  void _internal_set_correlation(double value);
  public:

  // optional double area_probability = 4;
  bool has_area_probability() const;
  private:
  bool _internal_has_area_probability() const;
  public:
  void clear_area_probability();
  double area_probability() const;
  void set_area_probability(double value);
  private:
  double _internal_area_probability() const;
  void _internal_set_area_probability(double value);
  public:

  // optional double ellipse_a = 5;
  bool has_ellipse_a() const;
  private:
  bool _internal_has_ellipse_a() const;
  public:
  void clear_ellipse_a();
  double ellipse_a() const;
  void set_ellipse_a(double value);
  private:
  double _internal_ellipse_a() const;
  void _internal_set_ellipse_a(double value);
  public:

  // optional double ellipse_b = 6;
  bool has_ellipse_b() const;
  private:
  bool _internal_has_ellipse_b() const;
  public:
  void clear_ellipse_b();
  double ellipse_b() const;
  void set_ellipse_b(double value);
  private:
  double _internal_ellipse_b() const;
  void _internal_set_ellipse_b(double value);
  public:

  // optional double theta_a = 7;
  bool has_theta_a() const;
  private:
  bool _internal_has_theta_a() const;
  public:
  void clear_theta_a();
  double theta_a() const;
  void set_theta_a(double value);
  private:
  double _internal_theta_a() const;
  void _internal_set_theta_a(double value);
  public:

  // @@protoc_insertion_point(class_scope:athena.common.GaussianInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double sigma_x_;
  double sigma_y_;
  double correlation_;
  double area_probability_;
  double ellipse_a_;
  double ellipse_b_;
  double theta_a_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLPointProto

// optional double s = 1;
inline bool SLPointProto::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SLPointProto::has_s() const {
  return _internal_has_s();
}
inline void SLPointProto::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SLPointProto::_internal_s() const {
  return s_;
}
inline double SLPointProto::s() const {
  // @@protoc_insertion_point(field_get:athena.common.SLPointProto.s)
  return _internal_s();
}
inline void SLPointProto::_internal_set_s(double value) {
  _has_bits_[0] |= 0x00000001u;
  s_ = value;
}
inline void SLPointProto::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:athena.common.SLPointProto.s)
}

// optional double l = 2;
inline bool SLPointProto::_internal_has_l() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SLPointProto::has_l() const {
  return _internal_has_l();
}
inline void SLPointProto::clear_l() {
  l_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SLPointProto::_internal_l() const {
  return l_;
}
inline double SLPointProto::l() const {
  // @@protoc_insertion_point(field_get:athena.common.SLPointProto.l)
  return _internal_l();
}
inline void SLPointProto::_internal_set_l(double value) {
  _has_bits_[0] |= 0x00000002u;
  l_ = value;
}
inline void SLPointProto::set_l(double value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:athena.common.SLPointProto.l)
}

// -------------------------------------------------------------------

// FrenetFramePointProto

// optional double s = 1;
inline bool FrenetFramePointProto::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FrenetFramePointProto::has_s() const {
  return _internal_has_s();
}
inline void FrenetFramePointProto::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FrenetFramePointProto::_internal_s() const {
  return s_;
}
inline double FrenetFramePointProto::s() const {
  // @@protoc_insertion_point(field_get:athena.common.FrenetFramePointProto.s)
  return _internal_s();
}
inline void FrenetFramePointProto::_internal_set_s(double value) {
  _has_bits_[0] |= 0x00000001u;
  s_ = value;
}
inline void FrenetFramePointProto::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:athena.common.FrenetFramePointProto.s)
}

// optional double l = 2;
inline bool FrenetFramePointProto::_internal_has_l() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrenetFramePointProto::has_l() const {
  return _internal_has_l();
}
inline void FrenetFramePointProto::clear_l() {
  l_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FrenetFramePointProto::_internal_l() const {
  return l_;
}
inline double FrenetFramePointProto::l() const {
  // @@protoc_insertion_point(field_get:athena.common.FrenetFramePointProto.l)
  return _internal_l();
}
inline void FrenetFramePointProto::_internal_set_l(double value) {
  _has_bits_[0] |= 0x00000002u;
  l_ = value;
}
inline void FrenetFramePointProto::set_l(double value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:athena.common.FrenetFramePointProto.l)
}

// optional double dl = 3;
inline bool FrenetFramePointProto::_internal_has_dl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FrenetFramePointProto::has_dl() const {
  return _internal_has_dl();
}
inline void FrenetFramePointProto::clear_dl() {
  dl_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FrenetFramePointProto::_internal_dl() const {
  return dl_;
}
inline double FrenetFramePointProto::dl() const {
  // @@protoc_insertion_point(field_get:athena.common.FrenetFramePointProto.dl)
  return _internal_dl();
}
inline void FrenetFramePointProto::_internal_set_dl(double value) {
  _has_bits_[0] |= 0x00000004u;
  dl_ = value;
}
inline void FrenetFramePointProto::set_dl(double value) {
  _internal_set_dl(value);
  // @@protoc_insertion_point(field_set:athena.common.FrenetFramePointProto.dl)
}

// optional double ddl = 4;
inline bool FrenetFramePointProto::_internal_has_ddl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FrenetFramePointProto::has_ddl() const {
  return _internal_has_ddl();
}
inline void FrenetFramePointProto::clear_ddl() {
  ddl_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double FrenetFramePointProto::_internal_ddl() const {
  return ddl_;
}
inline double FrenetFramePointProto::ddl() const {
  // @@protoc_insertion_point(field_get:athena.common.FrenetFramePointProto.ddl)
  return _internal_ddl();
}
inline void FrenetFramePointProto::_internal_set_ddl(double value) {
  _has_bits_[0] |= 0x00000008u;
  ddl_ = value;
}
inline void FrenetFramePointProto::set_ddl(double value) {
  _internal_set_ddl(value);
  // @@protoc_insertion_point(field_set:athena.common.FrenetFramePointProto.ddl)
}

// -------------------------------------------------------------------

// SpeedPoint

// optional double s = 1;
inline bool SpeedPoint::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpeedPoint::has_s() const {
  return _internal_has_s();
}
inline void SpeedPoint::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SpeedPoint::_internal_s() const {
  return s_;
}
inline double SpeedPoint::s() const {
  // @@protoc_insertion_point(field_get:athena.common.SpeedPoint.s)
  return _internal_s();
}
inline void SpeedPoint::_internal_set_s(double value) {
  _has_bits_[0] |= 0x00000001u;
  s_ = value;
}
inline void SpeedPoint::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:athena.common.SpeedPoint.s)
}

// optional double t = 2;
inline bool SpeedPoint::_internal_has_t() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpeedPoint::has_t() const {
  return _internal_has_t();
}
inline void SpeedPoint::clear_t() {
  t_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SpeedPoint::_internal_t() const {
  return t_;
}
inline double SpeedPoint::t() const {
  // @@protoc_insertion_point(field_get:athena.common.SpeedPoint.t)
  return _internal_t();
}
inline void SpeedPoint::_internal_set_t(double value) {
  _has_bits_[0] |= 0x00000002u;
  t_ = value;
}
inline void SpeedPoint::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:athena.common.SpeedPoint.t)
}

// optional double v = 3;
inline bool SpeedPoint::_internal_has_v() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpeedPoint::has_v() const {
  return _internal_has_v();
}
inline void SpeedPoint::clear_v() {
  v_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SpeedPoint::_internal_v() const {
  return v_;
}
inline double SpeedPoint::v() const {
  // @@protoc_insertion_point(field_get:athena.common.SpeedPoint.v)
  return _internal_v();
}
inline void SpeedPoint::_internal_set_v(double value) {
  _has_bits_[0] |= 0x00000004u;
  v_ = value;
}
inline void SpeedPoint::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:athena.common.SpeedPoint.v)
}

// optional double a = 4;
inline bool SpeedPoint::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpeedPoint::has_a() const {
  return _internal_has_a();
}
inline void SpeedPoint::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SpeedPoint::_internal_a() const {
  return a_;
}
inline double SpeedPoint::a() const {
  // @@protoc_insertion_point(field_get:athena.common.SpeedPoint.a)
  return _internal_a();
}
inline void SpeedPoint::_internal_set_a(double value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void SpeedPoint::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:athena.common.SpeedPoint.a)
}

// optional double da = 5;
inline bool SpeedPoint::_internal_has_da() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpeedPoint::has_da() const {
  return _internal_has_da();
}
inline void SpeedPoint::clear_da() {
  da_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SpeedPoint::_internal_da() const {
  return da_;
}
inline double SpeedPoint::da() const {
  // @@protoc_insertion_point(field_get:athena.common.SpeedPoint.da)
  return _internal_da();
}
inline void SpeedPoint::_internal_set_da(double value) {
  _has_bits_[0] |= 0x00000010u;
  da_ = value;
}
inline void SpeedPoint::set_da(double value) {
  _internal_set_da(value);
  // @@protoc_insertion_point(field_set:athena.common.SpeedPoint.da)
}

// -------------------------------------------------------------------

// PathPointProto

// optional double x = 1;
inline bool PathPointProto::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PathPointProto::has_x() const {
  return _internal_has_x();
}
inline void PathPointProto::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PathPointProto::_internal_x() const {
  return x_;
}
inline double PathPointProto::x() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.x)
  return _internal_x();
}
inline void PathPointProto::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void PathPointProto::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.x)
}

// optional double y = 2;
inline bool PathPointProto::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PathPointProto::has_y() const {
  return _internal_has_y();
}
inline void PathPointProto::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PathPointProto::_internal_y() const {
  return y_;
}
inline double PathPointProto::y() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.y)
  return _internal_y();
}
inline void PathPointProto::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void PathPointProto::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.y)
}

// optional double z = 3;
inline bool PathPointProto::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PathPointProto::has_z() const {
  return _internal_has_z();
}
inline void PathPointProto::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PathPointProto::_internal_z() const {
  return z_;
}
inline double PathPointProto::z() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.z)
  return _internal_z();
}
inline void PathPointProto::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
}
inline void PathPointProto::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.z)
}

// optional double theta = 4;
inline bool PathPointProto::_internal_has_theta() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PathPointProto::has_theta() const {
  return _internal_has_theta();
}
inline void PathPointProto::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PathPointProto::_internal_theta() const {
  return theta_;
}
inline double PathPointProto::theta() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.theta)
  return _internal_theta();
}
inline void PathPointProto::_internal_set_theta(double value) {
  _has_bits_[0] |= 0x00000010u;
  theta_ = value;
}
inline void PathPointProto::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.theta)
}

// optional double kappa = 5;
inline bool PathPointProto::_internal_has_kappa() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PathPointProto::has_kappa() const {
  return _internal_has_kappa();
}
inline void PathPointProto::clear_kappa() {
  kappa_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PathPointProto::_internal_kappa() const {
  return kappa_;
}
inline double PathPointProto::kappa() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.kappa)
  return _internal_kappa();
}
inline void PathPointProto::_internal_set_kappa(double value) {
  _has_bits_[0] |= 0x00000020u;
  kappa_ = value;
}
inline void PathPointProto::set_kappa(double value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.kappa)
}

// optional double s = 6;
inline bool PathPointProto::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PathPointProto::has_s() const {
  return _internal_has_s();
}
inline void PathPointProto::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double PathPointProto::_internal_s() const {
  return s_;
}
inline double PathPointProto::s() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.s)
  return _internal_s();
}
inline void PathPointProto::_internal_set_s(double value) {
  _has_bits_[0] |= 0x00000040u;
  s_ = value;
}
inline void PathPointProto::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.s)
}

// optional double dkappa = 7;
inline bool PathPointProto::_internal_has_dkappa() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PathPointProto::has_dkappa() const {
  return _internal_has_dkappa();
}
inline void PathPointProto::clear_dkappa() {
  dkappa_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PathPointProto::_internal_dkappa() const {
  return dkappa_;
}
inline double PathPointProto::dkappa() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.dkappa)
  return _internal_dkappa();
}
inline void PathPointProto::_internal_set_dkappa(double value) {
  _has_bits_[0] |= 0x00000080u;
  dkappa_ = value;
}
inline void PathPointProto::set_dkappa(double value) {
  _internal_set_dkappa(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.dkappa)
}

// optional double ddkappa = 8;
inline bool PathPointProto::_internal_has_ddkappa() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PathPointProto::has_ddkappa() const {
  return _internal_has_ddkappa();
}
inline void PathPointProto::clear_ddkappa() {
  ddkappa_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double PathPointProto::_internal_ddkappa() const {
  return ddkappa_;
}
inline double PathPointProto::ddkappa() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.ddkappa)
  return _internal_ddkappa();
}
inline void PathPointProto::_internal_set_ddkappa(double value) {
  _has_bits_[0] |= 0x00000100u;
  ddkappa_ = value;
}
inline void PathPointProto::set_ddkappa(double value) {
  _internal_set_ddkappa(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.ddkappa)
}

// optional string lane_id = 9;
inline bool PathPointProto::_internal_has_lane_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PathPointProto::has_lane_id() const {
  return _internal_has_lane_id();
}
inline void PathPointProto::clear_lane_id() {
  lane_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PathPointProto::lane_id() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.lane_id)
  return _internal_lane_id();
}
inline void PathPointProto::set_lane_id(const std::string& value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.lane_id)
}
inline std::string* PathPointProto::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable:athena.common.PathPointProto.lane_id)
  return _internal_mutable_lane_id();
}
inline const std::string& PathPointProto::_internal_lane_id() const {
  return lane_id_.Get();
}
inline void PathPointProto::_internal_set_lane_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PathPointProto::set_lane_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lane_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:athena.common.PathPointProto.lane_id)
}
inline void PathPointProto::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:athena.common.PathPointProto.lane_id)
}
inline void PathPointProto::set_lane_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:athena.common.PathPointProto.lane_id)
}
inline std::string* PathPointProto::_internal_mutable_lane_id() {
  _has_bits_[0] |= 0x00000001u;
  return lane_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PathPointProto::release_lane_id() {
  // @@protoc_insertion_point(field_release:athena.common.PathPointProto.lane_id)
  if (!_internal_has_lane_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lane_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PathPointProto::set_allocated_lane_id(std::string* lane_id) {
  if (lane_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lane_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lane_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:athena.common.PathPointProto.lane_id)
}

// optional double x_derivative = 10;
inline bool PathPointProto::_internal_has_x_derivative() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PathPointProto::has_x_derivative() const {
  return _internal_has_x_derivative();
}
inline void PathPointProto::clear_x_derivative() {
  x_derivative_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double PathPointProto::_internal_x_derivative() const {
  return x_derivative_;
}
inline double PathPointProto::x_derivative() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.x_derivative)
  return _internal_x_derivative();
}
inline void PathPointProto::_internal_set_x_derivative(double value) {
  _has_bits_[0] |= 0x00000200u;
  x_derivative_ = value;
}
inline void PathPointProto::set_x_derivative(double value) {
  _internal_set_x_derivative(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.x_derivative)
}

// optional double y_derivative = 11;
inline bool PathPointProto::_internal_has_y_derivative() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PathPointProto::has_y_derivative() const {
  return _internal_has_y_derivative();
}
inline void PathPointProto::clear_y_derivative() {
  y_derivative_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double PathPointProto::_internal_y_derivative() const {
  return y_derivative_;
}
inline double PathPointProto::y_derivative() const {
  // @@protoc_insertion_point(field_get:athena.common.PathPointProto.y_derivative)
  return _internal_y_derivative();
}
inline void PathPointProto::_internal_set_y_derivative(double value) {
  _has_bits_[0] |= 0x00000400u;
  y_derivative_ = value;
}
inline void PathPointProto::set_y_derivative(double value) {
  _internal_set_y_derivative(value);
  // @@protoc_insertion_point(field_set:athena.common.PathPointProto.y_derivative)
}

// -------------------------------------------------------------------

// Path

// optional string name = 1;
inline bool Path::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Path::has_name() const {
  return _internal_has_name();
}
inline void Path::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Path::name() const {
  // @@protoc_insertion_point(field_get:athena.common.Path.name)
  return _internal_name();
}
inline void Path::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:athena.common.Path.name)
}
inline std::string* Path::mutable_name() {
  // @@protoc_insertion_point(field_mutable:athena.common.Path.name)
  return _internal_mutable_name();
}
inline const std::string& Path::_internal_name() const {
  return name_.Get();
}
inline void Path::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Path::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:athena.common.Path.name)
}
inline void Path::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:athena.common.Path.name)
}
inline void Path::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:athena.common.Path.name)
}
inline std::string* Path::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Path::release_name() {
  // @@protoc_insertion_point(field_release:athena.common.Path.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Path::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:athena.common.Path.name)
}

// repeated .athena.common.PathPointProto path_point = 2;
inline int Path::_internal_path_point_size() const {
  return path_point_.size();
}
inline int Path::path_point_size() const {
  return _internal_path_point_size();
}
inline void Path::clear_path_point() {
  path_point_.Clear();
}
inline ::athena::common::PathPointProto* Path::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:athena.common.Path.path_point)
  return path_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::PathPointProto >*
Path::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:athena.common.Path.path_point)
  return &path_point_;
}
inline const ::athena::common::PathPointProto& Path::_internal_path_point(int index) const {
  return path_point_.Get(index);
}
inline const ::athena::common::PathPointProto& Path::path_point(int index) const {
  // @@protoc_insertion_point(field_get:athena.common.Path.path_point)
  return _internal_path_point(index);
}
inline ::athena::common::PathPointProto* Path::_internal_add_path_point() {
  return path_point_.Add();
}
inline ::athena::common::PathPointProto* Path::add_path_point() {
  // @@protoc_insertion_point(field_add:athena.common.Path.path_point)
  return _internal_add_path_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::PathPointProto >&
Path::path_point() const {
  // @@protoc_insertion_point(field_list:athena.common.Path.path_point)
  return path_point_;
}

// -------------------------------------------------------------------

// TrajectoryPointProto

// optional .athena.common.PathPointProto path_point = 1;
inline bool TrajectoryPointProto::_internal_has_path_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || path_point_ != nullptr);
  return value;
}
inline bool TrajectoryPointProto::has_path_point() const {
  return _internal_has_path_point();
}
inline void TrajectoryPointProto::clear_path_point() {
  if (path_point_ != nullptr) path_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::athena::common::PathPointProto& TrajectoryPointProto::_internal_path_point() const {
  const ::athena::common::PathPointProto* p = path_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::athena::common::PathPointProto&>(
      ::athena::common::_PathPointProto_default_instance_);
}
inline const ::athena::common::PathPointProto& TrajectoryPointProto::path_point() const {
  // @@protoc_insertion_point(field_get:athena.common.TrajectoryPointProto.path_point)
  return _internal_path_point();
}
inline void TrajectoryPointProto::unsafe_arena_set_allocated_path_point(
    ::athena::common::PathPointProto* path_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_point_);
  }
  path_point_ = path_point;
  if (path_point) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:athena.common.TrajectoryPointProto.path_point)
}
inline ::athena::common::PathPointProto* TrajectoryPointProto::release_path_point() {
  _has_bits_[0] &= ~0x00000001u;
  ::athena::common::PathPointProto* temp = path_point_;
  path_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::athena::common::PathPointProto* TrajectoryPointProto::unsafe_arena_release_path_point() {
  // @@protoc_insertion_point(field_release:athena.common.TrajectoryPointProto.path_point)
  _has_bits_[0] &= ~0x00000001u;
  ::athena::common::PathPointProto* temp = path_point_;
  path_point_ = nullptr;
  return temp;
}
inline ::athena::common::PathPointProto* TrajectoryPointProto::_internal_mutable_path_point() {
  _has_bits_[0] |= 0x00000001u;
  if (path_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::athena::common::PathPointProto>(GetArena());
    path_point_ = p;
  }
  return path_point_;
}
inline ::athena::common::PathPointProto* TrajectoryPointProto::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable:athena.common.TrajectoryPointProto.path_point)
  return _internal_mutable_path_point();
}
inline void TrajectoryPointProto::set_allocated_path_point(::athena::common::PathPointProto* path_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete path_point_;
  }
  if (path_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(path_point);
    if (message_arena != submessage_arena) {
      path_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_point_ = path_point;
  // @@protoc_insertion_point(field_set_allocated:athena.common.TrajectoryPointProto.path_point)
}

// optional double v = 2;
inline bool TrajectoryPointProto::_internal_has_v() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrajectoryPointProto::has_v() const {
  return _internal_has_v();
}
inline void TrajectoryPointProto::clear_v() {
  v_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TrajectoryPointProto::_internal_v() const {
  return v_;
}
inline double TrajectoryPointProto::v() const {
  // @@protoc_insertion_point(field_get:athena.common.TrajectoryPointProto.v)
  return _internal_v();
}
inline void TrajectoryPointProto::_internal_set_v(double value) {
  _has_bits_[0] |= 0x00000004u;
  v_ = value;
}
inline void TrajectoryPointProto::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:athena.common.TrajectoryPointProto.v)
}

// optional double a = 3;
inline bool TrajectoryPointProto::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrajectoryPointProto::has_a() const {
  return _internal_has_a();
}
inline void TrajectoryPointProto::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TrajectoryPointProto::_internal_a() const {
  return a_;
}
inline double TrajectoryPointProto::a() const {
  // @@protoc_insertion_point(field_get:athena.common.TrajectoryPointProto.a)
  return _internal_a();
}
inline void TrajectoryPointProto::_internal_set_a(double value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void TrajectoryPointProto::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:athena.common.TrajectoryPointProto.a)
}

// optional double relative_time = 4;
inline bool TrajectoryPointProto::_internal_has_relative_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrajectoryPointProto::has_relative_time() const {
  return _internal_has_relative_time();
}
inline void TrajectoryPointProto::clear_relative_time() {
  relative_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double TrajectoryPointProto::_internal_relative_time() const {
  return relative_time_;
}
inline double TrajectoryPointProto::relative_time() const {
  // @@protoc_insertion_point(field_get:athena.common.TrajectoryPointProto.relative_time)
  return _internal_relative_time();
}
inline void TrajectoryPointProto::_internal_set_relative_time(double value) {
  _has_bits_[0] |= 0x00000010u;
  relative_time_ = value;
}
inline void TrajectoryPointProto::set_relative_time(double value) {
  _internal_set_relative_time(value);
  // @@protoc_insertion_point(field_set:athena.common.TrajectoryPointProto.relative_time)
}

// optional double da = 5;
inline bool TrajectoryPointProto::_internal_has_da() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrajectoryPointProto::has_da() const {
  return _internal_has_da();
}
inline void TrajectoryPointProto::clear_da() {
  da_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double TrajectoryPointProto::_internal_da() const {
  return da_;
}
inline double TrajectoryPointProto::da() const {
  // @@protoc_insertion_point(field_get:athena.common.TrajectoryPointProto.da)
  return _internal_da();
}
inline void TrajectoryPointProto::_internal_set_da(double value) {
  _has_bits_[0] |= 0x00000020u;
  da_ = value;
}
inline void TrajectoryPointProto::set_da(double value) {
  _internal_set_da(value);
  // @@protoc_insertion_point(field_set:athena.common.TrajectoryPointProto.da)
}

// optional double steer = 6;
inline bool TrajectoryPointProto::_internal_has_steer() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrajectoryPointProto::has_steer() const {
  return _internal_has_steer();
}
inline void TrajectoryPointProto::clear_steer() {
  steer_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double TrajectoryPointProto::_internal_steer() const {
  return steer_;
}
inline double TrajectoryPointProto::steer() const {
  // @@protoc_insertion_point(field_get:athena.common.TrajectoryPointProto.steer)
  return _internal_steer();
}
inline void TrajectoryPointProto::_internal_set_steer(double value) {
  _has_bits_[0] |= 0x00000040u;
  steer_ = value;
}
inline void TrajectoryPointProto::set_steer(double value) {
  _internal_set_steer(value);
  // @@protoc_insertion_point(field_set:athena.common.TrajectoryPointProto.steer)
}

// optional .athena.common.GaussianInfo gaussian_info = 7;
inline bool TrajectoryPointProto::_internal_has_gaussian_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gaussian_info_ != nullptr);
  return value;
}
inline bool TrajectoryPointProto::has_gaussian_info() const {
  return _internal_has_gaussian_info();
}
inline void TrajectoryPointProto::clear_gaussian_info() {
  if (gaussian_info_ != nullptr) gaussian_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::athena::common::GaussianInfo& TrajectoryPointProto::_internal_gaussian_info() const {
  const ::athena::common::GaussianInfo* p = gaussian_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::athena::common::GaussianInfo&>(
      ::athena::common::_GaussianInfo_default_instance_);
}
inline const ::athena::common::GaussianInfo& TrajectoryPointProto::gaussian_info() const {
  // @@protoc_insertion_point(field_get:athena.common.TrajectoryPointProto.gaussian_info)
  return _internal_gaussian_info();
}
inline void TrajectoryPointProto::unsafe_arena_set_allocated_gaussian_info(
    ::athena::common::GaussianInfo* gaussian_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gaussian_info_);
  }
  gaussian_info_ = gaussian_info;
  if (gaussian_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:athena.common.TrajectoryPointProto.gaussian_info)
}
inline ::athena::common::GaussianInfo* TrajectoryPointProto::release_gaussian_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::athena::common::GaussianInfo* temp = gaussian_info_;
  gaussian_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::athena::common::GaussianInfo* TrajectoryPointProto::unsafe_arena_release_gaussian_info() {
  // @@protoc_insertion_point(field_release:athena.common.TrajectoryPointProto.gaussian_info)
  _has_bits_[0] &= ~0x00000002u;
  ::athena::common::GaussianInfo* temp = gaussian_info_;
  gaussian_info_ = nullptr;
  return temp;
}
inline ::athena::common::GaussianInfo* TrajectoryPointProto::_internal_mutable_gaussian_info() {
  _has_bits_[0] |= 0x00000002u;
  if (gaussian_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::athena::common::GaussianInfo>(GetArena());
    gaussian_info_ = p;
  }
  return gaussian_info_;
}
inline ::athena::common::GaussianInfo* TrajectoryPointProto::mutable_gaussian_info() {
  // @@protoc_insertion_point(field_mutable:athena.common.TrajectoryPointProto.gaussian_info)
  return _internal_mutable_gaussian_info();
}
inline void TrajectoryPointProto::set_allocated_gaussian_info(::athena::common::GaussianInfo* gaussian_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gaussian_info_;
  }
  if (gaussian_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gaussian_info);
    if (message_arena != submessage_arena) {
      gaussian_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaussian_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gaussian_info_ = gaussian_info;
  // @@protoc_insertion_point(field_set_allocated:athena.common.TrajectoryPointProto.gaussian_info)
}

// -------------------------------------------------------------------

// TrajectoryProto

// optional string name = 1;
inline bool TrajectoryProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrajectoryProto::has_name() const {
  return _internal_has_name();
}
inline void TrajectoryProto::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrajectoryProto::name() const {
  // @@protoc_insertion_point(field_get:athena.common.TrajectoryProto.name)
  return _internal_name();
}
inline void TrajectoryProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:athena.common.TrajectoryProto.name)
}
inline std::string* TrajectoryProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:athena.common.TrajectoryProto.name)
  return _internal_mutable_name();
}
inline const std::string& TrajectoryProto::_internal_name() const {
  return name_.Get();
}
inline void TrajectoryProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrajectoryProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:athena.common.TrajectoryProto.name)
}
inline void TrajectoryProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:athena.common.TrajectoryProto.name)
}
inline void TrajectoryProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:athena.common.TrajectoryProto.name)
}
inline std::string* TrajectoryProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrajectoryProto::release_name() {
  // @@protoc_insertion_point(field_release:athena.common.TrajectoryProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrajectoryProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:athena.common.TrajectoryProto.name)
}

// repeated .athena.common.TrajectoryPointProto trajectory_point = 2;
inline int TrajectoryProto::_internal_trajectory_point_size() const {
  return trajectory_point_.size();
}
inline int TrajectoryProto::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline void TrajectoryProto::clear_trajectory_point() {
  trajectory_point_.Clear();
}
inline ::athena::common::TrajectoryPointProto* TrajectoryProto::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:athena.common.TrajectoryProto.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::TrajectoryPointProto >*
TrajectoryProto::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:athena.common.TrajectoryProto.trajectory_point)
  return &trajectory_point_;
}
inline const ::athena::common::TrajectoryPointProto& TrajectoryProto::_internal_trajectory_point(int index) const {
  return trajectory_point_.Get(index);
}
inline const ::athena::common::TrajectoryPointProto& TrajectoryProto::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:athena.common.TrajectoryProto.trajectory_point)
  return _internal_trajectory_point(index);
}
inline ::athena::common::TrajectoryPointProto* TrajectoryProto::_internal_add_trajectory_point() {
  return trajectory_point_.Add();
}
inline ::athena::common::TrajectoryPointProto* TrajectoryProto::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:athena.common.TrajectoryProto.trajectory_point)
  return _internal_add_trajectory_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::TrajectoryPointProto >&
TrajectoryProto::trajectory_point() const {
  // @@protoc_insertion_point(field_list:athena.common.TrajectoryProto.trajectory_point)
  return trajectory_point_;
}

// -------------------------------------------------------------------

// VehicleMotionPoint

// optional .athena.common.TrajectoryPointProto trajectory_point = 1;
inline bool VehicleMotionPoint::_internal_has_trajectory_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || trajectory_point_ != nullptr);
  return value;
}
inline bool VehicleMotionPoint::has_trajectory_point() const {
  return _internal_has_trajectory_point();
}
inline void VehicleMotionPoint::clear_trajectory_point() {
  if (trajectory_point_ != nullptr) trajectory_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::athena::common::TrajectoryPointProto& VehicleMotionPoint::_internal_trajectory_point() const {
  const ::athena::common::TrajectoryPointProto* p = trajectory_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::athena::common::TrajectoryPointProto&>(
      ::athena::common::_TrajectoryPointProto_default_instance_);
}
inline const ::athena::common::TrajectoryPointProto& VehicleMotionPoint::trajectory_point() const {
  // @@protoc_insertion_point(field_get:athena.common.VehicleMotionPoint.trajectory_point)
  return _internal_trajectory_point();
}
inline void VehicleMotionPoint::unsafe_arena_set_allocated_trajectory_point(
    ::athena::common::TrajectoryPointProto* trajectory_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_point_);
  }
  trajectory_point_ = trajectory_point;
  if (trajectory_point) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:athena.common.VehicleMotionPoint.trajectory_point)
}
inline ::athena::common::TrajectoryPointProto* VehicleMotionPoint::release_trajectory_point() {
  _has_bits_[0] &= ~0x00000001u;
  ::athena::common::TrajectoryPointProto* temp = trajectory_point_;
  trajectory_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::athena::common::TrajectoryPointProto* VehicleMotionPoint::unsafe_arena_release_trajectory_point() {
  // @@protoc_insertion_point(field_release:athena.common.VehicleMotionPoint.trajectory_point)
  _has_bits_[0] &= ~0x00000001u;
  ::athena::common::TrajectoryPointProto* temp = trajectory_point_;
  trajectory_point_ = nullptr;
  return temp;
}
inline ::athena::common::TrajectoryPointProto* VehicleMotionPoint::_internal_mutable_trajectory_point() {
  _has_bits_[0] |= 0x00000001u;
  if (trajectory_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::athena::common::TrajectoryPointProto>(GetArena());
    trajectory_point_ = p;
  }
  return trajectory_point_;
}
inline ::athena::common::TrajectoryPointProto* VehicleMotionPoint::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable:athena.common.VehicleMotionPoint.trajectory_point)
  return _internal_mutable_trajectory_point();
}
inline void VehicleMotionPoint::set_allocated_trajectory_point(::athena::common::TrajectoryPointProto* trajectory_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trajectory_point_;
  }
  if (trajectory_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trajectory_point);
    if (message_arena != submessage_arena) {
      trajectory_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trajectory_point_ = trajectory_point;
  // @@protoc_insertion_point(field_set_allocated:athena.common.VehicleMotionPoint.trajectory_point)
}

// optional double steer = 2;
inline bool VehicleMotionPoint::_internal_has_steer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleMotionPoint::has_steer() const {
  return _internal_has_steer();
}
inline void VehicleMotionPoint::clear_steer() {
  steer_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double VehicleMotionPoint::_internal_steer() const {
  return steer_;
}
inline double VehicleMotionPoint::steer() const {
  // @@protoc_insertion_point(field_get:athena.common.VehicleMotionPoint.steer)
  return _internal_steer();
}
inline void VehicleMotionPoint::_internal_set_steer(double value) {
  _has_bits_[0] |= 0x00000002u;
  steer_ = value;
}
inline void VehicleMotionPoint::set_steer(double value) {
  _internal_set_steer(value);
  // @@protoc_insertion_point(field_set:athena.common.VehicleMotionPoint.steer)
}

// -------------------------------------------------------------------

// VehicleMotion

// optional string name = 1;
inline bool VehicleMotion::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleMotion::has_name() const {
  return _internal_has_name();
}
inline void VehicleMotion::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleMotion::name() const {
  // @@protoc_insertion_point(field_get:athena.common.VehicleMotion.name)
  return _internal_name();
}
inline void VehicleMotion::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:athena.common.VehicleMotion.name)
}
inline std::string* VehicleMotion::mutable_name() {
  // @@protoc_insertion_point(field_mutable:athena.common.VehicleMotion.name)
  return _internal_mutable_name();
}
inline const std::string& VehicleMotion::_internal_name() const {
  return name_.Get();
}
inline void VehicleMotion::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VehicleMotion::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:athena.common.VehicleMotion.name)
}
inline void VehicleMotion::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:athena.common.VehicleMotion.name)
}
inline void VehicleMotion::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:athena.common.VehicleMotion.name)
}
inline std::string* VehicleMotion::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VehicleMotion::release_name() {
  // @@protoc_insertion_point(field_release:athena.common.VehicleMotion.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VehicleMotion::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:athena.common.VehicleMotion.name)
}

// repeated .athena.common.VehicleMotionPoint vehicle_motion_point = 2;
inline int VehicleMotion::_internal_vehicle_motion_point_size() const {
  return vehicle_motion_point_.size();
}
inline int VehicleMotion::vehicle_motion_point_size() const {
  return _internal_vehicle_motion_point_size();
}
inline void VehicleMotion::clear_vehicle_motion_point() {
  vehicle_motion_point_.Clear();
}
inline ::athena::common::VehicleMotionPoint* VehicleMotion::mutable_vehicle_motion_point(int index) {
  // @@protoc_insertion_point(field_mutable:athena.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::VehicleMotionPoint >*
VehicleMotion::mutable_vehicle_motion_point() {
  // @@protoc_insertion_point(field_mutable_list:athena.common.VehicleMotion.vehicle_motion_point)
  return &vehicle_motion_point_;
}
inline const ::athena::common::VehicleMotionPoint& VehicleMotion::_internal_vehicle_motion_point(int index) const {
  return vehicle_motion_point_.Get(index);
}
inline const ::athena::common::VehicleMotionPoint& VehicleMotion::vehicle_motion_point(int index) const {
  // @@protoc_insertion_point(field_get:athena.common.VehicleMotion.vehicle_motion_point)
  return _internal_vehicle_motion_point(index);
}
inline ::athena::common::VehicleMotionPoint* VehicleMotion::_internal_add_vehicle_motion_point() {
  return vehicle_motion_point_.Add();
}
inline ::athena::common::VehicleMotionPoint* VehicleMotion::add_vehicle_motion_point() {
  // @@protoc_insertion_point(field_add:athena.common.VehicleMotion.vehicle_motion_point)
  return _internal_add_vehicle_motion_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::common::VehicleMotionPoint >&
VehicleMotion::vehicle_motion_point() const {
  // @@protoc_insertion_point(field_list:athena.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_;
}

// -------------------------------------------------------------------

// GaussianInfo

// optional double sigma_x = 1;
inline bool GaussianInfo::_internal_has_sigma_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GaussianInfo::has_sigma_x() const {
  return _internal_has_sigma_x();
}
inline void GaussianInfo::clear_sigma_x() {
  sigma_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double GaussianInfo::_internal_sigma_x() const {
  return sigma_x_;
}
inline double GaussianInfo::sigma_x() const {
  // @@protoc_insertion_point(field_get:athena.common.GaussianInfo.sigma_x)
  return _internal_sigma_x();
}
inline void GaussianInfo::_internal_set_sigma_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  sigma_x_ = value;
}
inline void GaussianInfo::set_sigma_x(double value) {
  _internal_set_sigma_x(value);
  // @@protoc_insertion_point(field_set:athena.common.GaussianInfo.sigma_x)
}

// optional double sigma_y = 2;
inline bool GaussianInfo::_internal_has_sigma_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GaussianInfo::has_sigma_y() const {
  return _internal_has_sigma_y();
}
inline void GaussianInfo::clear_sigma_y() {
  sigma_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GaussianInfo::_internal_sigma_y() const {
  return sigma_y_;
}
inline double GaussianInfo::sigma_y() const {
  // @@protoc_insertion_point(field_get:athena.common.GaussianInfo.sigma_y)
  return _internal_sigma_y();
}
inline void GaussianInfo::_internal_set_sigma_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  sigma_y_ = value;
}
inline void GaussianInfo::set_sigma_y(double value) {
  _internal_set_sigma_y(value);
  // @@protoc_insertion_point(field_set:athena.common.GaussianInfo.sigma_y)
}

// optional double correlation = 3;
inline bool GaussianInfo::_internal_has_correlation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GaussianInfo::has_correlation() const {
  return _internal_has_correlation();
}
inline void GaussianInfo::clear_correlation() {
  correlation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GaussianInfo::_internal_correlation() const {
  return correlation_;
}
inline double GaussianInfo::correlation() const {
  // @@protoc_insertion_point(field_get:athena.common.GaussianInfo.correlation)
  return _internal_correlation();
}
inline void GaussianInfo::_internal_set_correlation(double value) {
  _has_bits_[0] |= 0x00000004u;
  correlation_ = value;
}
inline void GaussianInfo::set_correlation(double value) {
  _internal_set_correlation(value);
  // @@protoc_insertion_point(field_set:athena.common.GaussianInfo.correlation)
}

// optional double area_probability = 4;
inline bool GaussianInfo::_internal_has_area_probability() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GaussianInfo::has_area_probability() const {
  return _internal_has_area_probability();
}
inline void GaussianInfo::clear_area_probability() {
  area_probability_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double GaussianInfo::_internal_area_probability() const {
  return area_probability_;
}
inline double GaussianInfo::area_probability() const {
  // @@protoc_insertion_point(field_get:athena.common.GaussianInfo.area_probability)
  return _internal_area_probability();
}
inline void GaussianInfo::_internal_set_area_probability(double value) {
  _has_bits_[0] |= 0x00000008u;
  area_probability_ = value;
}
inline void GaussianInfo::set_area_probability(double value) {
  _internal_set_area_probability(value);
  // @@protoc_insertion_point(field_set:athena.common.GaussianInfo.area_probability)
}

// optional double ellipse_a = 5;
inline bool GaussianInfo::_internal_has_ellipse_a() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GaussianInfo::has_ellipse_a() const {
  return _internal_has_ellipse_a();
}
inline void GaussianInfo::clear_ellipse_a() {
  ellipse_a_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double GaussianInfo::_internal_ellipse_a() const {
  return ellipse_a_;
}
inline double GaussianInfo::ellipse_a() const {
  // @@protoc_insertion_point(field_get:athena.common.GaussianInfo.ellipse_a)
  return _internal_ellipse_a();
}
inline void GaussianInfo::_internal_set_ellipse_a(double value) {
  _has_bits_[0] |= 0x00000010u;
  ellipse_a_ = value;
}
inline void GaussianInfo::set_ellipse_a(double value) {
  _internal_set_ellipse_a(value);
  // @@protoc_insertion_point(field_set:athena.common.GaussianInfo.ellipse_a)
}

// optional double ellipse_b = 6;
inline bool GaussianInfo::_internal_has_ellipse_b() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GaussianInfo::has_ellipse_b() const {
  return _internal_has_ellipse_b();
}
inline void GaussianInfo::clear_ellipse_b() {
  ellipse_b_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double GaussianInfo::_internal_ellipse_b() const {
  return ellipse_b_;
}
inline double GaussianInfo::ellipse_b() const {
  // @@protoc_insertion_point(field_get:athena.common.GaussianInfo.ellipse_b)
  return _internal_ellipse_b();
}
inline void GaussianInfo::_internal_set_ellipse_b(double value) {
  _has_bits_[0] |= 0x00000020u;
  ellipse_b_ = value;
}
inline void GaussianInfo::set_ellipse_b(double value) {
  _internal_set_ellipse_b(value);
  // @@protoc_insertion_point(field_set:athena.common.GaussianInfo.ellipse_b)
}

// optional double theta_a = 7;
inline bool GaussianInfo::_internal_has_theta_a() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GaussianInfo::has_theta_a() const {
  return _internal_has_theta_a();
}
inline void GaussianInfo::clear_theta_a() {
  theta_a_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double GaussianInfo::_internal_theta_a() const {
  return theta_a_;
}
inline double GaussianInfo::theta_a() const {
  // @@protoc_insertion_point(field_get:athena.common.GaussianInfo.theta_a)
  return _internal_theta_a();
}
inline void GaussianInfo::_internal_set_theta_a(double value) {
  _has_bits_[0] |= 0x00000040u;
  theta_a_ = value;
}
inline void GaussianInfo::set_theta_a(double value) {
  _internal_set_theta_a(value);
  // @@protoc_insertion_point(field_set:athena.common.GaussianInfo.theta_a)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace athena

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
