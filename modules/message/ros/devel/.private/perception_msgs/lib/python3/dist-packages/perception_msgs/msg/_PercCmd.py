# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/PercCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class PercCmd(genpy.Message):
  _md5sum = "08540cb1d7896a929933b0fa32473d34"
  _type = "perception_msgs/PercCmd"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

#动作执行id,增加含义：时间+序号
uint64 action_id

# Perceive Kind
uint32 PERC_DEST                 = 1
uint32 PERC_ABS                  = 2
uint32 PERC_REL                  = 3

# 自动充电
uint32 PERC_AUTO_CHARGING        = 20
# 环境查看
uint32 PERC_CHECK_ENV            = 21
# 自动建图
uint32 PERC_AUTO_MAPPING         = 22

# 跟随模式
uint32 PERC_FOLLOW               = 30
# 陌生人迎接
uint32 PERC_STRANGER_WELCOME     = 31
# 主人迎接
uint32 PERC_OWNER_WELCOME        = 32
# 行为互动
uint32 PERC_BEHAVIOR_INTERACTION = 33
# 握手动作
uint32 PERC_HANDSHAKE            = 34

# 待机陪伴
uint32 PERC_STANDBY_ACCOMPANY    = 35
# 娱乐陪伴
uint32 PERC_HAPPY_ACCOMPANY      = 36
# 工作陪伴
uint32 PERC_WORK_ACCOMPANY       = 37
# 积极陪伴
uint32 PERC_POSITIVE_ACCOMPANY   = 38
# 消极陪伴
uint32 PERC_NEGATIVE_ACCOMPANY   = 39

# 小孩看护
uint32 PERC_CHILD_WATCH          = 40
# 老人看护
uint32 PERC_OLDER_WATCH          = 41
# 危险提醒
uint32 PERC_DANGER_REMINDER      = 42
# 事件提醒
uint32 PERC_EVENT_REMINDER       = 43
# 开始走秀（语言下方，不需要感知）
uint32 PERC_CATWALK_START        = 44
# 走秀互动
uint32 PERC_CATWALK_ACT          = 45
# 走秀展示
uint32 PERC_CATWALK_SHOW         = 46
# 走秀返回
uint32 PERC_CATWALK_BACK         = 47

# 自由活动
uint32 PERC_FREE_TIME            = 50
# 社交模式
uint32 PERC_SOCIALIZE            = 51
# 围观场景
uint32 PERC_SPECT_PERFORM        = 55
# 表情分析
uint32 PERC_FACE_DETCTION        = 56


# 上报危险信息（不需要请求）
uint32 PERC_DANGER_INFO          = 60
# 欢迎模式
uint32 PERC_WELCOME_DEMO         = 61
# 回大厅找人
uint32 PERC_LOBBY_DEMO           = 62

# 任务取消（不需要请求）
uint32 PERC_CANCEL               = 100

uint32 PERC_NODE_CLOSE           = 200
uint32 PERC_NODE_START           = 201
uint32 PERC_NODE_RESET           = 202

# 感知命令类型
uint32 perc_kind
uint64 req_id

# 跟随开关
uint32 FOLLOW_ON  = 1
uint32 FOLLOW_OFF = 2
uint32 on_off
string follow_name

# 目标角度
float64 angle

# 字符串表示某个位置
string point_name

# Point表示某个位置
geometry_msgs/Point point
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  PERC_DEST = 1
  PERC_ABS = 2
  PERC_REL = 3
  PERC_AUTO_CHARGING = 20
  PERC_CHECK_ENV = 21
  PERC_AUTO_MAPPING = 22
  PERC_FOLLOW = 30
  PERC_STRANGER_WELCOME = 31
  PERC_OWNER_WELCOME = 32
  PERC_BEHAVIOR_INTERACTION = 33
  PERC_HANDSHAKE = 34
  PERC_STANDBY_ACCOMPANY = 35
  PERC_HAPPY_ACCOMPANY = 36
  PERC_WORK_ACCOMPANY = 37
  PERC_POSITIVE_ACCOMPANY = 38
  PERC_NEGATIVE_ACCOMPANY = 39
  PERC_CHILD_WATCH = 40
  PERC_OLDER_WATCH = 41
  PERC_DANGER_REMINDER = 42
  PERC_EVENT_REMINDER = 43
  PERC_CATWALK_START = 44
  PERC_CATWALK_ACT = 45
  PERC_CATWALK_SHOW = 46
  PERC_CATWALK_BACK = 47
  PERC_FREE_TIME = 50
  PERC_SOCIALIZE = 51
  PERC_SPECT_PERFORM = 55
  PERC_FACE_DETCTION = 56
  PERC_DANGER_INFO = 60
  PERC_WELCOME_DEMO = 61
  PERC_LOBBY_DEMO = 62
  PERC_CANCEL = 100
  PERC_NODE_CLOSE = 200
  PERC_NODE_START = 201
  PERC_NODE_RESET = 202
  FOLLOW_ON = 1
  FOLLOW_OFF = 2

  __slots__ = ['header','action_id','perc_kind','req_id','on_off','follow_name','angle','point_name','point']
  _slot_types = ['std_msgs/Header','uint64','uint32','uint64','uint32','string','float64','string','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,action_id,perc_kind,req_id,on_off,follow_name,angle,point_name,point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PercCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.action_id is None:
        self.action_id = 0
      if self.perc_kind is None:
        self.perc_kind = 0
      if self.req_id is None:
        self.req_id = 0
      if self.on_off is None:
        self.on_off = 0
      if self.follow_name is None:
        self.follow_name = ''
      if self.angle is None:
        self.angle = 0.
      if self.point_name is None:
        self.point_name = ''
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
    else:
      self.header = std_msgs.msg.Header()
      self.action_id = 0
      self.perc_kind = 0
      self.req_id = 0
      self.on_off = 0
      self.follow_name = ''
      self.angle = 0.
      self.point_name = ''
      self.point = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QIQI().pack(_x.action_id, _x.perc_kind, _x.req_id, _x.on_off))
      _x = self.follow_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.angle
      buff.write(_get_struct_d().pack(_x))
      _x = self.point_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.point.x, _x.point.y, _x.point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.action_id, _x.perc_kind, _x.req_id, _x.on_off,) = _get_struct_QIQI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.follow_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.follow_name = str[start:end]
      start = end
      end += 8
      (self.angle,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.point_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.point_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.point.x, _x.point.y, _x.point.z,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QIQI().pack(_x.action_id, _x.perc_kind, _x.req_id, _x.on_off))
      _x = self.follow_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.angle
      buff.write(_get_struct_d().pack(_x))
      _x = self.point_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.point.x, _x.point.y, _x.point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.action_id, _x.perc_kind, _x.req_id, _x.on_off,) = _get_struct_QIQI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.follow_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.follow_name = str[start:end]
      start = end
      end += 8
      (self.angle,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.point_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.point_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.point.x, _x.point.y, _x.point.z,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_QIQI = None
def _get_struct_QIQI():
    global _struct_QIQI
    if _struct_QIQI is None:
        _struct_QIQI = struct.Struct("<QIQI")
    return _struct_QIQI
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
