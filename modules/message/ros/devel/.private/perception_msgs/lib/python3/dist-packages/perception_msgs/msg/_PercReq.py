# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/PercReq.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PercReq(genpy.Message):
  _md5sum = "492b0539a30d91f76050eff6a0b4c63a"
  _type = "perception_msgs/PercReq"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# 动作执行id,增加含义：时间+序号 
uint64 req_id

# Perceive Kind

# 自动充电
uint32 PERC_AUTO_CHARGING        = 20
# 环境查看
uint32 PERC_CHECK_ENV            = 21
# 自动建图
uint32 PERC_AUTO_MAPPING         = 22

# 跟随模式
uint32 PERC_FOLLOW               = 30
# 陌生人迎接
uint32 PERC_STRANGER_WELCOME     = 31
# 主人迎接
uint32 PERC_OWNER_WELCOME        = 32
# 行为互动
uint32 PERC_BEHAVIOR_INTERACTION = 33
# 握手动作
uint32 PERC_HANDSHAKE            = 34

# 待机陪伴
uint32 PERC_STANDBY_ACCOMPANY    = 35
# 娱乐陪伴
uint32 PERC_HAPPY_ACCOMPANY      = 36
# 工作陪伴
uint32 PERC_WORK_ACCOMPANY       = 37
# 积极陪伴
uint32 PERC_POSITIVE_ACCOMPANY   = 38
# 消极陪伴
uint32 PERC_NEGATIVE_ACCOMPANY   = 39

# 小孩看护
uint32 PERC_CHILD_WATCH          = 40
# 老人看护
uint32 PERC_OLDER_WATCH          = 41
# 危险提醒
uint32 PERC_DANGER_REMINDER      = 42
# 事件提醒
uint32 PERC_EVENT_REMINDER       = 43
# 开始走秀（语言下方，不需要感知）
uint32 PERC_CATWALK_START        = 44
# 走秀互动
uint32 PERC_CATWALK_ACT          = 45
# 走秀展示
uint32 PERC_CATWALK_SHOW         = 46
# 走秀返回
uint32 PERC_CATWALK_BACK         = 47

# 自由活动
uint32 PERC_FREE_TIME            = 50
# 社交模式
uint32 PERC_SOCIALIZE            = 51
# 围观场景
uint32 PERC_SPECT_PERFORM        = 55
# 表情分析
uint32 PERC_FACE_DETCTION        = 56

# 上报危险信息（不需要请求）
uint32 PERC_DANGER_INFO          = 60

uint32 PERC_HAND_OK              = 70
uint32 PERC_HAND_V               = 71
uint32 PERC_HAND_SHAKE           = 72
uint32 PERC_HAND_COME            = 73
uint32 PERC_HAND_WAVE            = 74
uint32 PERC_CAMERA_DEMO          = 80

# 任务取消（不需要请求）
uint32 PERC_CANCEL               = 100

# 感知类型
uint32 perc_kind

# 危险信息
string danger_info"""
  # Pseudo-constants
  PERC_AUTO_CHARGING = 20
  PERC_CHECK_ENV = 21
  PERC_AUTO_MAPPING = 22
  PERC_FOLLOW = 30
  PERC_STRANGER_WELCOME = 31
  PERC_OWNER_WELCOME = 32
  PERC_BEHAVIOR_INTERACTION = 33
  PERC_HANDSHAKE = 34
  PERC_STANDBY_ACCOMPANY = 35
  PERC_HAPPY_ACCOMPANY = 36
  PERC_WORK_ACCOMPANY = 37
  PERC_POSITIVE_ACCOMPANY = 38
  PERC_NEGATIVE_ACCOMPANY = 39
  PERC_CHILD_WATCH = 40
  PERC_OLDER_WATCH = 41
  PERC_DANGER_REMINDER = 42
  PERC_EVENT_REMINDER = 43
  PERC_CATWALK_START = 44
  PERC_CATWALK_ACT = 45
  PERC_CATWALK_SHOW = 46
  PERC_CATWALK_BACK = 47
  PERC_FREE_TIME = 50
  PERC_SOCIALIZE = 51
  PERC_SPECT_PERFORM = 55
  PERC_FACE_DETCTION = 56
  PERC_DANGER_INFO = 60
  PERC_HAND_OK = 70
  PERC_HAND_V = 71
  PERC_HAND_SHAKE = 72
  PERC_HAND_COME = 73
  PERC_HAND_WAVE = 74
  PERC_CAMERA_DEMO = 80
  PERC_CANCEL = 100

  __slots__ = ['req_id','perc_kind','danger_info']
  _slot_types = ['uint64','uint32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       req_id,perc_kind,danger_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PercReq, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.req_id is None:
        self.req_id = 0
      if self.perc_kind is None:
        self.perc_kind = 0
      if self.danger_info is None:
        self.danger_info = ''
    else:
      self.req_id = 0
      self.perc_kind = 0
      self.danger_info = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QI().pack(_x.req_id, _x.perc_kind))
      _x = self.danger_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.req_id, _x.perc_kind,) = _get_struct_QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.danger_info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.danger_info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QI().pack(_x.req_id, _x.perc_kind))
      _x = self.danger_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.req_id, _x.perc_kind,) = _get_struct_QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.danger_info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.danger_info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QI = None
def _get_struct_QI():
    global _struct_QI
    if _struct_QI is None:
        _struct_QI = struct.Struct("<QI")
    return _struct_QI
