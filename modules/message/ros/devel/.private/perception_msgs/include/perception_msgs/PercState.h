// Generated by gencpp from file perception_msgs/PercState.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_PERCSTATE_H
#define PERCEPTION_MSGS_MESSAGE_PERCSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct PercState_
{
  typedef PercState_<ContainerAllocator> Type;

  PercState_()
    : header()
    , action_id(0)
    , perc_kind(0)
    , exe_state(0)
    , exe_result(0)
    , err_code(0)
    , err_info()
    , wait_for_millisec(0)  {
    }
  PercState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , action_id(0)
    , perc_kind(0)
    , exe_state(0)
    , exe_result(0)
    , err_code(0)
    , err_info(_alloc)
    , wait_for_millisec(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _action_id_type;
  _action_id_type action_id;

   typedef uint32_t _perc_kind_type;
  _perc_kind_type perc_kind;

   typedef uint8_t _exe_state_type;
  _exe_state_type exe_state;

   typedef uint8_t _exe_result_type;
  _exe_result_type exe_result;

   typedef uint16_t _err_code_type;
  _err_code_type err_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _err_info_type;
  _err_info_type err_info;

   typedef uint64_t _wait_for_millisec_type;
  _wait_for_millisec_type wait_for_millisec;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTION_IDLE)
  #undef ACTION_IDLE
#endif
#if defined(_WIN32) && defined(ACTION_RUNNING)
  #undef ACTION_RUNNING
#endif
#if defined(_WIN32) && defined(ACTION_DONE)
  #undef ACTION_DONE
#endif
#if defined(_WIN32) && defined(ACTION_NONE)
  #undef ACTION_NONE
#endif
#if defined(_WIN32) && defined(ACTION_SUCCESS)
  #undef ACTION_SUCCESS
#endif
#if defined(_WIN32) && defined(ACTION_FAIL)
  #undef ACTION_FAIL
#endif
#if defined(_WIN32) && defined(ACTION_ERR_NONE)
  #undef ACTION_ERR_NONE
#endif
#if defined(_WIN32) && defined(ACTION_ERR_NOWORK)
  #undef ACTION_ERR_NOWORK
#endif
#if defined(_WIN32) && defined(PERC_DEST)
  #undef PERC_DEST
#endif
#if defined(_WIN32) && defined(PERC_ABS)
  #undef PERC_ABS
#endif
#if defined(_WIN32) && defined(PERC_REL)
  #undef PERC_REL
#endif
#if defined(_WIN32) && defined(PERC_AUTO_CHARGING)
  #undef PERC_AUTO_CHARGING
#endif
#if defined(_WIN32) && defined(PERC_CHECK_ENV)
  #undef PERC_CHECK_ENV
#endif
#if defined(_WIN32) && defined(PERC_AUTO_MAPPING)
  #undef PERC_AUTO_MAPPING
#endif
#if defined(_WIN32) && defined(PERC_FOLLOW)
  #undef PERC_FOLLOW
#endif
#if defined(_WIN32) && defined(PERC_STRANGER_WELCOME)
  #undef PERC_STRANGER_WELCOME
#endif
#if defined(_WIN32) && defined(PERC_OWNER_WELCOME)
  #undef PERC_OWNER_WELCOME
#endif
#if defined(_WIN32) && defined(PERC_BEHAVIOR_INTERACTION)
  #undef PERC_BEHAVIOR_INTERACTION
#endif
#if defined(_WIN32) && defined(PERC_HANDSHAKE)
  #undef PERC_HANDSHAKE
#endif
#if defined(_WIN32) && defined(PERC_STANDBY_ACCOMPANY)
  #undef PERC_STANDBY_ACCOMPANY
#endif
#if defined(_WIN32) && defined(PERC_HAPPY_ACCOMPANY)
  #undef PERC_HAPPY_ACCOMPANY
#endif
#if defined(_WIN32) && defined(PERC_WORK_ACCOMPANY)
  #undef PERC_WORK_ACCOMPANY
#endif
#if defined(_WIN32) && defined(PERC_POSITIVE_ACCOMPANY)
  #undef PERC_POSITIVE_ACCOMPANY
#endif
#if defined(_WIN32) && defined(PERC_NEGATIVE_ACCOMPANY)
  #undef PERC_NEGATIVE_ACCOMPANY
#endif
#if defined(_WIN32) && defined(PERC_CHILD_WATCH)
  #undef PERC_CHILD_WATCH
#endif
#if defined(_WIN32) && defined(PERC_OLDER_WATCH)
  #undef PERC_OLDER_WATCH
#endif
#if defined(_WIN32) && defined(PERC_DANGER_REMINDER)
  #undef PERC_DANGER_REMINDER
#endif
#if defined(_WIN32) && defined(PERC_EVENT_REMINDER)
  #undef PERC_EVENT_REMINDER
#endif
#if defined(_WIN32) && defined(PERC_CATWALK_START)
  #undef PERC_CATWALK_START
#endif
#if defined(_WIN32) && defined(PERC_CATWALK_ACT)
  #undef PERC_CATWALK_ACT
#endif
#if defined(_WIN32) && defined(PERC_CATWALK_SHOW)
  #undef PERC_CATWALK_SHOW
#endif
#if defined(_WIN32) && defined(PERC_CATWALK_BACK)
  #undef PERC_CATWALK_BACK
#endif
#if defined(_WIN32) && defined(PERC_FREE_TIME)
  #undef PERC_FREE_TIME
#endif
#if defined(_WIN32) && defined(PERC_SOCIALIZE)
  #undef PERC_SOCIALIZE
#endif
#if defined(_WIN32) && defined(PERC_DANGER_INFO)
  #undef PERC_DANGER_INFO
#endif
#if defined(_WIN32) && defined(PERC_WELCOME_DEMO)
  #undef PERC_WELCOME_DEMO
#endif
#if defined(_WIN32) && defined(PERC_CANCEL)
  #undef PERC_CANCEL
#endif
#if defined(_WIN32) && defined(PERC_NODE_CLOSE)
  #undef PERC_NODE_CLOSE
#endif
#if defined(_WIN32) && defined(PERC_NODE_START)
  #undef PERC_NODE_START
#endif
#if defined(_WIN32) && defined(PERC_NODE_RESET)
  #undef PERC_NODE_RESET
#endif

  enum {
    ACTION_IDLE = 0u,
    ACTION_RUNNING = 1u,
    ACTION_DONE = 2u,
    ACTION_NONE = 0u,
    ACTION_SUCCESS = 1u,
    ACTION_FAIL = 2u,
    ACTION_ERR_NONE = 0u,
    ACTION_ERR_NOWORK = 1u,
    PERC_DEST = 1u,
    PERC_ABS = 2u,
    PERC_REL = 3u,
    PERC_AUTO_CHARGING = 20u,
    PERC_CHECK_ENV = 21u,
    PERC_AUTO_MAPPING = 22u,
    PERC_FOLLOW = 30u,
    PERC_STRANGER_WELCOME = 31u,
    PERC_OWNER_WELCOME = 32u,
    PERC_BEHAVIOR_INTERACTION = 33u,
    PERC_HANDSHAKE = 34u,
    PERC_STANDBY_ACCOMPANY = 35u,
    PERC_HAPPY_ACCOMPANY = 36u,
    PERC_WORK_ACCOMPANY = 37u,
    PERC_POSITIVE_ACCOMPANY = 38u,
    PERC_NEGATIVE_ACCOMPANY = 39u,
    PERC_CHILD_WATCH = 40u,
    PERC_OLDER_WATCH = 41u,
    PERC_DANGER_REMINDER = 42u,
    PERC_EVENT_REMINDER = 43u,
    PERC_CATWALK_START = 44u,
    PERC_CATWALK_ACT = 45u,
    PERC_CATWALK_SHOW = 46u,
    PERC_CATWALK_BACK = 47u,
    PERC_FREE_TIME = 50u,
    PERC_SOCIALIZE = 51u,
    PERC_DANGER_INFO = 60u,
    PERC_WELCOME_DEMO = 70u,
    PERC_CANCEL = 100u,
    PERC_NODE_CLOSE = 200u,
    PERC_NODE_START = 201u,
    PERC_NODE_RESET = 202u,
  };


  typedef boost::shared_ptr< ::perception_msgs::PercState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::PercState_<ContainerAllocator> const> ConstPtr;

}; // struct PercState_

typedef ::perception_msgs::PercState_<std::allocator<void> > PercState;

typedef boost::shared_ptr< ::perception_msgs::PercState > PercStatePtr;
typedef boost::shared_ptr< ::perception_msgs::PercState const> PercStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::PercState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::PercState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::PercState_<ContainerAllocator1> & lhs, const ::perception_msgs::PercState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.action_id == rhs.action_id &&
    lhs.perc_kind == rhs.perc_kind &&
    lhs.exe_state == rhs.exe_state &&
    lhs.exe_result == rhs.exe_result &&
    lhs.err_code == rhs.err_code &&
    lhs.err_info == rhs.err_info &&
    lhs.wait_for_millisec == rhs.wait_for_millisec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::PercState_<ContainerAllocator1> & lhs, const ::perception_msgs::PercState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::PercState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::PercState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::PercState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::PercState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::PercState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::PercState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::PercState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54333f0d38bd18fb2d888adabbf15a33";
  }

  static const char* value(const ::perception_msgs::PercState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54333f0d38bd18fbULL;
  static const uint64_t static_value2 = 0x2d888adabbf15a33ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::PercState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/PercState";
  }

  static const char* value(const ::perception_msgs::PercState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::PercState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# ActionState\n"
"uint8 ACTION_IDLE = 0\n"
"uint8 ACTION_RUNNING = 1\n"
"uint8 ACTION_DONE = 2\n"
"\n"
"# ActionResult\n"
"uint8 ACTION_NONE = 0\n"
"uint8 ACTION_SUCCESS = 1\n"
"uint8 ACTION_FAIL = 2\n"
"\n"
"# ErrCode\n"
"uint16 ACTION_ERR_NONE = 0\n"
"uint16 ACTION_ERR_NOWORK = 1\n"
"\n"
"# 当前执行的id\n"
"uint64 action_id\n"
"\n"
"\n"
"# Perceive Kind\n"
"uint32 PERC_DEST                 = 1\n"
"uint32 PERC_ABS                  = 2\n"
"uint32 PERC_REL                  = 3\n"
"\n"
"# 自动充电\n"
"uint32 PERC_AUTO_CHARGING        = 20\n"
"# 环境查看\n"
"uint32 PERC_CHECK_ENV            = 21\n"
"# 自动建图\n"
"uint32 PERC_AUTO_MAPPING         = 22\n"
"\n"
"# 跟随模式\n"
"uint32 PERC_FOLLOW               = 30\n"
"# 陌生人迎接\n"
"uint32 PERC_STRANGER_WELCOME     = 31\n"
"# 主人迎接\n"
"uint32 PERC_OWNER_WELCOME        = 32\n"
"# 行为互动\n"
"uint32 PERC_BEHAVIOR_INTERACTION = 33\n"
"# 握手动作\n"
"uint32 PERC_HANDSHAKE            = 34\n"
"\n"
"# 待机陪伴\n"
"uint32 PERC_STANDBY_ACCOMPANY    = 35\n"
"# 娱乐陪伴\n"
"uint32 PERC_HAPPY_ACCOMPANY      = 36\n"
"# 工作陪伴\n"
"uint32 PERC_WORK_ACCOMPANY       = 37\n"
"# 积极陪伴\n"
"uint32 PERC_POSITIVE_ACCOMPANY   = 38\n"
"# 消极陪伴\n"
"uint32 PERC_NEGATIVE_ACCOMPANY   = 39\n"
"\n"
"# 小孩看护\n"
"uint32 PERC_CHILD_WATCH          = 40\n"
"# 老人看护\n"
"uint32 PERC_OLDER_WATCH          = 41\n"
"# 危险提醒\n"
"uint32 PERC_DANGER_REMINDER      = 42\n"
"# 事件提醒\n"
"uint32 PERC_EVENT_REMINDER       = 43\n"
"# 开始走秀（语言下方，不需要感知）\n"
"uint32 PERC_CATWALK_START        = 44\n"
"# 走秀互动\n"
"uint32 PERC_CATWALK_ACT          = 45\n"
"# 走秀展示\n"
"uint32 PERC_CATWALK_SHOW         = 46\n"
"# 走秀返回\n"
"uint32 PERC_CATWALK_BACK         = 47\n"
"\n"
"# 自由活动\n"
"uint32 PERC_FREE_TIME            = 50\n"
"# 社交模式\n"
"uint32 PERC_SOCIALIZE            = 51\n"
"\n"
"# 上报危险信息（不需要请求）\n"
"uint32 PERC_DANGER_INFO          = 60\n"
"# 欢迎模式\n"
"uint32 PERC_WELCOME_DEMO         = 70\n"
"\n"
"# 任务取消（不需要请求）\n"
"uint32 PERC_CANCEL               = 100\n"
"\n"
"uint32 PERC_NODE_CLOSE           = 200\n"
"uint32 PERC_NODE_START           = 201\n"
"uint32 PERC_NODE_RESET           = 202\n"
"\n"
"# 感知类型\n"
"uint32 perc_kind\n"
"# 执行状态：空闲/正在执行/执行完成\n"
"uint8 exe_state\n"
"# 执行结果：无效/成功/失败\n"
"uint8 exe_result\n"
"\n"
"# 错误码\n"
"uint16 err_code\n"
"# 错误消息\n"
"string err_info\n"
"# 剩余执行时间\n"
"uint64 wait_for_millisec\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::perception_msgs::PercState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::PercState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.action_id);
      stream.next(m.perc_kind);
      stream.next(m.exe_state);
      stream.next(m.exe_result);
      stream.next(m.err_code);
      stream.next(m.err_info);
      stream.next(m.wait_for_millisec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PercState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::PercState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::PercState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "action_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.action_id);
    s << indent << "perc_kind: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.perc_kind);
    s << indent << "exe_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exe_state);
    s << indent << "exe_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exe_result);
    s << indent << "err_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.err_code);
    s << indent << "err_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.err_info);
    s << indent << "wait_for_millisec: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.wait_for_millisec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_PERCSTATE_H
