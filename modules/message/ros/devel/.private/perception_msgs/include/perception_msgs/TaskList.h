// Generated by gencpp from file perception_msgs/TaskList.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_TASKLIST_H
#define PERCEPTION_MSGS_MESSAGE_TASKLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct TaskList_
{
  typedef TaskList_<ContainerAllocator> Type;

  TaskList_()
    : task_id(0)
    , task_type(0)
    , target_position()
    , target_object()
    , task_state(0)
    , task_result(0)
    , isInPlaceRotation(0)  {
    }
  TaskList_(const ContainerAllocator& _alloc)
    : task_id(0)
    , task_type(0)
    , target_position(_alloc)
    , target_object(_alloc)
    , task_state(0)
    , task_result(0)
    , isInPlaceRotation(0)  {
  (void)_alloc;
    }



   typedef uint64_t _task_id_type;
  _task_id_type task_id;

   typedef uint32_t _task_type_type;
  _task_type_type task_type;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target_position_type;
  _target_position_type target_position;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_object_type;
  _target_object_type target_object;

   typedef uint8_t _task_state_type;
  _task_state_type task_state;

   typedef uint8_t _task_result_type;
  _task_result_type task_result;

   typedef uint8_t _isInPlaceRotation_type;
  _isInPlaceRotation_type isInPlaceRotation;





  typedef boost::shared_ptr< ::perception_msgs::TaskList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::TaskList_<ContainerAllocator> const> ConstPtr;

}; // struct TaskList_

typedef ::perception_msgs::TaskList_<std::allocator<void> > TaskList;

typedef boost::shared_ptr< ::perception_msgs::TaskList > TaskListPtr;
typedef boost::shared_ptr< ::perception_msgs::TaskList const> TaskListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::TaskList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::TaskList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::TaskList_<ContainerAllocator1> & lhs, const ::perception_msgs::TaskList_<ContainerAllocator2> & rhs)
{
  return lhs.task_id == rhs.task_id &&
    lhs.task_type == rhs.task_type &&
    lhs.target_position == rhs.target_position &&
    lhs.target_object == rhs.target_object &&
    lhs.task_state == rhs.task_state &&
    lhs.task_result == rhs.task_result &&
    lhs.isInPlaceRotation == rhs.isInPlaceRotation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::TaskList_<ContainerAllocator1> & lhs, const ::perception_msgs::TaskList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TaskList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TaskList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TaskList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TaskList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TaskList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TaskList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::TaskList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72dfea7a02287e1a585c8d273011f6e9";
  }

  static const char* value(const ::perception_msgs::TaskList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72dfea7a02287e1aULL;
  static const uint64_t static_value2 = 0x585c8d273011f6e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::TaskList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/TaskList";
  }

  static const char* value(const ::perception_msgs::TaskList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::TaskList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Task Id\n"
"uint64 task_id\n"
"\n"
"# Task Type\n"
"uint32 task_type\n"
"\n"
"# Target Position\n"
"geometry_msgs/Pose target_position\n"
"\n"
"# Target Object\n"
"string target_object\n"
"\n"
"# Task State\n"
"uint8 task_state\n"
"\n"
"# Task Result\n"
"uint8 task_result\n"
"\n"
"# 到达终点是否原地打转\n"
"uint8 isInPlaceRotation \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::perception_msgs::TaskList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::TaskList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.task_type);
      stream.next(m.target_position);
      stream.next(m.target_object);
      stream.next(m.task_state);
      stream.next(m.task_result);
      stream.next(m.isInPlaceRotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::TaskList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::TaskList_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "task_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.task_type);
    s << indent << "target_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target_position);
    s << indent << "target_object: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_object);
    s << indent << "task_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.task_state);
    s << indent << "task_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.task_result);
    s << indent << "isInPlaceRotation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isInPlaceRotation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_TASKLIST_H
