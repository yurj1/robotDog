// Generated by gencpp from file ros_interface/PlanningParkingDebug.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PLANNINGPARKINGDEBUG_H
#define ROS_INTERFACE_MESSAGE_PLANNINGPARKINGDEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Polygon2D.h>
#include <ros_interface/Polygon2D.h>
#include <ros_interface/PathPoint.h>
#include <ros_interface/Point2dList.h>
#include <ros_interface/TrajectoryPoint.h>
#include <ros_interface/TrajectoryPoint.h>
#include <ros_interface/TrajectoryPoint.h>
#include <ros_interface/Trajectory.h>
#include <ros_interface/Trajectory.h>
#include <ros_interface/Trajectory.h>
#include <ros_interface/Trajectory.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct PlanningParkingDebug_
{
  typedef PlanningParkingDebug_<ContainerAllocator> Type;

  PlanningParkingDebug_()
    : vehicle_preiew_polygon()
    , obstacles_polygon()
    , path_points()
    , lat_error(0.0)
    , lon_error(0.0)
    , yaw_error(0.0)
    , obstacles_vec()
    , warm_start_traj()
    , smoothed_traj_stage1()
    , smoothed_traj_stage2()
    , reference_line()
    , trajectory_array()
    , optimal_coarse_trajectory()
    , optimal_smooth_trajectory()
    , hybrid_a_star_map_time(0.0)
    , hybrid_a_star_heuristic_time(0.0)
    , hybrid_a_star_rs_time(0.0)
    , hybrid_a_star_total_time(0.0)
    , ias_collision_avoidance_time(0.0)
    , ias_path_smooth_time(0.0)
    , ias_speed_smooth_time(0.0)
    , ias_total_time(0.0)
    , samping_trajectory_time(0.0)
    , is_replan(false)
    , replan_reason()
    , replan_time(0.0)
    , replan_num(0)
    , optimizer_thread_counter(0)
    , replan_by_context_update_counter(0)
    , replan_by_large_error_counter(0)
    , parking_type(0)
    , moves_counter(0)
    , remain_distance(0.0)
    , distance_to_leader_obj(0.0)
    , state(0)  {
    }
  PlanningParkingDebug_(const ContainerAllocator& _alloc)
    : vehicle_preiew_polygon(_alloc)
    , obstacles_polygon(_alloc)
    , path_points(_alloc)
    , lat_error(0.0)
    , lon_error(0.0)
    , yaw_error(0.0)
    , obstacles_vec(_alloc)
    , warm_start_traj(_alloc)
    , smoothed_traj_stage1(_alloc)
    , smoothed_traj_stage2(_alloc)
    , reference_line(_alloc)
    , trajectory_array(_alloc)
    , optimal_coarse_trajectory(_alloc)
    , optimal_smooth_trajectory(_alloc)
    , hybrid_a_star_map_time(0.0)
    , hybrid_a_star_heuristic_time(0.0)
    , hybrid_a_star_rs_time(0.0)
    , hybrid_a_star_total_time(0.0)
    , ias_collision_avoidance_time(0.0)
    , ias_path_smooth_time(0.0)
    , ias_speed_smooth_time(0.0)
    , ias_total_time(0.0)
    , samping_trajectory_time(0.0)
    , is_replan(false)
    , replan_reason(_alloc)
    , replan_time(0.0)
    , replan_num(0)
    , optimizer_thread_counter(0)
    , replan_by_context_update_counter(0)
    , replan_by_large_error_counter(0)
    , parking_type(0)
    , moves_counter(0)
    , remain_distance(0.0)
    , distance_to_leader_obj(0.0)
    , state(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::ros_interface::Polygon2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Polygon2D_<ContainerAllocator> >> _vehicle_preiew_polygon_type;
  _vehicle_preiew_polygon_type vehicle_preiew_polygon;

   typedef std::vector< ::ros_interface::Polygon2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Polygon2D_<ContainerAllocator> >> _obstacles_polygon_type;
  _obstacles_polygon_type obstacles_polygon;

   typedef std::vector< ::ros_interface::PathPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::PathPoint_<ContainerAllocator> >> _path_points_type;
  _path_points_type path_points;

   typedef double _lat_error_type;
  _lat_error_type lat_error;

   typedef double _lon_error_type;
  _lon_error_type lon_error;

   typedef double _yaw_error_type;
  _yaw_error_type yaw_error;

   typedef std::vector< ::ros_interface::Point2dList_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point2dList_<ContainerAllocator> >> _obstacles_vec_type;
  _obstacles_vec_type obstacles_vec;

   typedef std::vector< ::ros_interface::TrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >> _warm_start_traj_type;
  _warm_start_traj_type warm_start_traj;

   typedef std::vector< ::ros_interface::TrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >> _smoothed_traj_stage1_type;
  _smoothed_traj_stage1_type smoothed_traj_stage1;

   typedef std::vector< ::ros_interface::TrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >> _smoothed_traj_stage2_type;
  _smoothed_traj_stage2_type smoothed_traj_stage2;

   typedef  ::ros_interface::Trajectory_<ContainerAllocator>  _reference_line_type;
  _reference_line_type reference_line;

   typedef std::vector< ::ros_interface::Trajectory_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Trajectory_<ContainerAllocator> >> _trajectory_array_type;
  _trajectory_array_type trajectory_array;

   typedef  ::ros_interface::Trajectory_<ContainerAllocator>  _optimal_coarse_trajectory_type;
  _optimal_coarse_trajectory_type optimal_coarse_trajectory;

   typedef  ::ros_interface::Trajectory_<ContainerAllocator>  _optimal_smooth_trajectory_type;
  _optimal_smooth_trajectory_type optimal_smooth_trajectory;

   typedef double _hybrid_a_star_map_time_type;
  _hybrid_a_star_map_time_type hybrid_a_star_map_time;

   typedef double _hybrid_a_star_heuristic_time_type;
  _hybrid_a_star_heuristic_time_type hybrid_a_star_heuristic_time;

   typedef double _hybrid_a_star_rs_time_type;
  _hybrid_a_star_rs_time_type hybrid_a_star_rs_time;

   typedef double _hybrid_a_star_total_time_type;
  _hybrid_a_star_total_time_type hybrid_a_star_total_time;

   typedef double _ias_collision_avoidance_time_type;
  _ias_collision_avoidance_time_type ias_collision_avoidance_time;

   typedef double _ias_path_smooth_time_type;
  _ias_path_smooth_time_type ias_path_smooth_time;

   typedef double _ias_speed_smooth_time_type;
  _ias_speed_smooth_time_type ias_speed_smooth_time;

   typedef double _ias_total_time_type;
  _ias_total_time_type ias_total_time;

   typedef double _samping_trajectory_time_type;
  _samping_trajectory_time_type samping_trajectory_time;

   typedef uint8_t _is_replan_type;
  _is_replan_type is_replan;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _replan_reason_type;
  _replan_reason_type replan_reason;

   typedef double _replan_time_type;
  _replan_time_type replan_time;

   typedef int32_t _replan_num_type;
  _replan_num_type replan_num;

   typedef int32_t _optimizer_thread_counter_type;
  _optimizer_thread_counter_type optimizer_thread_counter;

   typedef int32_t _replan_by_context_update_counter_type;
  _replan_by_context_update_counter_type replan_by_context_update_counter;

   typedef int32_t _replan_by_large_error_counter_type;
  _replan_by_large_error_counter_type replan_by_large_error_counter;

   typedef int32_t _parking_type_type;
  _parking_type_type parking_type;

   typedef int32_t _moves_counter_type;
  _moves_counter_type moves_counter;

   typedef double _remain_distance_type;
  _remain_distance_type remain_distance;

   typedef double _distance_to_leader_obj_type;
  _distance_to_leader_obj_type distance_to_leader_obj;

   typedef int32_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningParkingDebug_

typedef ::ros_interface::PlanningParkingDebug_<std::allocator<void> > PlanningParkingDebug;

typedef boost::shared_ptr< ::ros_interface::PlanningParkingDebug > PlanningParkingDebugPtr;
typedef boost::shared_ptr< ::ros_interface::PlanningParkingDebug const> PlanningParkingDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::PlanningParkingDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::PlanningParkingDebug_<ContainerAllocator1> & lhs, const ::ros_interface::PlanningParkingDebug_<ContainerAllocator2> & rhs)
{
  return lhs.vehicle_preiew_polygon == rhs.vehicle_preiew_polygon &&
    lhs.obstacles_polygon == rhs.obstacles_polygon &&
    lhs.path_points == rhs.path_points &&
    lhs.lat_error == rhs.lat_error &&
    lhs.lon_error == rhs.lon_error &&
    lhs.yaw_error == rhs.yaw_error &&
    lhs.obstacles_vec == rhs.obstacles_vec &&
    lhs.warm_start_traj == rhs.warm_start_traj &&
    lhs.smoothed_traj_stage1 == rhs.smoothed_traj_stage1 &&
    lhs.smoothed_traj_stage2 == rhs.smoothed_traj_stage2 &&
    lhs.reference_line == rhs.reference_line &&
    lhs.trajectory_array == rhs.trajectory_array &&
    lhs.optimal_coarse_trajectory == rhs.optimal_coarse_trajectory &&
    lhs.optimal_smooth_trajectory == rhs.optimal_smooth_trajectory &&
    lhs.hybrid_a_star_map_time == rhs.hybrid_a_star_map_time &&
    lhs.hybrid_a_star_heuristic_time == rhs.hybrid_a_star_heuristic_time &&
    lhs.hybrid_a_star_rs_time == rhs.hybrid_a_star_rs_time &&
    lhs.hybrid_a_star_total_time == rhs.hybrid_a_star_total_time &&
    lhs.ias_collision_avoidance_time == rhs.ias_collision_avoidance_time &&
    lhs.ias_path_smooth_time == rhs.ias_path_smooth_time &&
    lhs.ias_speed_smooth_time == rhs.ias_speed_smooth_time &&
    lhs.ias_total_time == rhs.ias_total_time &&
    lhs.samping_trajectory_time == rhs.samping_trajectory_time &&
    lhs.is_replan == rhs.is_replan &&
    lhs.replan_reason == rhs.replan_reason &&
    lhs.replan_time == rhs.replan_time &&
    lhs.replan_num == rhs.replan_num &&
    lhs.optimizer_thread_counter == rhs.optimizer_thread_counter &&
    lhs.replan_by_context_update_counter == rhs.replan_by_context_update_counter &&
    lhs.replan_by_large_error_counter == rhs.replan_by_large_error_counter &&
    lhs.parking_type == rhs.parking_type &&
    lhs.moves_counter == rhs.moves_counter &&
    lhs.remain_distance == rhs.remain_distance &&
    lhs.distance_to_leader_obj == rhs.distance_to_leader_obj &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::PlanningParkingDebug_<ContainerAllocator1> & lhs, const ::ros_interface::PlanningParkingDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55d8b9f79fb54b57da40c7c79d428a76";
  }

  static const char* value(const ::ros_interface::PlanningParkingDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55d8b9f79fb54b57ULL;
  static const uint64_t static_value2 = 0xda40c7c79d428a76ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/PlanningParkingDebug";
  }

  static const char* value(const ::ros_interface::PlanningParkingDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Polygon2D[] vehicle_preiew_polygon # 车辆预测多边形\n"
"Polygon2D[] obstacles_polygon # 障碍物多边形\n"
"PathPoint[] path_points # 轨迹点\n"
"float64   lat_error     # 横向误差\n"
"float64   lon_error     # 纵向误差\n"
"float64   yaw_error     # 角度误差(度)\n"
"Point2dList[] obstacles_vec #  \n"
"TrajectoryPoint[] warm_start_traj #  \n"
"TrajectoryPoint[] smoothed_traj_stage1 #  \n"
"TrajectoryPoint[] smoothed_traj_stage2 #  \n"
"Trajectory   reference_line     #  \n"
"Trajectory[] trajectory_array # 轨迹簇\n"
"Trajectory   optimal_coarse_trajectory     #  \n"
"Trajectory   optimal_smooth_trajectory     #  \n"
"float64   hybrid_a_star_map_time     #  \n"
"float64   hybrid_a_star_heuristic_time     #  \n"
"float64   hybrid_a_star_rs_time     #  \n"
"float64   hybrid_a_star_total_time     #  \n"
"float64   ias_collision_avoidance_time     #  \n"
"float64   ias_path_smooth_time     #  \n"
"float64   ias_speed_smooth_time     #  \n"
"float64   ias_total_time     #  \n"
"float64   samping_trajectory_time     #  \n"
"bool   is_replan     #  \n"
"string   replan_reason     #  \n"
"float64   replan_time     #  \n"
"int32   replan_num     #  \n"
"int32   optimizer_thread_counter     #  \n"
"int32   replan_by_context_update_counter     #  \n"
"int32   replan_by_large_error_counter     #  \n"
"int32   parking_type     #  \n"
"int32   moves_counter     # 揉库次数\n"
"float64   remain_distance     # 剩余距离\n"
"float64   distance_to_leader_obj     # 距离最近障碍物距离\n"
"int32   state     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Polygon2D\n"
"int32   coordinate_system     # 坐标系\n"
"Point2D[] points # 二维点集\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point2D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PathPoint\n"
"float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point2dList\n"
"Point2D[] point2d_list #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryPoint\n"
"PathPoint   path_point     # path point\n"
"float64   v     # linear velocity\n"
"float64   a     # linear acceleration\n"
"float64   relative_time     # relative time from beginning of the trajectory\n"
"float64   da     # longitudinal jerk\n"
"bool   is_steer_valid     # 转向是否有效\n"
"float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis\n"
"float64   rear_steer     # 后轮转角\n"
"int32   gear     # 档位\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Trajectory\n"
"string   name     # 轨迹名称\n"
"TrajectoryPoint[] trajectory_points # 轨迹点\n"
;
  }

  static const char* value(const ::ros_interface::PlanningParkingDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicle_preiew_polygon);
      stream.next(m.obstacles_polygon);
      stream.next(m.path_points);
      stream.next(m.lat_error);
      stream.next(m.lon_error);
      stream.next(m.yaw_error);
      stream.next(m.obstacles_vec);
      stream.next(m.warm_start_traj);
      stream.next(m.smoothed_traj_stage1);
      stream.next(m.smoothed_traj_stage2);
      stream.next(m.reference_line);
      stream.next(m.trajectory_array);
      stream.next(m.optimal_coarse_trajectory);
      stream.next(m.optimal_smooth_trajectory);
      stream.next(m.hybrid_a_star_map_time);
      stream.next(m.hybrid_a_star_heuristic_time);
      stream.next(m.hybrid_a_star_rs_time);
      stream.next(m.hybrid_a_star_total_time);
      stream.next(m.ias_collision_avoidance_time);
      stream.next(m.ias_path_smooth_time);
      stream.next(m.ias_speed_smooth_time);
      stream.next(m.ias_total_time);
      stream.next(m.samping_trajectory_time);
      stream.next(m.is_replan);
      stream.next(m.replan_reason);
      stream.next(m.replan_time);
      stream.next(m.replan_num);
      stream.next(m.optimizer_thread_counter);
      stream.next(m.replan_by_context_update_counter);
      stream.next(m.replan_by_large_error_counter);
      stream.next(m.parking_type);
      stream.next(m.moves_counter);
      stream.next(m.remain_distance);
      stream.next(m.distance_to_leader_obj);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningParkingDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::PlanningParkingDebug_<ContainerAllocator>& v)
  {
    s << indent << "vehicle_preiew_polygon[]" << std::endl;
    for (size_t i = 0; i < v.vehicle_preiew_polygon.size(); ++i)
    {
      s << indent << "  vehicle_preiew_polygon[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Polygon2D_<ContainerAllocator> >::stream(s, indent + "    ", v.vehicle_preiew_polygon[i]);
    }
    s << indent << "obstacles_polygon[]" << std::endl;
    for (size_t i = 0; i < v.obstacles_polygon.size(); ++i)
    {
      s << indent << "  obstacles_polygon[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Polygon2D_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles_polygon[i]);
    }
    s << indent << "path_points[]" << std::endl;
    for (size_t i = 0; i < v.path_points.size(); ++i)
    {
      s << indent << "  path_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::PathPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.path_points[i]);
    }
    s << indent << "lat_error: ";
    Printer<double>::stream(s, indent + "  ", v.lat_error);
    s << indent << "lon_error: ";
    Printer<double>::stream(s, indent + "  ", v.lon_error);
    s << indent << "yaw_error: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_error);
    s << indent << "obstacles_vec[]" << std::endl;
    for (size_t i = 0; i < v.obstacles_vec.size(); ++i)
    {
      s << indent << "  obstacles_vec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point2dList_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles_vec[i]);
    }
    s << indent << "warm_start_traj[]" << std::endl;
    for (size_t i = 0; i < v.warm_start_traj.size(); ++i)
    {
      s << indent << "  warm_start_traj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.warm_start_traj[i]);
    }
    s << indent << "smoothed_traj_stage1[]" << std::endl;
    for (size_t i = 0; i < v.smoothed_traj_stage1.size(); ++i)
    {
      s << indent << "  smoothed_traj_stage1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.smoothed_traj_stage1[i]);
    }
    s << indent << "smoothed_traj_stage2[]" << std::endl;
    for (size_t i = 0; i < v.smoothed_traj_stage2.size(); ++i)
    {
      s << indent << "  smoothed_traj_stage2[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.smoothed_traj_stage2[i]);
    }
    s << indent << "reference_line: ";
    s << std::endl;
    Printer< ::ros_interface::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.reference_line);
    s << indent << "trajectory_array[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_array.size(); ++i)
    {
      s << indent << "  trajectory_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Trajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory_array[i]);
    }
    s << indent << "optimal_coarse_trajectory: ";
    s << std::endl;
    Printer< ::ros_interface::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.optimal_coarse_trajectory);
    s << indent << "optimal_smooth_trajectory: ";
    s << std::endl;
    Printer< ::ros_interface::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.optimal_smooth_trajectory);
    s << indent << "hybrid_a_star_map_time: ";
    Printer<double>::stream(s, indent + "  ", v.hybrid_a_star_map_time);
    s << indent << "hybrid_a_star_heuristic_time: ";
    Printer<double>::stream(s, indent + "  ", v.hybrid_a_star_heuristic_time);
    s << indent << "hybrid_a_star_rs_time: ";
    Printer<double>::stream(s, indent + "  ", v.hybrid_a_star_rs_time);
    s << indent << "hybrid_a_star_total_time: ";
    Printer<double>::stream(s, indent + "  ", v.hybrid_a_star_total_time);
    s << indent << "ias_collision_avoidance_time: ";
    Printer<double>::stream(s, indent + "  ", v.ias_collision_avoidance_time);
    s << indent << "ias_path_smooth_time: ";
    Printer<double>::stream(s, indent + "  ", v.ias_path_smooth_time);
    s << indent << "ias_speed_smooth_time: ";
    Printer<double>::stream(s, indent + "  ", v.ias_speed_smooth_time);
    s << indent << "ias_total_time: ";
    Printer<double>::stream(s, indent + "  ", v.ias_total_time);
    s << indent << "samping_trajectory_time: ";
    Printer<double>::stream(s, indent + "  ", v.samping_trajectory_time);
    s << indent << "is_replan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_replan);
    s << indent << "replan_reason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.replan_reason);
    s << indent << "replan_time: ";
    Printer<double>::stream(s, indent + "  ", v.replan_time);
    s << indent << "replan_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.replan_num);
    s << indent << "optimizer_thread_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.optimizer_thread_counter);
    s << indent << "replan_by_context_update_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.replan_by_context_update_counter);
    s << indent << "replan_by_large_error_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.replan_by_large_error_counter);
    s << indent << "parking_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_type);
    s << indent << "moves_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.moves_counter);
    s << indent << "remain_distance: ";
    Printer<double>::stream(s, indent + "  ", v.remain_distance);
    s << indent << "distance_to_leader_obj: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_leader_obj);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PLANNINGPARKINGDEBUG_H
