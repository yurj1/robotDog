// Generated by gencpp from file ros_interface/RouteFusionInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_ROUTEFUSIONINFO_H
#define ROS_INTERFACE_MESSAGE_ROUTEFUSIONINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct RouteFusionInfo_
{
  typedef RouteFusionInfo_<ContainerAllocator> Type;

  RouteFusionInfo_()
    : fusion_flag(0)
    , fusion_reason()  {
    }
  RouteFusionInfo_(const ContainerAllocator& _alloc)
    : fusion_flag(0)
    , fusion_reason(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _fusion_flag_type;
  _fusion_flag_type fusion_flag;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _fusion_reason_type;
  _fusion_reason_type fusion_reason;





  typedef boost::shared_ptr< ::ros_interface::RouteFusionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::RouteFusionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RouteFusionInfo_

typedef ::ros_interface::RouteFusionInfo_<std::allocator<void> > RouteFusionInfo;

typedef boost::shared_ptr< ::ros_interface::RouteFusionInfo > RouteFusionInfoPtr;
typedef boost::shared_ptr< ::ros_interface::RouteFusionInfo const> RouteFusionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::RouteFusionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::RouteFusionInfo_<ContainerAllocator1> & lhs, const ::ros_interface::RouteFusionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.fusion_flag == rhs.fusion_flag &&
    lhs.fusion_reason == rhs.fusion_reason;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::RouteFusionInfo_<ContainerAllocator1> & lhs, const ::ros_interface::RouteFusionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RouteFusionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RouteFusionInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RouteFusionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "272fcd54e54c0a49dcdbc692af0ea8a1";
  }

  static const char* value(const ::ros_interface::RouteFusionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x272fcd54e54c0a49ULL;
  static const uint64_t static_value2 = 0xdcdbc692af0ea8a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/RouteFusionInfo";
  }

  static const char* value(const ::ros_interface::RouteFusionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   fusion_flag     # 是否有效标志位\n"
"string   fusion_reason     # 融合原因\n"
;
  }

  static const char* value(const ::ros_interface::RouteFusionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fusion_flag);
      stream.next(m.fusion_reason);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RouteFusionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::RouteFusionInfo_<ContainerAllocator>& v)
  {
    s << indent << "fusion_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fusion_flag);
    s << indent << "fusion_reason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.fusion_reason);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_ROUTEFUSIONINFO_H
