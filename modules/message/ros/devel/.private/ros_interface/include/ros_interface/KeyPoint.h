// Generated by gencpp from file ros_interface/KeyPoint.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_KEYPOINT_H
#define ROS_INTERFACE_MESSAGE_KEYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct KeyPoint_
{
  typedef KeyPoint_<ContainerAllocator> Type;

  KeyPoint_()
    : id(0)
    , latitude(0.0)
    , longitude(0.0)
    , ele(0.0)
    , heading(0.0)
    , name()  {
    }
  KeyPoint_(const ContainerAllocator& _alloc)
    : id(0)
    , latitude(0.0)
    , longitude(0.0)
    , ele(0.0)
    , heading(0.0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _ele_type;
  _ele_type ele;

   typedef double _heading_type;
  _heading_type heading;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::ros_interface::KeyPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::KeyPoint_<ContainerAllocator> const> ConstPtr;

}; // struct KeyPoint_

typedef ::ros_interface::KeyPoint_<std::allocator<void> > KeyPoint;

typedef boost::shared_ptr< ::ros_interface::KeyPoint > KeyPointPtr;
typedef boost::shared_ptr< ::ros_interface::KeyPoint const> KeyPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::KeyPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::KeyPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::KeyPoint_<ContainerAllocator1> & lhs, const ::ros_interface::KeyPoint_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.ele == rhs.ele &&
    lhs.heading == rhs.heading &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::KeyPoint_<ContainerAllocator1> & lhs, const ::ros_interface::KeyPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::KeyPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::KeyPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::KeyPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::KeyPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::KeyPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::KeyPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::KeyPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a55078b26e8237f7891cb716e70eee44";
  }

  static const char* value(const ::ros_interface::KeyPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa55078b26e8237f7ULL;
  static const uint64_t static_value2 = 0x891cb716e70eee44ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::KeyPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/KeyPoint";
  }

  static const char* value(const ::ros_interface::KeyPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::KeyPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16   id     # 关键点id\n"
"float64   latitude     # 关键点纬度\n"
"float64   longitude     # 关键点经度\n"
"float64   ele     # 关键点海拔\n"
"float64   heading     # 关键点航向角（与北方向夹角，顺时针方向为正，单位为°）\n"
"string   name     # 关键点名称\n"
;
  }

  static const char* value(const ::ros_interface::KeyPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::KeyPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.ele);
      stream.next(m.heading);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::KeyPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::KeyPoint_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "ele: ";
    Printer<double>::stream(s, indent + "  ", v.ele);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_KEYPOINT_H
