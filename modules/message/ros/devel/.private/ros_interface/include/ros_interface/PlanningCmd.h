// Generated by gencpp from file ros_interface/PlanningCmd.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PLANNINGCMD_H
#define ROS_INTERFACE_MESSAGE_PLANNINGCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct PlanningCmd_
{
  typedef PlanningCmd_<ContainerAllocator> Type;

  PlanningCmd_()
    : header()
    , turn_lamp_ctrl(0)
    , high_beam_ctrl(0)
    , low_beam_ctrl(0)
    , horn_ctrl(0)
    , front_wiper_ctrl(0)
    , rear_wiper_ctrl(0)
    , position_lamp_ctrl(0)
    , front_fog_lamp_ctrl(0)
    , rear_fog_lamp_ctrl(0)
    , brake_lamp_ctrl(0)
    , alarm_lamp_ctrl(0)
    , lf_door_ctrl(0)
    , rf_door_ctrl(0)
    , lr_door_ctrl(0)
    , rr_door_ctrl(0)  {
    }
  PlanningCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , turn_lamp_ctrl(0)
    , high_beam_ctrl(0)
    , low_beam_ctrl(0)
    , horn_ctrl(0)
    , front_wiper_ctrl(0)
    , rear_wiper_ctrl(0)
    , position_lamp_ctrl(0)
    , front_fog_lamp_ctrl(0)
    , rear_fog_lamp_ctrl(0)
    , brake_lamp_ctrl(0)
    , alarm_lamp_ctrl(0)
    , lf_door_ctrl(0)
    , rf_door_ctrl(0)
    , lr_door_ctrl(0)
    , rr_door_ctrl(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _turn_lamp_ctrl_type;
  _turn_lamp_ctrl_type turn_lamp_ctrl;

   typedef int32_t _high_beam_ctrl_type;
  _high_beam_ctrl_type high_beam_ctrl;

   typedef int32_t _low_beam_ctrl_type;
  _low_beam_ctrl_type low_beam_ctrl;

   typedef int32_t _horn_ctrl_type;
  _horn_ctrl_type horn_ctrl;

   typedef int32_t _front_wiper_ctrl_type;
  _front_wiper_ctrl_type front_wiper_ctrl;

   typedef int32_t _rear_wiper_ctrl_type;
  _rear_wiper_ctrl_type rear_wiper_ctrl;

   typedef int32_t _position_lamp_ctrl_type;
  _position_lamp_ctrl_type position_lamp_ctrl;

   typedef int32_t _front_fog_lamp_ctrl_type;
  _front_fog_lamp_ctrl_type front_fog_lamp_ctrl;

   typedef int32_t _rear_fog_lamp_ctrl_type;
  _rear_fog_lamp_ctrl_type rear_fog_lamp_ctrl;

   typedef int32_t _brake_lamp_ctrl_type;
  _brake_lamp_ctrl_type brake_lamp_ctrl;

   typedef int32_t _alarm_lamp_ctrl_type;
  _alarm_lamp_ctrl_type alarm_lamp_ctrl;

   typedef int32_t _lf_door_ctrl_type;
  _lf_door_ctrl_type lf_door_ctrl;

   typedef int32_t _rf_door_ctrl_type;
  _rf_door_ctrl_type rf_door_ctrl;

   typedef int32_t _lr_door_ctrl_type;
  _lr_door_ctrl_type lr_door_ctrl;

   typedef int32_t _rr_door_ctrl_type;
  _rr_door_ctrl_type rr_door_ctrl;





  typedef boost::shared_ptr< ::ros_interface::PlanningCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::PlanningCmd_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningCmd_

typedef ::ros_interface::PlanningCmd_<std::allocator<void> > PlanningCmd;

typedef boost::shared_ptr< ::ros_interface::PlanningCmd > PlanningCmdPtr;
typedef boost::shared_ptr< ::ros_interface::PlanningCmd const> PlanningCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::PlanningCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::PlanningCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::PlanningCmd_<ContainerAllocator1> & lhs, const ::ros_interface::PlanningCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.turn_lamp_ctrl == rhs.turn_lamp_ctrl &&
    lhs.high_beam_ctrl == rhs.high_beam_ctrl &&
    lhs.low_beam_ctrl == rhs.low_beam_ctrl &&
    lhs.horn_ctrl == rhs.horn_ctrl &&
    lhs.front_wiper_ctrl == rhs.front_wiper_ctrl &&
    lhs.rear_wiper_ctrl == rhs.rear_wiper_ctrl &&
    lhs.position_lamp_ctrl == rhs.position_lamp_ctrl &&
    lhs.front_fog_lamp_ctrl == rhs.front_fog_lamp_ctrl &&
    lhs.rear_fog_lamp_ctrl == rhs.rear_fog_lamp_ctrl &&
    lhs.brake_lamp_ctrl == rhs.brake_lamp_ctrl &&
    lhs.alarm_lamp_ctrl == rhs.alarm_lamp_ctrl &&
    lhs.lf_door_ctrl == rhs.lf_door_ctrl &&
    lhs.rf_door_ctrl == rhs.rf_door_ctrl &&
    lhs.lr_door_ctrl == rhs.lr_door_ctrl &&
    lhs.rr_door_ctrl == rhs.rr_door_ctrl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::PlanningCmd_<ContainerAllocator1> & lhs, const ::ros_interface::PlanningCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PlanningCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PlanningCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PlanningCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PlanningCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PlanningCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PlanningCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::PlanningCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "988d2e6545b7aed3c7c802e455b6a331";
  }

  static const char* value(const ::ros_interface::PlanningCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x988d2e6545b7aed3ULL;
  static const uint64_t static_value2 = 0xc7c802e455b6a331ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::PlanningCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/PlanningCmd";
  }

  static const char* value(const ::ros_interface::PlanningCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::PlanningCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"int32   turn_lamp_ctrl     # 转向灯 TURN_INACTIVE_SIGNAL:0 TURN_LEFT_SIGNAL:1 TURN_RIGHT_SIGNAL:2 TURN_INVALID_SIGNAL:3\n"
"int32   high_beam_ctrl     # 0 关闭 1 开启 2 不响应\n"
"int32   low_beam_ctrl     # 0 关闭 1 开启 2 不响应\n"
"int32   horn_ctrl     # 0 关闭 1 开启 2 不响应\n"
"int32   front_wiper_ctrl     # 前雨刮器 0 关闭 1 开启\n"
"int32   rear_wiper_ctrl     # 后雨刮器 0 关闭 1 开启\n"
"int32   position_lamp_ctrl     # 位置灯 0 关闭 1 开启\n"
"int32   front_fog_lamp_ctrl     # 前雾灯 0 关闭 1 开启\n"
"int32   rear_fog_lamp_ctrl     # 后雾灯 0 关闭 1 开启\n"
"int32   brake_lamp_ctrl     # 刹车灯 一般情况自动控制 0 关闭 1 开启\n"
"int32   alarm_lamp_ctrl     # 警报灯 双闪 0 关闭 1 开启\n"
"int32   lf_door_ctrl     # 左前门控制 0 关闭 1 开启\n"
"int32   rf_door_ctrl     # 右前门控制 0 关闭 1 开启\n"
"int32   lr_door_ctrl     # 左后门控制 0 关闭 1 开启\n"
"int32   rr_door_ctrl     # 右后门控制 0 关闭 1 开启\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_interface::PlanningCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::PlanningCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.turn_lamp_ctrl);
      stream.next(m.high_beam_ctrl);
      stream.next(m.low_beam_ctrl);
      stream.next(m.horn_ctrl);
      stream.next(m.front_wiper_ctrl);
      stream.next(m.rear_wiper_ctrl);
      stream.next(m.position_lamp_ctrl);
      stream.next(m.front_fog_lamp_ctrl);
      stream.next(m.rear_fog_lamp_ctrl);
      stream.next(m.brake_lamp_ctrl);
      stream.next(m.alarm_lamp_ctrl);
      stream.next(m.lf_door_ctrl);
      stream.next(m.rf_door_ctrl);
      stream.next(m.lr_door_ctrl);
      stream.next(m.rr_door_ctrl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::PlanningCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::PlanningCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "turn_lamp_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turn_lamp_ctrl);
    s << indent << "high_beam_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.high_beam_ctrl);
    s << indent << "low_beam_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.low_beam_ctrl);
    s << indent << "horn_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.horn_ctrl);
    s << indent << "front_wiper_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.front_wiper_ctrl);
    s << indent << "rear_wiper_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rear_wiper_ctrl);
    s << indent << "position_lamp_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position_lamp_ctrl);
    s << indent << "front_fog_lamp_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.front_fog_lamp_ctrl);
    s << indent << "rear_fog_lamp_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rear_fog_lamp_ctrl);
    s << indent << "brake_lamp_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake_lamp_ctrl);
    s << indent << "alarm_lamp_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.alarm_lamp_ctrl);
    s << indent << "lf_door_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lf_door_ctrl);
    s << indent << "rf_door_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rf_door_ctrl);
    s << indent << "lr_door_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lr_door_ctrl);
    s << indent << "rr_door_ctrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rr_door_ctrl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PLANNINGCMD_H
