// Generated by gencpp from file ros_interface/WarningCommand.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_WARNINGCOMMAND_H
#define ROS_INTERFACE_MESSAGE_WARNINGCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct WarningCommand_
{
  typedef WarningCommand_<ContainerAllocator> Type;

  WarningCommand_()
    : sound_alarm(0)
    , light_alarm(0)
    , media_alarm(0)
    , motion_alarm(0)  {
    }
  WarningCommand_(const ContainerAllocator& _alloc)
    : sound_alarm(0)
    , light_alarm(0)
    , media_alarm(0)
    , motion_alarm(0)  {
  (void)_alloc;
    }



   typedef int32_t _sound_alarm_type;
  _sound_alarm_type sound_alarm;

   typedef int32_t _light_alarm_type;
  _light_alarm_type light_alarm;

   typedef int32_t _media_alarm_type;
  _media_alarm_type media_alarm;

   typedef int32_t _motion_alarm_type;
  _motion_alarm_type motion_alarm;





  typedef boost::shared_ptr< ::ros_interface::WarningCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::WarningCommand_<ContainerAllocator> const> ConstPtr;

}; // struct WarningCommand_

typedef ::ros_interface::WarningCommand_<std::allocator<void> > WarningCommand;

typedef boost::shared_ptr< ::ros_interface::WarningCommand > WarningCommandPtr;
typedef boost::shared_ptr< ::ros_interface::WarningCommand const> WarningCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::WarningCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::WarningCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::WarningCommand_<ContainerAllocator1> & lhs, const ::ros_interface::WarningCommand_<ContainerAllocator2> & rhs)
{
  return lhs.sound_alarm == rhs.sound_alarm &&
    lhs.light_alarm == rhs.light_alarm &&
    lhs.media_alarm == rhs.media_alarm &&
    lhs.motion_alarm == rhs.motion_alarm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::WarningCommand_<ContainerAllocator1> & lhs, const ::ros_interface::WarningCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::WarningCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::WarningCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::WarningCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::WarningCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::WarningCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::WarningCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::WarningCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a3d05783924d6451d7d0d7d30d200dd";
  }

  static const char* value(const ::ros_interface::WarningCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a3d05783924d645ULL;
  static const uint64_t static_value2 = 0x1d7d0d7d30d200ddULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::WarningCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/WarningCommand";
  }

  static const char* value(const ::ros_interface::WarningCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::WarningCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   sound_alarm     # 声音告警\n"
"int32   light_alarm     # 车灯告警\n"
"int32   media_alarm     # 媒体告警\n"
"int32   motion_alarm     # 震动告警\n"
;
  }

  static const char* value(const ::ros_interface::WarningCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::WarningCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sound_alarm);
      stream.next(m.light_alarm);
      stream.next(m.media_alarm);
      stream.next(m.motion_alarm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WarningCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::WarningCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::WarningCommand_<ContainerAllocator>& v)
  {
    s << indent << "sound_alarm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sound_alarm);
    s << indent << "light_alarm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.light_alarm);
    s << indent << "media_alarm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.media_alarm);
    s << indent << "motion_alarm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_alarm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_WARNINGCOMMAND_H
