// Generated by gencpp from file ros_interface/ParkingOutInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PARKINGOUTINFO_H
#define ROS_INTERFACE_MESSAGE_PARKINGOUTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct ParkingOutInfo_
{
  typedef ParkingOutInfo_<ContainerAllocator> Type;

  ParkingOutInfo_()
    : header()
    , parking_out_id(0)
    , parking_direction_type(0)
    , is_parking_out_enable(false)
    , parking_out_point()
    , theta(0.0)  {
    }
  ParkingOutInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , parking_out_id(0)
    , parking_direction_type(0)
    , is_parking_out_enable(false)
    , parking_out_point(_alloc)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _parking_out_id_type;
  _parking_out_id_type parking_out_id;

   typedef int32_t _parking_direction_type_type;
  _parking_direction_type_type parking_direction_type;

   typedef uint8_t _is_parking_out_enable_type;
  _is_parking_out_enable_type is_parking_out_enable;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _parking_out_point_type;
  _parking_out_point_type parking_out_point;

   typedef double _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::ros_interface::ParkingOutInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::ParkingOutInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ParkingOutInfo_

typedef ::ros_interface::ParkingOutInfo_<std::allocator<void> > ParkingOutInfo;

typedef boost::shared_ptr< ::ros_interface::ParkingOutInfo > ParkingOutInfoPtr;
typedef boost::shared_ptr< ::ros_interface::ParkingOutInfo const> ParkingOutInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::ParkingOutInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::ParkingOutInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::ParkingOutInfo_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingOutInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.parking_out_id == rhs.parking_out_id &&
    lhs.parking_direction_type == rhs.parking_direction_type &&
    lhs.is_parking_out_enable == rhs.is_parking_out_enable &&
    lhs.parking_out_point == rhs.parking_out_point &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::ParkingOutInfo_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingOutInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingOutInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingOutInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingOutInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingOutInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingOutInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingOutInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::ParkingOutInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e521a1b6fe67f908288575c2442dfdff";
  }

  static const char* value(const ::ros_interface::ParkingOutInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe521a1b6fe67f908ULL;
  static const uint64_t static_value2 = 0x288575c2442dfdffULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::ParkingOutInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/ParkingOutInfo";
  }

  static const char* value(const ::ros_interface::ParkingOutInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::ParkingOutInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # timestamp is included in header\n"
"int32   parking_out_id     # 若车位有id，同停车位id\n"
"int32   parking_direction_type     #  \n"
"bool   is_parking_out_enable     # true可泊出，false不可泊出\n"
"Point3D   parking_out_point     # 世界坐标系下提车点位置\n"
"float64   theta     # 世界坐标系下的夹角（单位rad），提车点与正东方向夹角\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::ParkingOutInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::ParkingOutInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.parking_out_id);
      stream.next(m.parking_direction_type);
      stream.next(m.is_parking_out_enable);
      stream.next(m.parking_out_point);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParkingOutInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::ParkingOutInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::ParkingOutInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "parking_out_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_out_id);
    s << indent << "parking_direction_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_direction_type);
    s << indent << "is_parking_out_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_parking_out_enable);
    s << indent << "parking_out_point: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.parking_out_point);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PARKINGOUTINFO_H
