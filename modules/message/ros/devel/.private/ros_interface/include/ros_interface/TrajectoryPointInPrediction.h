// Generated by gencpp from file ros_interface/TrajectoryPointInPrediction.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_TRAJECTORYPOINTINPREDICTION_H
#define ROS_INTERFACE_MESSAGE_TRAJECTORYPOINTINPREDICTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/PathPoint.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct TrajectoryPointInPrediction_
{
  typedef TrajectoryPointInPrediction_<ContainerAllocator> Type;

  TrajectoryPointInPrediction_()
    : path_point()
    , v(0.0)
    , a(0.0)
    , relative_time(0.0)  {
    }
  TrajectoryPointInPrediction_(const ContainerAllocator& _alloc)
    : path_point(_alloc)
    , v(0.0)
    , a(0.0)
    , relative_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::PathPoint_<ContainerAllocator>  _path_point_type;
  _path_point_type path_point;

   typedef double _v_type;
  _v_type v;

   typedef double _a_type;
  _a_type a;

   typedef double _relative_time_type;
  _relative_time_type relative_time;





  typedef boost::shared_ptr< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPointInPrediction_

typedef ::ros_interface::TrajectoryPointInPrediction_<std::allocator<void> > TrajectoryPointInPrediction;

typedef boost::shared_ptr< ::ros_interface::TrajectoryPointInPrediction > TrajectoryPointInPredictionPtr;
typedef boost::shared_ptr< ::ros_interface::TrajectoryPointInPrediction const> TrajectoryPointInPredictionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator1> & lhs, const ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator2> & rhs)
{
  return lhs.path_point == rhs.path_point &&
    lhs.v == rhs.v &&
    lhs.a == rhs.a &&
    lhs.relative_time == rhs.relative_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator1> & lhs, const ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05fd9f6cc86d21615eadb92a27ce577c";
  }

  static const char* value(const ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05fd9f6cc86d2161ULL;
  static const uint64_t static_value2 = 0x5eadb92a27ce577cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/TrajectoryPointInPrediction";
  }

  static const char* value(const ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PathPoint   path_point     # path point\n"
"float64   v     # linear velocity\n"
"float64   a     # linear acceleration\n"
"float64   relative_time     # relative time from beginning of the trajectory\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PathPoint\n"
"float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
;
  }

  static const char* value(const ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_point);
      stream.next(m.v);
      stream.next(m.a);
      stream.next(m.relative_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPointInPrediction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator>& v)
  {
    s << indent << "path_point: ";
    s << std::endl;
    Printer< ::ros_interface::PathPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.path_point);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "relative_time: ";
    Printer<double>::stream(s, indent + "  ", v.relative_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_TRAJECTORYPOINTINPREDICTION_H
