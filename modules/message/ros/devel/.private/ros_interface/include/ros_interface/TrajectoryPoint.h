// Generated by gencpp from file ros_interface/TrajectoryPoint.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_TRAJECTORYPOINT_H
#define ROS_INTERFACE_MESSAGE_TRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/PathPoint.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct TrajectoryPoint_
{
  typedef TrajectoryPoint_<ContainerAllocator> Type;

  TrajectoryPoint_()
    : path_point()
    , v(0.0)
    , a(0.0)
    , relative_time(0.0)
    , da(0.0)
    , is_steer_valid(false)
    , front_steer(0.0)
    , rear_steer(0.0)
    , gear(0)  {
    }
  TrajectoryPoint_(const ContainerAllocator& _alloc)
    : path_point(_alloc)
    , v(0.0)
    , a(0.0)
    , relative_time(0.0)
    , da(0.0)
    , is_steer_valid(false)
    , front_steer(0.0)
    , rear_steer(0.0)
    , gear(0)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::PathPoint_<ContainerAllocator>  _path_point_type;
  _path_point_type path_point;

   typedef double _v_type;
  _v_type v;

   typedef double _a_type;
  _a_type a;

   typedef double _relative_time_type;
  _relative_time_type relative_time;

   typedef double _da_type;
  _da_type da;

   typedef uint8_t _is_steer_valid_type;
  _is_steer_valid_type is_steer_valid;

   typedef double _front_steer_type;
  _front_steer_type front_steer;

   typedef double _rear_steer_type;
  _rear_steer_type rear_steer;

   typedef int32_t _gear_type;
  _gear_type gear;





  typedef boost::shared_ptr< ::ros_interface::TrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::TrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPoint_

typedef ::ros_interface::TrajectoryPoint_<std::allocator<void> > TrajectoryPoint;

typedef boost::shared_ptr< ::ros_interface::TrajectoryPoint > TrajectoryPointPtr;
typedef boost::shared_ptr< ::ros_interface::TrajectoryPoint const> TrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::TrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::ros_interface::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return lhs.path_point == rhs.path_point &&
    lhs.v == rhs.v &&
    lhs.a == rhs.a &&
    lhs.relative_time == rhs.relative_time &&
    lhs.da == rhs.da &&
    lhs.is_steer_valid == rhs.is_steer_valid &&
    lhs.front_steer == rhs.front_steer &&
    lhs.rear_steer == rhs.rear_steer &&
    lhs.gear == rhs.gear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::ros_interface::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf4c0f33e36ba1646317dfc847d34f16";
  }

  static const char* value(const ::ros_interface::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf4c0f33e36ba164ULL;
  static const uint64_t static_value2 = 0x6317dfc847d34f16ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/TrajectoryPoint";
  }

  static const char* value(const ::ros_interface::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PathPoint   path_point     # path point\n"
"float64   v     # linear velocity\n"
"float64   a     # linear acceleration\n"
"float64   relative_time     # relative time from beginning of the trajectory\n"
"float64   da     # longitudinal jerk\n"
"bool   is_steer_valid     # 转向是否有效\n"
"float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis\n"
"float64   rear_steer     # 后轮转角\n"
"int32   gear     # 档位\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PathPoint\n"
"float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
;
  }

  static const char* value(const ::ros_interface::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_point);
      stream.next(m.v);
      stream.next(m.a);
      stream.next(m.relative_time);
      stream.next(m.da);
      stream.next(m.is_steer_valid);
      stream.next(m.front_steer);
      stream.next(m.rear_steer);
      stream.next(m.gear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::TrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "path_point: ";
    s << std::endl;
    Printer< ::ros_interface::PathPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.path_point);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "relative_time: ";
    Printer<double>::stream(s, indent + "  ", v.relative_time);
    s << indent << "da: ";
    Printer<double>::stream(s, indent + "  ", v.da);
    s << indent << "is_steer_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_steer_valid);
    s << indent << "front_steer: ";
    Printer<double>::stream(s, indent + "  ", v.front_steer);
    s << indent << "rear_steer: ";
    Printer<double>::stream(s, indent + "  ", v.rear_steer);
    s << indent << "gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_TRAJECTORYPOINT_H
