// Generated by gencpp from file ros_interface/RadarState.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_RADARSTATE_H
#define ROS_INTERFACE_MESSAGE_RADARSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/RadarStateError.h>
#include <ros_interface/RadarStateMode.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct RadarState_
{
  typedef RadarState_<ContainerAllocator> Type;

  RadarState_()
    : sensor_id(0)
    , nvm_read_status(0)
    , nvm_write_status(0)
    , radar_state_error()
    , radar_state_mode()
    , max_distance(0)
    , sort_index(0)
    , radar_power(0)
    , ctl_relay(0)
    , output_type(0)
    , send_quality(0)
    , send_extinfo(0)
    , motion_rx_state(0)
    , rcs_threshold(0)
    , connector_direction(0)
    , radar_position(0)
    , hw_error(0)  {
    }
  RadarState_(const ContainerAllocator& _alloc)
    : sensor_id(0)
    , nvm_read_status(0)
    , nvm_write_status(0)
    , radar_state_error(_alloc)
    , radar_state_mode(_alloc)
    , max_distance(0)
    , sort_index(0)
    , radar_power(0)
    , ctl_relay(0)
    , output_type(0)
    , send_quality(0)
    , send_extinfo(0)
    , motion_rx_state(0)
    , rcs_threshold(0)
    , connector_direction(0)
    , radar_position(0)
    , hw_error(0)  {
  (void)_alloc;
    }



   typedef uint8_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef uint8_t _nvm_read_status_type;
  _nvm_read_status_type nvm_read_status;

   typedef uint8_t _nvm_write_status_type;
  _nvm_write_status_type nvm_write_status;

   typedef  ::ros_interface::RadarStateError_<ContainerAllocator>  _radar_state_error_type;
  _radar_state_error_type radar_state_error;

   typedef  ::ros_interface::RadarStateMode_<ContainerAllocator>  _radar_state_mode_type;
  _radar_state_mode_type radar_state_mode;

   typedef uint16_t _max_distance_type;
  _max_distance_type max_distance;

   typedef uint8_t _sort_index_type;
  _sort_index_type sort_index;

   typedef uint8_t _radar_power_type;
  _radar_power_type radar_power;

   typedef uint8_t _ctl_relay_type;
  _ctl_relay_type ctl_relay;

   typedef uint8_t _output_type_type;
  _output_type_type output_type;

   typedef uint8_t _send_quality_type;
  _send_quality_type send_quality;

   typedef uint8_t _send_extinfo_type;
  _send_extinfo_type send_extinfo;

   typedef uint8_t _motion_rx_state_type;
  _motion_rx_state_type motion_rx_state;

   typedef uint8_t _rcs_threshold_type;
  _rcs_threshold_type rcs_threshold;

   typedef uint8_t _connector_direction_type;
  _connector_direction_type connector_direction;

   typedef uint8_t _radar_position_type;
  _radar_position_type radar_position;

   typedef uint8_t _hw_error_type;
  _hw_error_type hw_error;





  typedef boost::shared_ptr< ::ros_interface::RadarState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::RadarState_<ContainerAllocator> const> ConstPtr;

}; // struct RadarState_

typedef ::ros_interface::RadarState_<std::allocator<void> > RadarState;

typedef boost::shared_ptr< ::ros_interface::RadarState > RadarStatePtr;
typedef boost::shared_ptr< ::ros_interface::RadarState const> RadarStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::RadarState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::RadarState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::RadarState_<ContainerAllocator1> & lhs, const ::ros_interface::RadarState_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_id == rhs.sensor_id &&
    lhs.nvm_read_status == rhs.nvm_read_status &&
    lhs.nvm_write_status == rhs.nvm_write_status &&
    lhs.radar_state_error == rhs.radar_state_error &&
    lhs.radar_state_mode == rhs.radar_state_mode &&
    lhs.max_distance == rhs.max_distance &&
    lhs.sort_index == rhs.sort_index &&
    lhs.radar_power == rhs.radar_power &&
    lhs.ctl_relay == rhs.ctl_relay &&
    lhs.output_type == rhs.output_type &&
    lhs.send_quality == rhs.send_quality &&
    lhs.send_extinfo == rhs.send_extinfo &&
    lhs.motion_rx_state == rhs.motion_rx_state &&
    lhs.rcs_threshold == rhs.rcs_threshold &&
    lhs.connector_direction == rhs.connector_direction &&
    lhs.radar_position == rhs.radar_position &&
    lhs.hw_error == rhs.hw_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::RadarState_<ContainerAllocator1> & lhs, const ::ros_interface::RadarState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RadarState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RadarState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RadarState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RadarState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RadarState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RadarState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::RadarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00e0b3643bf386c2d41f0895e61c5428";
  }

  static const char* value(const ::ros_interface::RadarState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00e0b3643bf386c2ULL;
  static const uint64_t static_value2 = 0xd41f0895e61c5428ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::RadarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/RadarState";
  }

  static const char* value(const ::ros_interface::RadarState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::RadarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8   sensor_id     #  \n"
"uint8   nvm_read_status     #  \n"
"uint8   nvm_write_status     #  \n"
"RadarStateError   radar_state_error     #  \n"
"RadarStateMode   radar_state_mode     #  \n"
"uint16   max_distance     #  \n"
"uint8   sort_index     #  \n"
"uint8   radar_power     #  \n"
"uint8   ctl_relay     #  \n"
"uint8   output_type     #  \n"
"uint8   send_quality     #  \n"
"uint8   send_extinfo     #  \n"
"uint8   motion_rx_state     #  \n"
"uint8   rcs_threshold     #  \n"
"uint8   connector_direction     #  \n"
"uint8   radar_position     #  \n"
"uint8   hw_error     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/RadarStateError\n"
"uint8   persistent_error     #  \n"
"uint8   temporary_error     #  \n"
"uint8   interference_error     #  \n"
"uint8   temperature_error     #  \n"
"uint8   voltage_error     #  \n"
"uint8   block_error     #  \n"
"uint8   broadcast_error     #  \n"
"uint8   electric_axis_error     #  \n"
"uint8   config_error     #  \n"
"uint8   calibration_error     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/RadarStateMode\n"
"uint8   can0_work_mode     # can0工作模式\n"
"uint8   can1_work_mode     # can1工作模式\n"
"uint8   dual_can_mode     # 双总线工作模式\n"
"uint8   timming_mode     # 计时模式\n"
"uint8   power_mode     # 电源模式\n"
"uint8   performance_mode     # 效能模式\n"
;
  }

  static const char* value(const ::ros_interface::RadarState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::RadarState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_id);
      stream.next(m.nvm_read_status);
      stream.next(m.nvm_write_status);
      stream.next(m.radar_state_error);
      stream.next(m.radar_state_mode);
      stream.next(m.max_distance);
      stream.next(m.sort_index);
      stream.next(m.radar_power);
      stream.next(m.ctl_relay);
      stream.next(m.output_type);
      stream.next(m.send_quality);
      stream.next(m.send_extinfo);
      stream.next(m.motion_rx_state);
      stream.next(m.rcs_threshold);
      stream.next(m.connector_direction);
      stream.next(m.radar_position);
      stream.next(m.hw_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::RadarState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::RadarState_<ContainerAllocator>& v)
  {
    s << indent << "sensor_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "nvm_read_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nvm_read_status);
    s << indent << "nvm_write_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nvm_write_status);
    s << indent << "radar_state_error: ";
    s << std::endl;
    Printer< ::ros_interface::RadarStateError_<ContainerAllocator> >::stream(s, indent + "  ", v.radar_state_error);
    s << indent << "radar_state_mode: ";
    s << std::endl;
    Printer< ::ros_interface::RadarStateMode_<ContainerAllocator> >::stream(s, indent + "  ", v.radar_state_mode);
    s << indent << "max_distance: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.max_distance);
    s << indent << "sort_index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sort_index);
    s << indent << "radar_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.radar_power);
    s << indent << "ctl_relay: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctl_relay);
    s << indent << "output_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.output_type);
    s << indent << "send_quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.send_quality);
    s << indent << "send_extinfo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.send_extinfo);
    s << indent << "motion_rx_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion_rx_state);
    s << indent << "rcs_threshold: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rcs_threshold);
    s << indent << "connector_direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connector_direction);
    s << indent << "radar_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.radar_position);
    s << indent << "hw_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hw_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_RADARSTATE_H
