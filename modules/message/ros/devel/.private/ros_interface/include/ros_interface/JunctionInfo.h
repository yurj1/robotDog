// Generated by gencpp from file ros_interface/JunctionInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_JUNCTIONINFO_H
#define ROS_INTERFACE_MESSAGE_JUNCTIONINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct JunctionInfo_
{
  typedef JunctionInfo_<ContainerAllocator> Type;

  JunctionInfo_()
    : id(0)
    , light_flag(0)
    , light_color(0)
    , light_remain_time(0.0)
    , distance_to_stop(0.0)
    , direction_flag(0)
    , direction(0)
    , distance_to_junction(0.0)
    , stop_line()  {
    }
  JunctionInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , light_flag(0)
    , light_color(0)
    , light_remain_time(0.0)
    , distance_to_stop(0.0)
    , direction_flag(0)
    , direction(0)
    , distance_to_junction(0.0)
    , stop_line(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _light_flag_type;
  _light_flag_type light_flag;

   typedef int32_t _light_color_type;
  _light_color_type light_color;

   typedef double _light_remain_time_type;
  _light_remain_time_type light_remain_time;

   typedef double _distance_to_stop_type;
  _distance_to_stop_type distance_to_stop;

   typedef int32_t _direction_flag_type;
  _direction_flag_type direction_flag;

   typedef int32_t _direction_type;
  _direction_type direction;

   typedef double _distance_to_junction_type;
  _distance_to_junction_type distance_to_junction;

   typedef std::vector< ::ros_interface::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point3D_<ContainerAllocator> >> _stop_line_type;
  _stop_line_type stop_line;





  typedef boost::shared_ptr< ::ros_interface::JunctionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::JunctionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct JunctionInfo_

typedef ::ros_interface::JunctionInfo_<std::allocator<void> > JunctionInfo;

typedef boost::shared_ptr< ::ros_interface::JunctionInfo > JunctionInfoPtr;
typedef boost::shared_ptr< ::ros_interface::JunctionInfo const> JunctionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::JunctionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::JunctionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::JunctionInfo_<ContainerAllocator1> & lhs, const ::ros_interface::JunctionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.light_flag == rhs.light_flag &&
    lhs.light_color == rhs.light_color &&
    lhs.light_remain_time == rhs.light_remain_time &&
    lhs.distance_to_stop == rhs.distance_to_stop &&
    lhs.direction_flag == rhs.direction_flag &&
    lhs.direction == rhs.direction &&
    lhs.distance_to_junction == rhs.distance_to_junction &&
    lhs.stop_line == rhs.stop_line;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::JunctionInfo_<ContainerAllocator1> & lhs, const ::ros_interface::JunctionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::JunctionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::JunctionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::JunctionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::JunctionInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::JunctionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::JunctionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::JunctionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c76d6c87c12f4cd2c105a4a2286da681";
  }

  static const char* value(const ::ros_interface::JunctionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc76d6c87c12f4cd2ULL;
  static const uint64_t static_value2 = 0xc105a4a2286da681ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::JunctionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/JunctionInfo";
  }

  static const char* value(const ::ros_interface::JunctionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::JunctionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   id     #  \n"
"int32   light_flag     # 是否有效，无效就可能是清除了，或者已经过路口了\n"
"int32   light_color     # 信号灯颜色，绿灯可通行，false红灯不能通行\n"
"float64   light_remain_time     # 信号灯剩余时间\n"
"float64   distance_to_stop     # 停车距离，停止线\n"
"int32   direction_flag     # 是否有效，无效就可能是清除了，或者已经过路口了\n"
"int32   direction     # 路口通行方向，0：无效、1：左、2：前、3：右\n"
"float64   distance_to_junction     # 距路口距离\n"
"Point3D[] stop_line # 路口停止线\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::JunctionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::JunctionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.light_flag);
      stream.next(m.light_color);
      stream.next(m.light_remain_time);
      stream.next(m.distance_to_stop);
      stream.next(m.direction_flag);
      stream.next(m.direction);
      stream.next(m.distance_to_junction);
      stream.next(m.stop_line);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JunctionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::JunctionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::JunctionInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "light_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.light_flag);
    s << indent << "light_color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.light_color);
    s << indent << "light_remain_time: ";
    Printer<double>::stream(s, indent + "  ", v.light_remain_time);
    s << indent << "distance_to_stop: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_stop);
    s << indent << "direction_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direction_flag);
    s << indent << "direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direction);
    s << indent << "distance_to_junction: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_junction);
    s << indent << "stop_line[]" << std::endl;
    for (size_t i = 0; i < v.stop_line.size(); ++i)
    {
      s << indent << "  stop_line[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.stop_line[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_JUNCTIONINFO_H
