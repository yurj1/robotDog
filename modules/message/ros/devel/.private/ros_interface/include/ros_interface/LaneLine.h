// Generated by gencpp from file ros_interface/LaneLine.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_LANELINE_H
#define ROS_INTERFACE_MESSAGE_LANELINE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/LaneLineCubicCurve.h>
#include <ros_interface/LaneLineCubicCurve.h>
#include <ros_interface/LaneLineCubicCurve.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/EndPoints.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Time.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct LaneLine_
{
  typedef LaneLine_<ContainerAllocator> Type;

  LaneLine_()
    : lane_type(0)
    , lane_color(0)
    , pos_type(0)
    , curve_vehicle()
    , curve_image()
    , curve_abs()
    , pts_vehicle()
    , pts_image()
    , pts_abs()
    , image_end_point()
    , pts_key()
    , hd_lane_id(0)
    , confidence(0.0)
    , lane_quality(0)
    , fused_lane_type(0)
    , homography_mat()
    , homography_mat_inv()
    , lane_coordinate_type(0)
    , use_type(0)
    , create_time()  {
    }
  LaneLine_(const ContainerAllocator& _alloc)
    : lane_type(0)
    , lane_color(0)
    , pos_type(0)
    , curve_vehicle(_alloc)
    , curve_image(_alloc)
    , curve_abs(_alloc)
    , pts_vehicle(_alloc)
    , pts_image(_alloc)
    , pts_abs(_alloc)
    , image_end_point(_alloc)
    , pts_key(_alloc)
    , hd_lane_id(0)
    , confidence(0.0)
    , lane_quality(0)
    , fused_lane_type(0)
    , homography_mat(_alloc)
    , homography_mat_inv(_alloc)
    , lane_coordinate_type(0)
    , use_type(0)
    , create_time(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _lane_type_type;
  _lane_type_type lane_type;

   typedef int32_t _lane_color_type;
  _lane_color_type lane_color;

   typedef int32_t _pos_type_type;
  _pos_type_type pos_type;

   typedef  ::ros_interface::LaneLineCubicCurve_<ContainerAllocator>  _curve_vehicle_type;
  _curve_vehicle_type curve_vehicle;

   typedef  ::ros_interface::LaneLineCubicCurve_<ContainerAllocator>  _curve_image_type;
  _curve_image_type curve_image;

   typedef  ::ros_interface::LaneLineCubicCurve_<ContainerAllocator>  _curve_abs_type;
  _curve_abs_type curve_abs;

   typedef std::vector< ::ros_interface::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point3D_<ContainerAllocator> >> _pts_vehicle_type;
  _pts_vehicle_type pts_vehicle;

   typedef std::vector< ::ros_interface::Point2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point2D_<ContainerAllocator> >> _pts_image_type;
  _pts_image_type pts_image;

   typedef std::vector< ::ros_interface::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point3D_<ContainerAllocator> >> _pts_abs_type;
  _pts_abs_type pts_abs;

   typedef  ::ros_interface::EndPoints_<ContainerAllocator>  _image_end_point_type;
  _image_end_point_type image_end_point;

   typedef std::vector< ::ros_interface::Point2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point2D_<ContainerAllocator> >> _pts_key_type;
  _pts_key_type pts_key;

   typedef uint8_t _hd_lane_id_type;
  _hd_lane_id_type hd_lane_id;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef int32_t _lane_quality_type;
  _lane_quality_type lane_quality;

   typedef int32_t _fused_lane_type_type;
  _fused_lane_type_type fused_lane_type;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _homography_mat_type;
  _homography_mat_type homography_mat;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _homography_mat_inv_type;
  _homography_mat_inv_type homography_mat_inv;

   typedef int32_t _lane_coordinate_type_type;
  _lane_coordinate_type_type lane_coordinate_type;

   typedef int32_t _use_type_type;
  _use_type_type use_type;

   typedef  ::ros_interface::Time_<ContainerAllocator>  _create_time_type;
  _create_time_type create_time;





  typedef boost::shared_ptr< ::ros_interface::LaneLine_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::LaneLine_<ContainerAllocator> const> ConstPtr;

}; // struct LaneLine_

typedef ::ros_interface::LaneLine_<std::allocator<void> > LaneLine;

typedef boost::shared_ptr< ::ros_interface::LaneLine > LaneLinePtr;
typedef boost::shared_ptr< ::ros_interface::LaneLine const> LaneLineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::LaneLine_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::LaneLine_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::LaneLine_<ContainerAllocator1> & lhs, const ::ros_interface::LaneLine_<ContainerAllocator2> & rhs)
{
  return lhs.lane_type == rhs.lane_type &&
    lhs.lane_color == rhs.lane_color &&
    lhs.pos_type == rhs.pos_type &&
    lhs.curve_vehicle == rhs.curve_vehicle &&
    lhs.curve_image == rhs.curve_image &&
    lhs.curve_abs == rhs.curve_abs &&
    lhs.pts_vehicle == rhs.pts_vehicle &&
    lhs.pts_image == rhs.pts_image &&
    lhs.pts_abs == rhs.pts_abs &&
    lhs.image_end_point == rhs.image_end_point &&
    lhs.pts_key == rhs.pts_key &&
    lhs.hd_lane_id == rhs.hd_lane_id &&
    lhs.confidence == rhs.confidence &&
    lhs.lane_quality == rhs.lane_quality &&
    lhs.fused_lane_type == rhs.fused_lane_type &&
    lhs.homography_mat == rhs.homography_mat &&
    lhs.homography_mat_inv == rhs.homography_mat_inv &&
    lhs.lane_coordinate_type == rhs.lane_coordinate_type &&
    lhs.use_type == rhs.use_type &&
    lhs.create_time == rhs.create_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::LaneLine_<ContainerAllocator1> & lhs, const ::ros_interface::LaneLine_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LaneLine_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LaneLine_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LaneLine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LaneLine_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LaneLine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LaneLine_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::LaneLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7984d3674f6a82d78f7d9d8a60ded1b8";
  }

  static const char* value(const ::ros_interface::LaneLine_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7984d3674f6a82d7ULL;
  static const uint64_t static_value2 = 0x8f7d9d8a60ded1b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::LaneLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/LaneLine";
  }

  static const char* value(const ::ros_interface::LaneLine_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::LaneLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   lane_type     #  车道线类型：   SOLID = 0;   DASHED = 1;   ROAD_DELIMITER = 2;   NONE = 3;   UNKNOWN = 4;\n"
"int32   lane_color     #  车道线颜色：   WHITE = 0;   YELLOW = 1;   OTHERS = 2;   UNKNOWN = 3;\n"
"int32   pos_type     # 车道线位置类别：    BOLLARD_LEFT = -5;   FOURTH_LEFT = -4;   THIRD_LEFT = -3;   ADJACENT_LEFT = -2;  //!< lane marking on the left side next to ego lane   EGO_LEFT = -1;       //!< left lane marking of the ego lane   EGO_RIGHT = 1;       //!< right lane marking of the ego lane   ADJACENT_RIGHT = 2;  //!< lane marking on the right side next to ego lane   THIRD_RIGHT = 3;   FOURTH_RIGHT = 4;   BOLLARD_RIGHT = 5;   OTHER = 6;    //!< other types of lane   UNKNOWN = 7;  //!< background\n"
"LaneLineCubicCurve   curve_vehicle     # 车辆坐标系车道线三次曲线系数\n"
"LaneLineCubicCurve   curve_image     # 图像坐标系车道线三次曲线系数\n"
"LaneLineCubicCurve   curve_abs     # 世界坐标系车道线三次曲线系数\n"
"Point3D[] pts_vehicle # 车辆坐标系车道线点集\n"
"Point2D[] pts_image # 图像坐标系车道线点集\n"
"Point3D[] pts_abs # 世界坐标系车道线点集\n"
"EndPoints   image_end_point     # 车道线上顶点与下顶点\n"
"Point2D[] pts_key # 车道线关键点数组\n"
"uint8   hd_lane_id     # 高精车道线id\n"
"float64   confidence     # 车道线置信度\n"
"int32   lane_quality     #   车道线质量：   VERY_LOW = 0;   LOW = 1;   HIGH = 2;   VERY_HIGH = 3;\n"
"int32   fused_lane_type     #   融合车道线类别：   CAMERA = 0;   HD = 1;   FUSED = 2;   UNKNOWN = 3;   if value is 1, lane_quality = 3\n"
"float64[] homography_mat # 透视变换矩阵\n"
"float64[] homography_mat_inv # 透视变换逆矩阵\n"
"int32   lane_coordinate_type     #   坐标系类别：   FRAME = 0;   IMAGE = 1;   CAMERA = 2;   VEHICLE = 3;   ABSOLUTE = 4;\n"
"int32   use_type     #   使用类别：   REAL = 0;   VIRTUAL = 1;\n"
"Time   create_time     # 车道线被识别的时间戳\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/LaneLineCubicCurve\n"
"float64   start_x     # 车道线起始位置\n"
"float64   end_x     # 车道线结束位置\n"
"float64   a     # 三次曲线系数\n"
"float64   b     #  \n"
"float64   c     #  \n"
"float64   d     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point2D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/EndPoints\n"
"Point2D   start     # 车道线上顶点\n"
"Point2D   end     # 车道线下顶点\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Time\n"
"uint32   sec     # 秒\n"
"uint32   nsec     # 纳秒\n"
;
  }

  static const char* value(const ::ros_interface::LaneLine_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::LaneLine_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_type);
      stream.next(m.lane_color);
      stream.next(m.pos_type);
      stream.next(m.curve_vehicle);
      stream.next(m.curve_image);
      stream.next(m.curve_abs);
      stream.next(m.pts_vehicle);
      stream.next(m.pts_image);
      stream.next(m.pts_abs);
      stream.next(m.image_end_point);
      stream.next(m.pts_key);
      stream.next(m.hd_lane_id);
      stream.next(m.confidence);
      stream.next(m.lane_quality);
      stream.next(m.fused_lane_type);
      stream.next(m.homography_mat);
      stream.next(m.homography_mat_inv);
      stream.next(m.lane_coordinate_type);
      stream.next(m.use_type);
      stream.next(m.create_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneLine_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::LaneLine_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::LaneLine_<ContainerAllocator>& v)
  {
    s << indent << "lane_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_type);
    s << indent << "lane_color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_color);
    s << indent << "pos_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pos_type);
    s << indent << "curve_vehicle: ";
    s << std::endl;
    Printer< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >::stream(s, indent + "  ", v.curve_vehicle);
    s << indent << "curve_image: ";
    s << std::endl;
    Printer< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >::stream(s, indent + "  ", v.curve_image);
    s << indent << "curve_abs: ";
    s << std::endl;
    Printer< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >::stream(s, indent + "  ", v.curve_abs);
    s << indent << "pts_vehicle[]" << std::endl;
    for (size_t i = 0; i < v.pts_vehicle.size(); ++i)
    {
      s << indent << "  pts_vehicle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.pts_vehicle[i]);
    }
    s << indent << "pts_image[]" << std::endl;
    for (size_t i = 0; i < v.pts_image.size(); ++i)
    {
      s << indent << "  pts_image[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "    ", v.pts_image[i]);
    }
    s << indent << "pts_abs[]" << std::endl;
    for (size_t i = 0; i < v.pts_abs.size(); ++i)
    {
      s << indent << "  pts_abs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.pts_abs[i]);
    }
    s << indent << "image_end_point: ";
    s << std::endl;
    Printer< ::ros_interface::EndPoints_<ContainerAllocator> >::stream(s, indent + "  ", v.image_end_point);
    s << indent << "pts_key[]" << std::endl;
    for (size_t i = 0; i < v.pts_key.size(); ++i)
    {
      s << indent << "  pts_key[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "    ", v.pts_key[i]);
    }
    s << indent << "hd_lane_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hd_lane_id);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "lane_quality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_quality);
    s << indent << "fused_lane_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fused_lane_type);
    s << indent << "homography_mat[]" << std::endl;
    for (size_t i = 0; i < v.homography_mat.size(); ++i)
    {
      s << indent << "  homography_mat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.homography_mat[i]);
    }
    s << indent << "homography_mat_inv[]" << std::endl;
    for (size_t i = 0; i < v.homography_mat_inv.size(); ++i)
    {
      s << indent << "  homography_mat_inv[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.homography_mat_inv[i]);
    }
    s << indent << "lane_coordinate_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_coordinate_type);
    s << indent << "use_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.use_type);
    s << indent << "create_time: ";
    s << std::endl;
    Printer< ::ros_interface::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.create_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_LANELINE_H
