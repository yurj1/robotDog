// Generated by gencpp from file ros_interface/RSSInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_RSSINFO_H
#define ROS_INTERFACE_MESSAGE_RSSINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct RSSInfo_
{
  typedef RSSInfo_<ContainerAllocator> Type;

  RSSInfo_()
    : is_rss_safe(false)
    , cur_dist_lon(0.0)
    , rss_safe_dist_lon(0.0)
    , acc_lon_range_minimum(0.0)
    , acc_lon_range_maximum(0.0)
    , acc_lat_left_range_minimum(0.0)
    , acc_lat_left_range_maximum(0.0)
    , acc_lat_right_range_minimum(0.0)
    , acc_lat_right_range_maximum(0.0)  {
    }
  RSSInfo_(const ContainerAllocator& _alloc)
    : is_rss_safe(false)
    , cur_dist_lon(0.0)
    , rss_safe_dist_lon(0.0)
    , acc_lon_range_minimum(0.0)
    , acc_lon_range_maximum(0.0)
    , acc_lat_left_range_minimum(0.0)
    , acc_lat_left_range_maximum(0.0)
    , acc_lat_right_range_minimum(0.0)
    , acc_lat_right_range_maximum(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _is_rss_safe_type;
  _is_rss_safe_type is_rss_safe;

   typedef double _cur_dist_lon_type;
  _cur_dist_lon_type cur_dist_lon;

   typedef double _rss_safe_dist_lon_type;
  _rss_safe_dist_lon_type rss_safe_dist_lon;

   typedef double _acc_lon_range_minimum_type;
  _acc_lon_range_minimum_type acc_lon_range_minimum;

   typedef double _acc_lon_range_maximum_type;
  _acc_lon_range_maximum_type acc_lon_range_maximum;

   typedef double _acc_lat_left_range_minimum_type;
  _acc_lat_left_range_minimum_type acc_lat_left_range_minimum;

   typedef double _acc_lat_left_range_maximum_type;
  _acc_lat_left_range_maximum_type acc_lat_left_range_maximum;

   typedef double _acc_lat_right_range_minimum_type;
  _acc_lat_right_range_minimum_type acc_lat_right_range_minimum;

   typedef double _acc_lat_right_range_maximum_type;
  _acc_lat_right_range_maximum_type acc_lat_right_range_maximum;





  typedef boost::shared_ptr< ::ros_interface::RSSInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::RSSInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RSSInfo_

typedef ::ros_interface::RSSInfo_<std::allocator<void> > RSSInfo;

typedef boost::shared_ptr< ::ros_interface::RSSInfo > RSSInfoPtr;
typedef boost::shared_ptr< ::ros_interface::RSSInfo const> RSSInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::RSSInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::RSSInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::RSSInfo_<ContainerAllocator1> & lhs, const ::ros_interface::RSSInfo_<ContainerAllocator2> & rhs)
{
  return lhs.is_rss_safe == rhs.is_rss_safe &&
    lhs.cur_dist_lon == rhs.cur_dist_lon &&
    lhs.rss_safe_dist_lon == rhs.rss_safe_dist_lon &&
    lhs.acc_lon_range_minimum == rhs.acc_lon_range_minimum &&
    lhs.acc_lon_range_maximum == rhs.acc_lon_range_maximum &&
    lhs.acc_lat_left_range_minimum == rhs.acc_lat_left_range_minimum &&
    lhs.acc_lat_left_range_maximum == rhs.acc_lat_left_range_maximum &&
    lhs.acc_lat_right_range_minimum == rhs.acc_lat_right_range_minimum &&
    lhs.acc_lat_right_range_maximum == rhs.acc_lat_right_range_maximum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::RSSInfo_<ContainerAllocator1> & lhs, const ::ros_interface::RSSInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RSSInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RSSInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RSSInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RSSInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RSSInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RSSInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::RSSInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4490533d712ba2082a34d1533267ea6";
  }

  static const char* value(const ::ros_interface::RSSInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4490533d712ba20ULL;
  static const uint64_t static_value2 = 0x82a34d1533267ea6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::RSSInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/RSSInfo";
  }

  static const char* value(const ::ros_interface::RSSInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::RSSInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool   is_rss_safe     #  \n"
"float64   cur_dist_lon     # current longitudinal distance\n"
"float64   rss_safe_dist_lon     # longitudinal safe distance of rss\n"
"float64   acc_lon_range_minimum     # Minimum range of longitudinal acceleration\n"
"float64   acc_lon_range_maximum     # Maximum range of longitudinal acceleration\n"
"float64   acc_lat_left_range_minimum     # Minimum left range of lateral acceleration\n"
"float64   acc_lat_left_range_maximum     # Maximum left range of lateral acceleration\n"
"float64   acc_lat_right_range_minimum     # Minimum right range of lateral acceleration\n"
"float64   acc_lat_right_range_maximum     # Maximum right range of lateral acceleration\n"
;
  }

  static const char* value(const ::ros_interface::RSSInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::RSSInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_rss_safe);
      stream.next(m.cur_dist_lon);
      stream.next(m.rss_safe_dist_lon);
      stream.next(m.acc_lon_range_minimum);
      stream.next(m.acc_lon_range_maximum);
      stream.next(m.acc_lat_left_range_minimum);
      stream.next(m.acc_lat_left_range_maximum);
      stream.next(m.acc_lat_right_range_minimum);
      stream.next(m.acc_lat_right_range_maximum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RSSInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::RSSInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::RSSInfo_<ContainerAllocator>& v)
  {
    s << indent << "is_rss_safe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_rss_safe);
    s << indent << "cur_dist_lon: ";
    Printer<double>::stream(s, indent + "  ", v.cur_dist_lon);
    s << indent << "rss_safe_dist_lon: ";
    Printer<double>::stream(s, indent + "  ", v.rss_safe_dist_lon);
    s << indent << "acc_lon_range_minimum: ";
    Printer<double>::stream(s, indent + "  ", v.acc_lon_range_minimum);
    s << indent << "acc_lon_range_maximum: ";
    Printer<double>::stream(s, indent + "  ", v.acc_lon_range_maximum);
    s << indent << "acc_lat_left_range_minimum: ";
    Printer<double>::stream(s, indent + "  ", v.acc_lat_left_range_minimum);
    s << indent << "acc_lat_left_range_maximum: ";
    Printer<double>::stream(s, indent + "  ", v.acc_lat_left_range_maximum);
    s << indent << "acc_lat_right_range_minimum: ";
    Printer<double>::stream(s, indent + "  ", v.acc_lat_right_range_minimum);
    s << indent << "acc_lat_right_range_maximum: ";
    Printer<double>::stream(s, indent + "  ", v.acc_lat_right_range_maximum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_RSSINFO_H
