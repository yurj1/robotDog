// Generated by gencpp from file ros_interface/ADCTrajectory.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_ADCTRAJECTORY_H
#define ROS_INTERFACE_MESSAGE_ADCTRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/TrajectoryPoint.h>
#include <ros_interface/EStop.h>
#include <ros_interface/RSSInfo.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct ADCTrajectory_
{
  typedef ADCTrajectory_<ContainerAllocator> Type;

  ADCTrajectory_()
    : header()
    , total_path_length(0.0)
    , total_path_time(0.0)
    , trajectory_points()
    , car_action(0)
    , behaviour_lat_state(0)
    , behaviour_lon_state(0)
    , scenario(0)
    , driving_mode(0)
    , adc_trajectory_type(0)
    , estop()
    , is_replan(false)
    , replan_reason()
    , right_of_way_status(0)
    , rss_info()  {
    }
  ADCTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , total_path_length(0.0)
    , total_path_time(0.0)
    , trajectory_points(_alloc)
    , car_action(0)
    , behaviour_lat_state(0)
    , behaviour_lon_state(0)
    , scenario(0)
    , driving_mode(0)
    , adc_trajectory_type(0)
    , estop(_alloc)
    , is_replan(false)
    , replan_reason(_alloc)
    , right_of_way_status(0)
    , rss_info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _total_path_length_type;
  _total_path_length_type total_path_length;

   typedef double _total_path_time_type;
  _total_path_time_type total_path_time;

   typedef std::vector< ::ros_interface::TrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >> _trajectory_points_type;
  _trajectory_points_type trajectory_points;

   typedef int32_t _car_action_type;
  _car_action_type car_action;

   typedef int32_t _behaviour_lat_state_type;
  _behaviour_lat_state_type behaviour_lat_state;

   typedef int32_t _behaviour_lon_state_type;
  _behaviour_lon_state_type behaviour_lon_state;

   typedef int32_t _scenario_type;
  _scenario_type scenario;

   typedef int32_t _driving_mode_type;
  _driving_mode_type driving_mode;

   typedef int32_t _adc_trajectory_type_type;
  _adc_trajectory_type_type adc_trajectory_type;

   typedef  ::ros_interface::EStop_<ContainerAllocator>  _estop_type;
  _estop_type estop;

   typedef uint8_t _is_replan_type;
  _is_replan_type is_replan;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _replan_reason_type;
  _replan_reason_type replan_reason;

   typedef int32_t _right_of_way_status_type;
  _right_of_way_status_type right_of_way_status;

   typedef  ::ros_interface::RSSInfo_<ContainerAllocator>  _rss_info_type;
  _rss_info_type rss_info;





  typedef boost::shared_ptr< ::ros_interface::ADCTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::ADCTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct ADCTrajectory_

typedef ::ros_interface::ADCTrajectory_<std::allocator<void> > ADCTrajectory;

typedef boost::shared_ptr< ::ros_interface::ADCTrajectory > ADCTrajectoryPtr;
typedef boost::shared_ptr< ::ros_interface::ADCTrajectory const> ADCTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::ADCTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::ADCTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::ADCTrajectory_<ContainerAllocator1> & lhs, const ::ros_interface::ADCTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.total_path_length == rhs.total_path_length &&
    lhs.total_path_time == rhs.total_path_time &&
    lhs.trajectory_points == rhs.trajectory_points &&
    lhs.car_action == rhs.car_action &&
    lhs.behaviour_lat_state == rhs.behaviour_lat_state &&
    lhs.behaviour_lon_state == rhs.behaviour_lon_state &&
    lhs.scenario == rhs.scenario &&
    lhs.driving_mode == rhs.driving_mode &&
    lhs.adc_trajectory_type == rhs.adc_trajectory_type &&
    lhs.estop == rhs.estop &&
    lhs.is_replan == rhs.is_replan &&
    lhs.replan_reason == rhs.replan_reason &&
    lhs.right_of_way_status == rhs.right_of_way_status &&
    lhs.rss_info == rhs.rss_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::ADCTrajectory_<ContainerAllocator1> & lhs, const ::ros_interface::ADCTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ADCTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ADCTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ADCTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ADCTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ADCTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ADCTrajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9f458508166ede977b350e04581bce4";
  }

  static const char* value(const ::ros_interface::ADCTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9f458508166ede9ULL;
  static const uint64_t static_value2 = 0x77b350e04581bce4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/ADCTrajectory";
  }

  static const char* value(const ::ros_interface::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # timestamp is included in header\n"
"float64   total_path_length     # unit meters(m)\n"
"float64   total_path_time     # unit seconds(s)\n"
"TrajectoryPoint[] trajectory_points # 规划轨迹点列\n"
"int32   car_action     # 车辆行为： CAR_ACTION_NONE=0  //无效值 CAR_ACTION_SINGLE=1 //单车 CAR_ACTION_PLATOON_HEAD=2 //车队头车 CAR_ACTION_PLATOON_OTHER=3 //车队其他车辆\n"
"int32   behaviour_lat_state     # 自动驾驶状态（主要指横向状态）\n"
"int32   behaviour_lon_state     # 自动驾驶状态（主要指纵向状态）\n"
"int32   scenario     # 驾驶场景 0-UNKNOWN, 1-CRUISE, 2-CRUISE_URBAN 3-CRUISE_HIGHWAY, 2000-JUNCTION  2001-JUNCTION_TRAFFIC_LIGHT 2002-JUNCTION_STOP_SIGN\n"
"int32   driving_mode     # 驾驶模式： 1：人工驾驶， 2：辅助驾驶， 3：自动驾驶\n"
"int32   adc_trajectory_type     # 轨迹类型： TRAJECTORY_TYPE_ABSOLUTE=0 //绝对规划轨迹 TRAJECTORY_TYPE_RELATIVE=1 //相对规划轨迹 TRAJECTORY_TYPE_INVALID=2 //无效规划轨迹\n"
"EStop   estop     # emergency stop\n"
"bool   is_replan     # is_replan == truemean replan triggered(default = false)\n"
"string   replan_reason     #  \n"
"int32   right_of_way_status     # UNPROTECTED = 0;PROTECTED = 1;\n"
"RSSInfo   rss_info     # output related to RSS\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryPoint\n"
"PathPoint   path_point     # path point\n"
"float64   v     # linear velocity\n"
"float64   a     # linear acceleration\n"
"float64   relative_time     # relative time from beginning of the trajectory\n"
"float64   da     # longitudinal jerk\n"
"bool   is_steer_valid     # 转向是否有效\n"
"float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis\n"
"float64   rear_steer     # 后轮转角\n"
"int32   gear     # 档位\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PathPoint\n"
"float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/EStop\n"
"bool   is_estop     # is_estop == true when emergency stop is required\n"
"string   reason     # 原因\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/RSSInfo\n"
"bool   is_rss_safe     #  \n"
"float64   cur_dist_lon     # current longitudinal distance\n"
"float64   rss_safe_dist_lon     # longitudinal safe distance of rss\n"
"float64   acc_lon_range_minimum     # Minimum range of longitudinal acceleration\n"
"float64   acc_lon_range_maximum     # Maximum range of longitudinal acceleration\n"
"float64   acc_lat_left_range_minimum     # Minimum left range of lateral acceleration\n"
"float64   acc_lat_left_range_maximum     # Maximum left range of lateral acceleration\n"
"float64   acc_lat_right_range_minimum     # Minimum right range of lateral acceleration\n"
"float64   acc_lat_right_range_maximum     # Maximum right range of lateral acceleration\n"
;
  }

  static const char* value(const ::ros_interface::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::ADCTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.total_path_length);
      stream.next(m.total_path_time);
      stream.next(m.trajectory_points);
      stream.next(m.car_action);
      stream.next(m.behaviour_lat_state);
      stream.next(m.behaviour_lon_state);
      stream.next(m.scenario);
      stream.next(m.driving_mode);
      stream.next(m.adc_trajectory_type);
      stream.next(m.estop);
      stream.next(m.is_replan);
      stream.next(m.replan_reason);
      stream.next(m.right_of_way_status);
      stream.next(m.rss_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::ADCTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::ADCTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "total_path_length: ";
    Printer<double>::stream(s, indent + "  ", v.total_path_length);
    s << indent << "total_path_time: ";
    Printer<double>::stream(s, indent + "  ", v.total_path_time);
    s << indent << "trajectory_points[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_points.size(); ++i)
    {
      s << indent << "  trajectory_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory_points[i]);
    }
    s << indent << "car_action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_action);
    s << indent << "behaviour_lat_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behaviour_lat_state);
    s << indent << "behaviour_lon_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behaviour_lon_state);
    s << indent << "scenario: ";
    Printer<int32_t>::stream(s, indent + "  ", v.scenario);
    s << indent << "driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.driving_mode);
    s << indent << "adc_trajectory_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc_trajectory_type);
    s << indent << "estop: ";
    s << std::endl;
    Printer< ::ros_interface::EStop_<ContainerAllocator> >::stream(s, indent + "  ", v.estop);
    s << indent << "is_replan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_replan);
    s << indent << "replan_reason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.replan_reason);
    s << indent << "right_of_way_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_of_way_status);
    s << indent << "rss_info: ";
    s << std::endl;
    Printer< ::ros_interface::RSSInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.rss_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_ADCTRAJECTORY_H
