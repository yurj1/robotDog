// Generated by gencpp from file ros_interface/HMITrajectory.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_HMITRAJECTORY_H
#define ROS_INTERFACE_MESSAGE_HMITRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/HMITrajectoryPoint.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct HMITrajectory_
{
  typedef HMITrajectory_<ContainerAllocator> Type;

  HMITrajectory_()
    : header()
    , trajectory_points()  {
    }
  HMITrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , trajectory_points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >> _trajectory_points_type;
  _trajectory_points_type trajectory_points;





  typedef boost::shared_ptr< ::ros_interface::HMITrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::HMITrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct HMITrajectory_

typedef ::ros_interface::HMITrajectory_<std::allocator<void> > HMITrajectory;

typedef boost::shared_ptr< ::ros_interface::HMITrajectory > HMITrajectoryPtr;
typedef boost::shared_ptr< ::ros_interface::HMITrajectory const> HMITrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::HMITrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::HMITrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::HMITrajectory_<ContainerAllocator1> & lhs, const ::ros_interface::HMITrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.trajectory_points == rhs.trajectory_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::HMITrajectory_<ContainerAllocator1> & lhs, const ::ros_interface::HMITrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMITrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMITrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMITrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMITrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMITrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMITrajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::HMITrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d0c04a6d5136937220260a0ea83028b";
  }

  static const char* value(const ::ros_interface::HMITrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d0c04a6d5136937ULL;
  static const uint64_t static_value2 = 0x220260a0ea83028bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::HMITrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/HMITrajectory";
  }

  static const char* value(const ::ros_interface::HMITrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::HMITrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # 消息头\n"
"HMITrajectoryPoint[] trajectory_points # 抽稀用来显示的轨迹点数组\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/HMITrajectoryPoint\n"
"Point3D   point     #  \n"
"float64   v     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::HMITrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::HMITrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.trajectory_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMITrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::HMITrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::HMITrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "trajectory_points[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_points.size(); ++i)
    {
      s << indent << "  trajectory_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_HMITRAJECTORY_H
