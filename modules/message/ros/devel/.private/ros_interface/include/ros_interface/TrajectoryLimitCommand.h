// Generated by gencpp from file ros_interface/TrajectoryLimitCommand.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_TRAJECTORYLIMITCOMMAND_H
#define ROS_INTERFACE_MESSAGE_TRAJECTORYLIMITCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct TrajectoryLimitCommand_
{
  typedef TrajectoryLimitCommand_<ContainerAllocator> Type;

  TrajectoryLimitCommand_()
    : speed_limit_enable(false)
    , speed_limit(0.0)
    , kappa_limit_enable(false)
    , kappa_limit(0.0)  {
    }
  TrajectoryLimitCommand_(const ContainerAllocator& _alloc)
    : speed_limit_enable(false)
    , speed_limit(0.0)
    , kappa_limit_enable(false)
    , kappa_limit(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _speed_limit_enable_type;
  _speed_limit_enable_type speed_limit_enable;

   typedef double _speed_limit_type;
  _speed_limit_type speed_limit;

   typedef uint8_t _kappa_limit_enable_type;
  _kappa_limit_enable_type kappa_limit_enable;

   typedef double _kappa_limit_type;
  _kappa_limit_type kappa_limit;





  typedef boost::shared_ptr< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryLimitCommand_

typedef ::ros_interface::TrajectoryLimitCommand_<std::allocator<void> > TrajectoryLimitCommand;

typedef boost::shared_ptr< ::ros_interface::TrajectoryLimitCommand > TrajectoryLimitCommandPtr;
typedef boost::shared_ptr< ::ros_interface::TrajectoryLimitCommand const> TrajectoryLimitCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator1> & lhs, const ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator2> & rhs)
{
  return lhs.speed_limit_enable == rhs.speed_limit_enable &&
    lhs.speed_limit == rhs.speed_limit &&
    lhs.kappa_limit_enable == rhs.kappa_limit_enable &&
    lhs.kappa_limit == rhs.kappa_limit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator1> & lhs, const ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c69ea9264ac7549969c7a946a564e304";
  }

  static const char* value(const ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc69ea9264ac75499ULL;
  static const uint64_t static_value2 = 0x69c7a946a564e304ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/TrajectoryLimitCommand";
  }

  static const char* value(const ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool   speed_limit_enable     #  \n"
"float64   speed_limit     # m/s\n"
"bool   kappa_limit_enable     #  \n"
"float64   kappa_limit     # deg/m\n"
;
  }

  static const char* value(const ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_limit_enable);
      stream.next(m.speed_limit);
      stream.next(m.kappa_limit_enable);
      stream.next(m.kappa_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryLimitCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator>& v)
  {
    s << indent << "speed_limit_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_limit_enable);
    s << indent << "speed_limit: ";
    Printer<double>::stream(s, indent + "  ", v.speed_limit);
    s << indent << "kappa_limit_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.kappa_limit_enable);
    s << indent << "kappa_limit: ";
    Printer<double>::stream(s, indent + "  ", v.kappa_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_TRAJECTORYLIMITCOMMAND_H
