// Generated by gencpp from file ros_interface/PointXYZIRT.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_POINTXYZIRT_H
#define ROS_INTERFACE_MESSAGE_POINTXYZIRT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct PointXYZIRT_
{
  typedef PointXYZIRT_<ContainerAllocator> Type;

  PointXYZIRT_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , intensity(0)
    , ring_id(0)
    , timestamp(0)  {
    }
  PointXYZIRT_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , intensity(0)
    , ring_id(0)
    , timestamp(0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef uint32_t _intensity_type;
  _intensity_type intensity;

   typedef uint8_t _ring_id_type;
  _ring_id_type ring_id;

   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::ros_interface::PointXYZIRT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::PointXYZIRT_<ContainerAllocator> const> ConstPtr;

}; // struct PointXYZIRT_

typedef ::ros_interface::PointXYZIRT_<std::allocator<void> > PointXYZIRT;

typedef boost::shared_ptr< ::ros_interface::PointXYZIRT > PointXYZIRTPtr;
typedef boost::shared_ptr< ::ros_interface::PointXYZIRT const> PointXYZIRTConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::PointXYZIRT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::PointXYZIRT_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::PointXYZIRT_<ContainerAllocator1> & lhs, const ::ros_interface::PointXYZIRT_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.intensity == rhs.intensity &&
    lhs.ring_id == rhs.ring_id &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::PointXYZIRT_<ContainerAllocator1> & lhs, const ::ros_interface::PointXYZIRT_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PointXYZIRT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PointXYZIRT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PointXYZIRT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PointXYZIRT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PointXYZIRT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PointXYZIRT_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::PointXYZIRT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc728344192b7946d2b6d26c522f5601";
  }

  static const char* value(const ::ros_interface::PointXYZIRT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc728344192b7946ULL;
  static const uint64_t static_value2 = 0xd2b6d26c522f5601ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::PointXYZIRT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/PointXYZIRT";
  }

  static const char* value(const ::ros_interface::PointXYZIRT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::PointXYZIRT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64   x     # x//坐标x\n"
"float64   y     # y//坐标y\n"
"float64   z     # z//坐标z\n"
"uint32   intensity     # 反射强度\n"
"uint8   ring_id     # 线束ID\n"
"uint64   timestamp     # 时间戳\n"
;
  }

  static const char* value(const ::ros_interface::PointXYZIRT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::PointXYZIRT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.intensity);
      stream.next(m.ring_id);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointXYZIRT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::PointXYZIRT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::PointXYZIRT_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "intensity: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.intensity);
    s << indent << "ring_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ring_id);
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_POINTXYZIRT_H
