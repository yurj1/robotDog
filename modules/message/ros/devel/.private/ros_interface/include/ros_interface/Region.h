// Generated by gencpp from file ros_interface/Region.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_REGION_H
#define ROS_INTERFACE_MESSAGE_REGION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Region_
{
  typedef Region_<ContainerAllocator> Type;

  Region_()
    : name_region(0)
    , score(0.0)
    , rank_risk(0)
    , region_polygon()  {
    }
  Region_(const ContainerAllocator& _alloc)
    : name_region(0)
    , score(0.0)
    , rank_risk(0)
    , region_polygon(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _name_region_type;
  _name_region_type name_region;

   typedef double _score_type;
  _score_type score;

   typedef int32_t _rank_risk_type;
  _rank_risk_type rank_risk;

   typedef std::vector< ::ros_interface::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point3D_<ContainerAllocator> >> _region_polygon_type;
  _region_polygon_type region_polygon;





  typedef boost::shared_ptr< ::ros_interface::Region_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Region_<ContainerAllocator> const> ConstPtr;

}; // struct Region_

typedef ::ros_interface::Region_<std::allocator<void> > Region;

typedef boost::shared_ptr< ::ros_interface::Region > RegionPtr;
typedef boost::shared_ptr< ::ros_interface::Region const> RegionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Region_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Region_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Region_<ContainerAllocator1> & lhs, const ::ros_interface::Region_<ContainerAllocator2> & rhs)
{
  return lhs.name_region == rhs.name_region &&
    lhs.score == rhs.score &&
    lhs.rank_risk == rhs.rank_risk &&
    lhs.region_polygon == rhs.region_polygon;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Region_<ContainerAllocator1> & lhs, const ::ros_interface::Region_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Region_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Region_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Region_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Region_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Region_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Region_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Region_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e67108b17f0dbf5c3d9cd0e59ac3108e";
  }

  static const char* value(const ::ros_interface::Region_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe67108b17f0dbf5cULL;
  static const uint64_t static_value2 = 0x3d9cd0e59ac3108eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Region_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Region";
  }

  static const char* value(const ::ros_interface::Region_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Region_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   name_region     # 前后左右区域\n"
"float64   score     # 车辆前后左右的区域打分获得的分值(0-100表示逐步危险程度)\n"
"int32   rank_risk     # 危险程度(0-3四级划分，不同分级对应不同驾驶处理策略)\n"
"Point3D[] region_polygon # 世界坐标系下的区域多边形\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::Region_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Region_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name_region);
      stream.next(m.score);
      stream.next(m.rank_risk);
      stream.next(m.region_polygon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Region_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Region_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Region_<ContainerAllocator>& v)
  {
    s << indent << "name_region: ";
    Printer<int32_t>::stream(s, indent + "  ", v.name_region);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "rank_risk: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rank_risk);
    s << indent << "region_polygon[]" << std::endl;
    for (size_t i = 0; i < v.region_polygon.size(); ++i)
    {
      s << indent << "  region_polygon[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.region_polygon[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_REGION_H
