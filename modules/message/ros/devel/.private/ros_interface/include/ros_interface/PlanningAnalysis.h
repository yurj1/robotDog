// Generated by gencpp from file ros_interface/PlanningAnalysis.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PLANNINGANALYSIS_H
#define ROS_INTERFACE_MESSAGE_PLANNINGANALYSIS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/TimeConsume.h>
#include <ros_interface/PlanningParkingDebug.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct PlanningAnalysis_
{
  typedef PlanningAnalysis_<ContainerAllocator> Type;

  PlanningAnalysis_()
    : header()
    , frame_update_time(0.0)
    , generator_time(0.0)
    , evaluator_time()
    , selector_time(0.0)
    , planning_parking_debug()
    , dis_to_center_line(0.0)
    , diff_to_velocity(0.0)
    , referencline_kappa(0.0)  {
    }
  PlanningAnalysis_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_update_time(0.0)
    , generator_time(0.0)
    , evaluator_time(_alloc)
    , selector_time(0.0)
    , planning_parking_debug(_alloc)
    , dis_to_center_line(0.0)
    , diff_to_velocity(0.0)
    , referencline_kappa(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _frame_update_time_type;
  _frame_update_time_type frame_update_time;

   typedef double _generator_time_type;
  _generator_time_type generator_time;

   typedef std::vector< ::ros_interface::TimeConsume_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TimeConsume_<ContainerAllocator> >> _evaluator_time_type;
  _evaluator_time_type evaluator_time;

   typedef double _selector_time_type;
  _selector_time_type selector_time;

   typedef  ::ros_interface::PlanningParkingDebug_<ContainerAllocator>  _planning_parking_debug_type;
  _planning_parking_debug_type planning_parking_debug;

   typedef double _dis_to_center_line_type;
  _dis_to_center_line_type dis_to_center_line;

   typedef double _diff_to_velocity_type;
  _diff_to_velocity_type diff_to_velocity;

   typedef double _referencline_kappa_type;
  _referencline_kappa_type referencline_kappa;





  typedef boost::shared_ptr< ::ros_interface::PlanningAnalysis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::PlanningAnalysis_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningAnalysis_

typedef ::ros_interface::PlanningAnalysis_<std::allocator<void> > PlanningAnalysis;

typedef boost::shared_ptr< ::ros_interface::PlanningAnalysis > PlanningAnalysisPtr;
typedef boost::shared_ptr< ::ros_interface::PlanningAnalysis const> PlanningAnalysisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::PlanningAnalysis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::PlanningAnalysis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::PlanningAnalysis_<ContainerAllocator1> & lhs, const ::ros_interface::PlanningAnalysis_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_update_time == rhs.frame_update_time &&
    lhs.generator_time == rhs.generator_time &&
    lhs.evaluator_time == rhs.evaluator_time &&
    lhs.selector_time == rhs.selector_time &&
    lhs.planning_parking_debug == rhs.planning_parking_debug &&
    lhs.dis_to_center_line == rhs.dis_to_center_line &&
    lhs.diff_to_velocity == rhs.diff_to_velocity &&
    lhs.referencline_kappa == rhs.referencline_kappa;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::PlanningAnalysis_<ContainerAllocator1> & lhs, const ::ros_interface::PlanningAnalysis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PlanningAnalysis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PlanningAnalysis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PlanningAnalysis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PlanningAnalysis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PlanningAnalysis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PlanningAnalysis_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::PlanningAnalysis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cd0efdc9d0d12fea998f6cce3e1e4d3";
  }

  static const char* value(const ::ros_interface::PlanningAnalysis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cd0efdc9d0d12feULL;
  static const uint64_t static_value2 = 0xa998f6cce3e1e4d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::PlanningAnalysis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/PlanningAnalysis";
  }

  static const char* value(const ::ros_interface::PlanningAnalysis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::PlanningAnalysis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"float64   frame_update_time     # frame update计算时间\n"
"float64   generator_time     # 轨迹生成 计算时间\n"
"TimeConsume[] evaluator_time # 轨迹评估计算时间\n"
"float64   selector_time     # 轨迹选择计算时间\n"
"PlanningParkingDebug   planning_parking_debug     # planning泊车调试消息\n"
"float64   dis_to_center_line     # 车辆距离车道中心线的垂直距离\n"
"float64   diff_to_velocity     # 目标速度与规划速度之差\n"
"float64   referencline_kappa     # 参考线曲率\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TimeConsume\n"
"string   name     #  \n"
"float64   time_consume     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PlanningParkingDebug\n"
"Polygon2D[] vehicle_preiew_polygon # 车辆预测多边形\n"
"Polygon2D[] obstacles_polygon # 障碍物多边形\n"
"PathPoint[] path_points # 轨迹点\n"
"float64   lat_error     # 横向误差\n"
"float64   lon_error     # 纵向误差\n"
"float64   yaw_error     # 角度误差(度)\n"
"Point2dList[] obstacles_vec #  \n"
"TrajectoryPoint[] warm_start_traj #  \n"
"TrajectoryPoint[] smoothed_traj_stage1 #  \n"
"TrajectoryPoint[] smoothed_traj_stage2 #  \n"
"Trajectory   reference_line     #  \n"
"Trajectory[] trajectory_array # 轨迹簇\n"
"Trajectory   optimal_coarse_trajectory     #  \n"
"Trajectory   optimal_smooth_trajectory     #  \n"
"float64   hybrid_a_star_map_time     #  \n"
"float64   hybrid_a_star_heuristic_time     #  \n"
"float64   hybrid_a_star_rs_time     #  \n"
"float64   hybrid_a_star_total_time     #  \n"
"float64   ias_collision_avoidance_time     #  \n"
"float64   ias_path_smooth_time     #  \n"
"float64   ias_speed_smooth_time     #  \n"
"float64   ias_total_time     #  \n"
"float64   samping_trajectory_time     #  \n"
"bool   is_replan     #  \n"
"string   replan_reason     #  \n"
"float64   replan_time     #  \n"
"int32   replan_num     #  \n"
"int32   optimizer_thread_counter     #  \n"
"int32   replan_by_context_update_counter     #  \n"
"int32   replan_by_large_error_counter     #  \n"
"int32   parking_type     #  \n"
"int32   moves_counter     # 揉库次数\n"
"float64   remain_distance     # 剩余距离\n"
"float64   distance_to_leader_obj     # 距离最近障碍物距离\n"
"int32   state     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Polygon2D\n"
"int32   coordinate_system     # 坐标系\n"
"Point2D[] points # 二维点集\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point2D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PathPoint\n"
"float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point2dList\n"
"Point2D[] point2d_list #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryPoint\n"
"PathPoint   path_point     # path point\n"
"float64   v     # linear velocity\n"
"float64   a     # linear acceleration\n"
"float64   relative_time     # relative time from beginning of the trajectory\n"
"float64   da     # longitudinal jerk\n"
"bool   is_steer_valid     # 转向是否有效\n"
"float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis\n"
"float64   rear_steer     # 后轮转角\n"
"int32   gear     # 档位\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Trajectory\n"
"string   name     # 轨迹名称\n"
"TrajectoryPoint[] trajectory_points # 轨迹点\n"
;
  }

  static const char* value(const ::ros_interface::PlanningAnalysis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::PlanningAnalysis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_update_time);
      stream.next(m.generator_time);
      stream.next(m.evaluator_time);
      stream.next(m.selector_time);
      stream.next(m.planning_parking_debug);
      stream.next(m.dis_to_center_line);
      stream.next(m.diff_to_velocity);
      stream.next(m.referencline_kappa);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningAnalysis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::PlanningAnalysis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::PlanningAnalysis_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_update_time: ";
    Printer<double>::stream(s, indent + "  ", v.frame_update_time);
    s << indent << "generator_time: ";
    Printer<double>::stream(s, indent + "  ", v.generator_time);
    s << indent << "evaluator_time[]" << std::endl;
    for (size_t i = 0; i < v.evaluator_time.size(); ++i)
    {
      s << indent << "  evaluator_time[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TimeConsume_<ContainerAllocator> >::stream(s, indent + "    ", v.evaluator_time[i]);
    }
    s << indent << "selector_time: ";
    Printer<double>::stream(s, indent + "  ", v.selector_time);
    s << indent << "planning_parking_debug: ";
    s << std::endl;
    Printer< ::ros_interface::PlanningParkingDebug_<ContainerAllocator> >::stream(s, indent + "  ", v.planning_parking_debug);
    s << indent << "dis_to_center_line: ";
    Printer<double>::stream(s, indent + "  ", v.dis_to_center_line);
    s << indent << "diff_to_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.diff_to_velocity);
    s << indent << "referencline_kappa: ";
    Printer<double>::stream(s, indent + "  ", v.referencline_kappa);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PLANNINGANALYSIS_H
