// Generated by gencpp from file ros_interface/Pose.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_POSE_H
#define ROS_INTERFACE_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/PointENU.h>
#include <ros_interface/Quaternion.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : position()
    , orientation()
    , linear_velocity()
    , linear_acceleration()
    , angular_velocity()
    , heading(0.0)
    , linear_acceleration_vrf()
    , angular_velocity_vrf()
    , euler_angles()  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , orientation(_alloc)
    , linear_velocity(_alloc)
    , linear_acceleration(_alloc)
    , angular_velocity(_alloc)
    , heading(0.0)
    , linear_acceleration_vrf(_alloc)
    , angular_velocity_vrf(_alloc)
    , euler_angles(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::PointENU_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::ros_interface::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef double _heading_type;
  _heading_type heading;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _linear_acceleration_vrf_type;
  _linear_acceleration_vrf_type linear_acceleration_vrf;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _angular_velocity_vrf_type;
  _angular_velocity_vrf_type angular_velocity_vrf;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _euler_angles_type;
  _euler_angles_type euler_angles;





  typedef boost::shared_ptr< ::ros_interface::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::ros_interface::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::ros_interface::Pose > PosePtr;
typedef boost::shared_ptr< ::ros_interface::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Pose_<ContainerAllocator1> & lhs, const ::ros_interface::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.orientation == rhs.orientation &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.heading == rhs.heading &&
    lhs.linear_acceleration_vrf == rhs.linear_acceleration_vrf &&
    lhs.angular_velocity_vrf == rhs.angular_velocity_vrf &&
    lhs.euler_angles == rhs.euler_angles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Pose_<ContainerAllocator1> & lhs, const ::ros_interface::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c21debd869f05bb5d743b9f76884b06";
  }

  static const char* value(const ::ros_interface::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c21debd869f05bbULL;
  static const uint64_t static_value2 = 0x5d743b9f76884b06ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Pose";
  }

  static const char* value(const ::ros_interface::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PointENU   position     # Position of the vehicle reference point (VRP) in the map reference frame.   The VRP is the center of rear axle.\n"
"Quaternion   orientation     # A quaternion that represents the rotation from the IMU coordinate (Right/Forward/Up) to the world coordinate (East/North/Up).\n"
"Point3D   linear_velocity     # Linear velocity of the VRP in the map reference frame.East/north/up in meters per second.\n"
"Point3D   linear_acceleration     # Linear acceleration of the VRP in the map reference frame. East/north/up in meters per square second.\n"
"Point3D   angular_velocity     # Angular velocity of the vehicle in the map reference frame.Around east/north/up axes in radians per second.\n"
"float64   heading     # The heading is zero when the car is facing East and positive when facing North\n"
"Point3D   linear_acceleration_vrf     # Linear acceleration of the VRP in the vehicle reference frame.Right/forward/up in meters per square second.\n"
"Point3D   angular_velocity_vrf     # Angular velocity of the VRP in the vehicle reference frame. Around right/forward/up axes in radians per second.\n"
"Point3D   euler_angles     # // Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.   // in world coordinate (East/North/Up)   // The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.   // The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.   // The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.   // The direction of rotation follows the right-hand rule.\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PointENU\n"
"float64   x     # East from the origin, in meters.\n"
"float64   y     # North from the origin, in meters.\n"
"float64   z     # Up from the WGS-84 ellipsoid, in meters.\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Quaternion\n"
"float64   qx     # 四维空间x\n"
"float64   qy     # 四维空间y\n"
"float64   qz     # 四维空间z\n"
"float64   qw     # 四维空间w\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.linear_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.angular_velocity);
      stream.next(m.heading);
      stream.next(m.linear_acceleration_vrf);
      stream.next(m.angular_velocity_vrf);
      stream.next(m.euler_angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Pose_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::ros_interface::PointENU_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::ros_interface::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "linear_velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "linear_acceleration_vrf: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration_vrf);
    s << indent << "angular_velocity_vrf: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity_vrf);
    s << indent << "euler_angles: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.euler_angles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_POSE_H
