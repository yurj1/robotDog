// Generated by gencpp from file ros_interface/VehicleConfig.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_VEHICLECONFIG_H
#define ROS_INTERFACE_MESSAGE_VEHICLECONFIG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/VehicleParam.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct VehicleConfig_
{
  typedef VehicleConfig_<ContainerAllocator> Type;

  VehicleConfig_()
    : header()
    , vehicle_param()  {
    }
  VehicleConfig_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicle_param(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_interface::VehicleParam_<ContainerAllocator>  _vehicle_param_type;
  _vehicle_param_type vehicle_param;





  typedef boost::shared_ptr< ::ros_interface::VehicleConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::VehicleConfig_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleConfig_

typedef ::ros_interface::VehicleConfig_<std::allocator<void> > VehicleConfig;

typedef boost::shared_ptr< ::ros_interface::VehicleConfig > VehicleConfigPtr;
typedef boost::shared_ptr< ::ros_interface::VehicleConfig const> VehicleConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::VehicleConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::VehicleConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::VehicleConfig_<ContainerAllocator1> & lhs, const ::ros_interface::VehicleConfig_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vehicle_param == rhs.vehicle_param;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::VehicleConfig_<ContainerAllocator1> & lhs, const ::ros_interface::VehicleConfig_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::VehicleConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::VehicleConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::VehicleConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::VehicleConfig_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::VehicleConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::VehicleConfig_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::VehicleConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e501d7b1f42705539ce132ff4e593b0c";
  }

  static const char* value(const ::ros_interface::VehicleConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe501d7b1f4270553ULL;
  static const uint64_t static_value2 = 0x9ce132ff4e593b0cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::VehicleConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/VehicleConfig";
  }

  static const char* value(const ::ros_interface::VehicleConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::VehicleConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"VehicleParam   vehicle_param     # 车辆参数表\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/VehicleParam\n"
"string   brand     #  \n"
"int32   steer_mode     #  \n"
"float64   length     #  \n"
"float64   width     #  \n"
"float64   height     #  \n"
"float64   mass_fl     #  \n"
"float64   mass_fr     #  \n"
"float64   mass_rl     #  \n"
"float64   mass_rr     #  \n"
"float64   wheel_radius     #  \n"
"float64   wheelbase     #  \n"
"float64   front_edge_to_center     #  \n"
"float64   back_edge_to_center     #  \n"
"float64   lf     #  \n"
"float64   lr     #  \n"
"float64   cf     #  \n"
"float64   cr     #  \n"
"float64   steer_ratio     #  \n"
"float64   rolling_coefficient     #  \n"
"float64   air_density     #  \n"
"float64   air_damping_coefficient     #  \n"
"float64   max_front_steer_angle     #  \n"
"float64   min_front_steer_angle     #  \n"
"float64   max_rear_steer_angle     #  \n"
"float64   min_rear_steer_angle     #  \n"
"float64   speed_limit     #  \n"
"float64   max_brake_value     #  \n"
"float64   min_brake_value     #  \n"
"float64   max_accel_value     #  \n"
"float64   min_accel_value     #  \n"
"float64   speed_deadzone     #  \n"
"float64   standstill_acceleration     #  \n"
"float64   max_front_steer_angle_rate     #  \n"
"float64   max_rear_steer_angle_rate     #  \n"
"float64   max_abs_speed_when_stopped     #  \n"
"float64   max_abs_speed_when_stopped_duration     #  \n"
"float64   brake_value_when_gear_transitioning     #  \n"
"float64   accel_deadzone     #  \n"
"float64   brake_deadzone     #  \n"
"float64   acceleration_in_idle     #  \n"
"float64   deceleration_in_idle     #  \n"
"float64   max_acceleration_jerk     #  \n"
"float64   max_acceleration     #  \n"
"float64   max_deceleration     #  \n"
"float64   min_turning_radius     #  \n"
;
  }

  static const char* value(const ::ros_interface::VehicleConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::VehicleConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicle_param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::VehicleConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::VehicleConfig_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicle_param: ";
    s << std::endl;
    Printer< ::ros_interface::VehicleParam_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_param);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_VEHICLECONFIG_H
