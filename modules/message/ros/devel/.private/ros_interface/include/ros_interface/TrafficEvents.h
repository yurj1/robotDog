// Generated by gencpp from file ros_interface/TrafficEvents.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_TRAFFICEVENTS_H
#define ROS_INTERFACE_MESSAGE_TRAFFICEVENTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/RouteFusionInfo.h>
#include <ros_interface/JunctionInfo.h>
#include <ros_interface/LimitSpeedInfo.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct TrafficEvents_
{
  typedef TrafficEvents_<ContainerAllocator> Type;

  TrafficEvents_()
    : header()
    , route_fusion_info()
    , junction_info()
    , limit_speed_info()  {
    }
  TrafficEvents_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , route_fusion_info(_alloc)
    , junction_info(_alloc)
    , limit_speed_info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_interface::RouteFusionInfo_<ContainerAllocator>  _route_fusion_info_type;
  _route_fusion_info_type route_fusion_info;

   typedef  ::ros_interface::JunctionInfo_<ContainerAllocator>  _junction_info_type;
  _junction_info_type junction_info;

   typedef  ::ros_interface::LimitSpeedInfo_<ContainerAllocator>  _limit_speed_info_type;
  _limit_speed_info_type limit_speed_info;





  typedef boost::shared_ptr< ::ros_interface::TrafficEvents_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::TrafficEvents_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficEvents_

typedef ::ros_interface::TrafficEvents_<std::allocator<void> > TrafficEvents;

typedef boost::shared_ptr< ::ros_interface::TrafficEvents > TrafficEventsPtr;
typedef boost::shared_ptr< ::ros_interface::TrafficEvents const> TrafficEventsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::TrafficEvents_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::TrafficEvents_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::TrafficEvents_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficEvents_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.route_fusion_info == rhs.route_fusion_info &&
    lhs.junction_info == rhs.junction_info &&
    lhs.limit_speed_info == rhs.limit_speed_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::TrafficEvents_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficEvents_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficEvents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficEvents_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficEvents_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficEvents_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficEvents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficEvents_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::TrafficEvents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "335c91b3f0dcb169fd1b0fb0532d62c6";
  }

  static const char* value(const ::ros_interface::TrafficEvents_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x335c91b3f0dcb169ULL;
  static const uint64_t static_value2 = 0xfd1b0fb0532d62c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::TrafficEvents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/TrafficEvents";
  }

  static const char* value(const ::ros_interface::TrafficEvents_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::TrafficEvents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # timestamp is included in header\n"
"RouteFusionInfo   route_fusion_info     # 地图融合信息\n"
"JunctionInfo   junction_info     # 路口信息\n"
"LimitSpeedInfo   limit_speed_info     # 限速消息\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/RouteFusionInfo\n"
"int32   fusion_flag     # 是否有效标志位\n"
"string   fusion_reason     # 融合原因\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/JunctionInfo\n"
"int32   id     #  \n"
"int32   light_flag     # 是否有效，无效就可能是清除了，或者已经过路口了\n"
"int32   light_color     # 信号灯颜色，绿灯可通行，false红灯不能通行\n"
"float64   light_remain_time     # 信号灯剩余时间\n"
"float64   distance_to_stop     # 停车距离，停止线\n"
"int32   direction_flag     # 是否有效，无效就可能是清除了，或者已经过路口了\n"
"int32   direction     # 路口通行方向，0：无效、1：左、2：前、3：右\n"
"float64   distance_to_junction     # 距路口距离\n"
"Point3D[] stop_line # 路口停止线\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/LimitSpeedInfo\n"
"int32   limitspeed_valid_flag     # 限速有效性标志位\n"
"float64   limit_speed     # 限速大小（m/s）\n"
"float64   limit_distance     # 开始减速距离(m)\n"
;
  }

  static const char* value(const ::ros_interface::TrafficEvents_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::TrafficEvents_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.route_fusion_info);
      stream.next(m.junction_info);
      stream.next(m.limit_speed_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficEvents_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::TrafficEvents_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::TrafficEvents_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "route_fusion_info: ";
    s << std::endl;
    Printer< ::ros_interface::RouteFusionInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.route_fusion_info);
    s << indent << "junction_info: ";
    s << std::endl;
    Printer< ::ros_interface::JunctionInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.junction_info);
    s << indent << "limit_speed_info: ";
    s << std::endl;
    Printer< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.limit_speed_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_TRAFFICEVENTS_H
