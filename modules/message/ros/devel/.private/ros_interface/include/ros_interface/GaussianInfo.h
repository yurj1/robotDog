// Generated by gencpp from file ros_interface/GaussianInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_GAUSSIANINFO_H
#define ROS_INTERFACE_MESSAGE_GAUSSIANINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct GaussianInfo_
{
  typedef GaussianInfo_<ContainerAllocator> Type;

  GaussianInfo_()
    : sigma_x(0.0)
    , sigma_y(0.0)
    , correlation(0.0)
    , area_probability(0.0)
    , ellipse_a(0.0)
    , ellipse_b(0.0)
    , theta_a(0.0)  {
    }
  GaussianInfo_(const ContainerAllocator& _alloc)
    : sigma_x(0.0)
    , sigma_y(0.0)
    , correlation(0.0)
    , area_probability(0.0)
    , ellipse_a(0.0)
    , ellipse_b(0.0)
    , theta_a(0.0)  {
  (void)_alloc;
    }



   typedef double _sigma_x_type;
  _sigma_x_type sigma_x;

   typedef double _sigma_y_type;
  _sigma_y_type sigma_y;

   typedef double _correlation_type;
  _correlation_type correlation;

   typedef double _area_probability_type;
  _area_probability_type area_probability;

   typedef double _ellipse_a_type;
  _ellipse_a_type ellipse_a;

   typedef double _ellipse_b_type;
  _ellipse_b_type ellipse_b;

   typedef double _theta_a_type;
  _theta_a_type theta_a;





  typedef boost::shared_ptr< ::ros_interface::GaussianInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::GaussianInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GaussianInfo_

typedef ::ros_interface::GaussianInfo_<std::allocator<void> > GaussianInfo;

typedef boost::shared_ptr< ::ros_interface::GaussianInfo > GaussianInfoPtr;
typedef boost::shared_ptr< ::ros_interface::GaussianInfo const> GaussianInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::GaussianInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::GaussianInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::GaussianInfo_<ContainerAllocator1> & lhs, const ::ros_interface::GaussianInfo_<ContainerAllocator2> & rhs)
{
  return lhs.sigma_x == rhs.sigma_x &&
    lhs.sigma_y == rhs.sigma_y &&
    lhs.correlation == rhs.correlation &&
    lhs.area_probability == rhs.area_probability &&
    lhs.ellipse_a == rhs.ellipse_a &&
    lhs.ellipse_b == rhs.ellipse_b &&
    lhs.theta_a == rhs.theta_a;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::GaussianInfo_<ContainerAllocator1> & lhs, const ::ros_interface::GaussianInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::GaussianInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::GaussianInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::GaussianInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::GaussianInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::GaussianInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::GaussianInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::GaussianInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e7dd0c5b6f01ab6076107f4fff84ee4e";
  }

  static const char* value(const ::ros_interface::GaussianInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe7dd0c5b6f01ab60ULL;
  static const uint64_t static_value2 = 0x76107f4fff84ee4eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::GaussianInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/GaussianInfo";
  }

  static const char* value(const ::ros_interface::GaussianInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::GaussianInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64   sigma_x     # 标准差x\n"
"float64   sigma_y     # 标准差y\n"
"float64   correlation     # 相关性\n"
"float64   area_probability     # Information of representative uncertainty area\n"
"float64   ellipse_a     # 椭圆长轴\n"
"float64   ellipse_b     # 椭圆短轴\n"
"float64   theta_a     # 椭圆朝向\n"
;
  }

  static const char* value(const ::ros_interface::GaussianInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::GaussianInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sigma_x);
      stream.next(m.sigma_y);
      stream.next(m.correlation);
      stream.next(m.area_probability);
      stream.next(m.ellipse_a);
      stream.next(m.ellipse_b);
      stream.next(m.theta_a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GaussianInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::GaussianInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::GaussianInfo_<ContainerAllocator>& v)
  {
    s << indent << "sigma_x: ";
    Printer<double>::stream(s, indent + "  ", v.sigma_x);
    s << indent << "sigma_y: ";
    Printer<double>::stream(s, indent + "  ", v.sigma_y);
    s << indent << "correlation: ";
    Printer<double>::stream(s, indent + "  ", v.correlation);
    s << indent << "area_probability: ";
    Printer<double>::stream(s, indent + "  ", v.area_probability);
    s << indent << "ellipse_a: ";
    Printer<double>::stream(s, indent + "  ", v.ellipse_a);
    s << indent << "ellipse_b: ";
    Printer<double>::stream(s, indent + "  ", v.ellipse_b);
    s << indent << "theta_a: ";
    Printer<double>::stream(s, indent + "  ", v.theta_a);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_GAUSSIANINFO_H
