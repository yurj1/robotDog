// Generated by gencpp from file ros_interface/GuideRoad.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_GUIDEROAD_H
#define ROS_INTERFACE_MESSAGE_GUIDEROAD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/CurvatureInfo.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct GuideRoad_
{
  typedef GuideRoad_<ContainerAllocator> Type;

  GuideRoad_()
    : road_id(0)
    , road_type(0)
    , turn_type(0)
    , avg_curvature(0.0)
    , curvature_size(0)
    , curvature()  {
    }
  GuideRoad_(const ContainerAllocator& _alloc)
    : road_id(0)
    , road_type(0)
    , turn_type(0)
    , avg_curvature(0.0)
    , curvature_size(0)
    , curvature(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _road_id_type;
  _road_id_type road_id;

   typedef int8_t _road_type_type;
  _road_type_type road_type;

   typedef int8_t _turn_type_type;
  _turn_type_type turn_type;

   typedef double _avg_curvature_type;
  _avg_curvature_type avg_curvature;

   typedef int32_t _curvature_size_type;
  _curvature_size_type curvature_size;

   typedef std::vector< ::ros_interface::CurvatureInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::CurvatureInfo_<ContainerAllocator> >> _curvature_type;
  _curvature_type curvature;





  typedef boost::shared_ptr< ::ros_interface::GuideRoad_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::GuideRoad_<ContainerAllocator> const> ConstPtr;

}; // struct GuideRoad_

typedef ::ros_interface::GuideRoad_<std::allocator<void> > GuideRoad;

typedef boost::shared_ptr< ::ros_interface::GuideRoad > GuideRoadPtr;
typedef boost::shared_ptr< ::ros_interface::GuideRoad const> GuideRoadConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::GuideRoad_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::GuideRoad_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::GuideRoad_<ContainerAllocator1> & lhs, const ::ros_interface::GuideRoad_<ContainerAllocator2> & rhs)
{
  return lhs.road_id == rhs.road_id &&
    lhs.road_type == rhs.road_type &&
    lhs.turn_type == rhs.turn_type &&
    lhs.avg_curvature == rhs.avg_curvature &&
    lhs.curvature_size == rhs.curvature_size &&
    lhs.curvature == rhs.curvature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::GuideRoad_<ContainerAllocator1> & lhs, const ::ros_interface::GuideRoad_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::GuideRoad_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::GuideRoad_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::GuideRoad_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::GuideRoad_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::GuideRoad_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::GuideRoad_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::GuideRoad_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2111a81fc9be87fa69598a4bd29fcca4";
  }

  static const char* value(const ::ros_interface::GuideRoad_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2111a81fc9be87faULL;
  static const uint64_t static_value2 = 0x69598a4bd29fcca4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::GuideRoad_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/GuideRoad";
  }

  static const char* value(const ::ros_interface::GuideRoad_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::GuideRoad_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64   road_id     # 道路的id\n"
"int8   road_type     # 道路的类型: 0：未知或一般道路  1：环岛 2：交叉路口 3：主路 4：辅路\n"
"int8   turn_type     # 规划路线上道路的转向信息 1：左转 2：直行 3：右转\n"
"float64   avg_curvature     # 道路的平均曲率\n"
"int32   curvature_size     # 道路中心线上点(曲率)数量\n"
"CurvatureInfo[] curvature # 道路曲率信息数组\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/CurvatureInfo\n"
"float64   offset     # 道路中心线上点位于该道路的位置（与道路起点的距离）\n"
"float64   value     # 道路中心线上点的曲率值\n"
;
  }

  static const char* value(const ::ros_interface::GuideRoad_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::GuideRoad_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.road_id);
      stream.next(m.road_type);
      stream.next(m.turn_type);
      stream.next(m.avg_curvature);
      stream.next(m.curvature_size);
      stream.next(m.curvature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GuideRoad_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::GuideRoad_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::GuideRoad_<ContainerAllocator>& v)
  {
    s << indent << "road_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.road_id);
    s << indent << "road_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.road_type);
    s << indent << "turn_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.turn_type);
    s << indent << "avg_curvature: ";
    Printer<double>::stream(s, indent + "  ", v.avg_curvature);
    s << indent << "curvature_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.curvature_size);
    s << indent << "curvature[]" << std::endl;
    for (size_t i = 0; i < v.curvature.size(); ++i)
    {
      s << indent << "  curvature[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::CurvatureInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.curvature[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_GUIDEROAD_H
