// Generated by gencpp from file ros_interface/TrafficLightDebug.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_TRAFFICLIGHTDEBUG_H
#define ROS_INTERFACE_MESSAGE_TRAFFICLIGHTDEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/TrafficLightBox.h>
#include <ros_interface/TrafficLightBox.h>
#include <ros_interface/TrafficLightBox.h>
#include <ros_interface/TrafficLightBox.h>
#include <ros_interface/TrafficLightBox.h>
#include <ros_interface/TrafficLightBox.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct TrafficLightDebug_
{
  typedef TrafficLightDebug_<ContainerAllocator> Type;

  TrafficLightDebug_()
    : cropbox()
    , box()
    , signal_num(0)
    , valid_pos(0)
    , ts_diff_pos(0.0)
    , ts_diff_sys(0.0)
    , project_error(0)
    , distance_to_stop_line(0.0)
    , camera_id(0)
    , crop_roi()
    , projected_roi()
    , rectified_roi()
    , debug_roi()  {
    }
  TrafficLightDebug_(const ContainerAllocator& _alloc)
    : cropbox(_alloc)
    , box(_alloc)
    , signal_num(0)
    , valid_pos(0)
    , ts_diff_pos(0.0)
    , ts_diff_sys(0.0)
    , project_error(0)
    , distance_to_stop_line(0.0)
    , camera_id(0)
    , crop_roi(_alloc)
    , projected_roi(_alloc)
    , rectified_roi(_alloc)
    , debug_roi(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::TrafficLightBox_<ContainerAllocator>  _cropbox_type;
  _cropbox_type cropbox;

   typedef std::vector< ::ros_interface::TrafficLightBox_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrafficLightBox_<ContainerAllocator> >> _box_type;
  _box_type box;

   typedef int32_t _signal_num_type;
  _signal_num_type signal_num;

   typedef int32_t _valid_pos_type;
  _valid_pos_type valid_pos;

   typedef double _ts_diff_pos_type;
  _ts_diff_pos_type ts_diff_pos;

   typedef double _ts_diff_sys_type;
  _ts_diff_sys_type ts_diff_sys;

   typedef int32_t _project_error_type;
  _project_error_type project_error;

   typedef double _distance_to_stop_line_type;
  _distance_to_stop_line_type distance_to_stop_line;

   typedef int32_t _camera_id_type;
  _camera_id_type camera_id;

   typedef std::vector< ::ros_interface::TrafficLightBox_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrafficLightBox_<ContainerAllocator> >> _crop_roi_type;
  _crop_roi_type crop_roi;

   typedef std::vector< ::ros_interface::TrafficLightBox_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrafficLightBox_<ContainerAllocator> >> _projected_roi_type;
  _projected_roi_type projected_roi;

   typedef std::vector< ::ros_interface::TrafficLightBox_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrafficLightBox_<ContainerAllocator> >> _rectified_roi_type;
  _rectified_roi_type rectified_roi;

   typedef std::vector< ::ros_interface::TrafficLightBox_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrafficLightBox_<ContainerAllocator> >> _debug_roi_type;
  _debug_roi_type debug_roi;





  typedef boost::shared_ptr< ::ros_interface::TrafficLightDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::TrafficLightDebug_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightDebug_

typedef ::ros_interface::TrafficLightDebug_<std::allocator<void> > TrafficLightDebug;

typedef boost::shared_ptr< ::ros_interface::TrafficLightDebug > TrafficLightDebugPtr;
typedef boost::shared_ptr< ::ros_interface::TrafficLightDebug const> TrafficLightDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::TrafficLightDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::TrafficLightDebug_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficLightDebug_<ContainerAllocator2> & rhs)
{
  return lhs.cropbox == rhs.cropbox &&
    lhs.box == rhs.box &&
    lhs.signal_num == rhs.signal_num &&
    lhs.valid_pos == rhs.valid_pos &&
    lhs.ts_diff_pos == rhs.ts_diff_pos &&
    lhs.ts_diff_sys == rhs.ts_diff_sys &&
    lhs.project_error == rhs.project_error &&
    lhs.distance_to_stop_line == rhs.distance_to_stop_line &&
    lhs.camera_id == rhs.camera_id &&
    lhs.crop_roi == rhs.crop_roi &&
    lhs.projected_roi == rhs.projected_roi &&
    lhs.rectified_roi == rhs.rectified_roi &&
    lhs.debug_roi == rhs.debug_roi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::TrafficLightDebug_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficLightDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficLightDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficLightDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficLightDebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6bafdc05f8e0cd03dd05affb896f154";
  }

  static const char* value(const ::ros_interface::TrafficLightDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6bafdc05f8e0cd0ULL;
  static const uint64_t static_value2 = 0x3dd05affb896f154ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/TrafficLightDebug";
  }

  static const char* value(const ::ros_interface::TrafficLightDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "TrafficLightBox   cropbox     #  \n"
"TrafficLightBox[] box #  \n"
"int32   signal_num     #  \n"
"int32   valid_pos     #  \n"
"float64   ts_diff_pos     #  \n"
"float64   ts_diff_sys     #  \n"
"int32   project_error     #  \n"
"float64   distance_to_stop_line     #  \n"
"int32   camera_id     #  \n"
"TrafficLightBox[] crop_roi #  \n"
"TrafficLightBox[] projected_roi #  \n"
"TrafficLightBox[] rectified_roi #  \n"
"TrafficLightBox[] debug_roi #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrafficLightBox\n"
"int32   x     # 交通灯目标在图像上中心点横向方向像素位置\n"
"int32   y     # 交通灯目标在图像上中心点纵向方向像素位置\n"
"int32   width     # 交通灯目标在图像上宽度\n"
"int32   height     # 交通灯目标在图像上高度\n"
"int32   color     # UNKNOWN = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;\n"
"bool   selected     # 是否选择\n"
"string   camera_name     # 相机名称\n"
;
  }

  static const char* value(const ::ros_interface::TrafficLightDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cropbox);
      stream.next(m.box);
      stream.next(m.signal_num);
      stream.next(m.valid_pos);
      stream.next(m.ts_diff_pos);
      stream.next(m.ts_diff_sys);
      stream.next(m.project_error);
      stream.next(m.distance_to_stop_line);
      stream.next(m.camera_id);
      stream.next(m.crop_roi);
      stream.next(m.projected_roi);
      stream.next(m.rectified_roi);
      stream.next(m.debug_roi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::TrafficLightDebug_<ContainerAllocator>& v)
  {
    s << indent << "cropbox: ";
    s << std::endl;
    Printer< ::ros_interface::TrafficLightBox_<ContainerAllocator> >::stream(s, indent + "  ", v.cropbox);
    s << indent << "box[]" << std::endl;
    for (size_t i = 0; i < v.box.size(); ++i)
    {
      s << indent << "  box[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrafficLightBox_<ContainerAllocator> >::stream(s, indent + "    ", v.box[i]);
    }
    s << indent << "signal_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signal_num);
    s << indent << "valid_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.valid_pos);
    s << indent << "ts_diff_pos: ";
    Printer<double>::stream(s, indent + "  ", v.ts_diff_pos);
    s << indent << "ts_diff_sys: ";
    Printer<double>::stream(s, indent + "  ", v.ts_diff_sys);
    s << indent << "project_error: ";
    Printer<int32_t>::stream(s, indent + "  ", v.project_error);
    s << indent << "distance_to_stop_line: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_stop_line);
    s << indent << "camera_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camera_id);
    s << indent << "crop_roi[]" << std::endl;
    for (size_t i = 0; i < v.crop_roi.size(); ++i)
    {
      s << indent << "  crop_roi[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrafficLightBox_<ContainerAllocator> >::stream(s, indent + "    ", v.crop_roi[i]);
    }
    s << indent << "projected_roi[]" << std::endl;
    for (size_t i = 0; i < v.projected_roi.size(); ++i)
    {
      s << indent << "  projected_roi[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrafficLightBox_<ContainerAllocator> >::stream(s, indent + "    ", v.projected_roi[i]);
    }
    s << indent << "rectified_roi[]" << std::endl;
    for (size_t i = 0; i < v.rectified_roi.size(); ++i)
    {
      s << indent << "  rectified_roi[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrafficLightBox_<ContainerAllocator> >::stream(s, indent + "    ", v.rectified_roi[i]);
    }
    s << indent << "debug_roi[]" << std::endl;
    for (size_t i = 0; i < v.debug_roi.size(); ++i)
    {
      s << indent << "  debug_roi[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrafficLightBox_<ContainerAllocator> >::stream(s, indent + "    ", v.debug_roi[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_TRAFFICLIGHTDEBUG_H
