// Generated by gencpp from file ros_interface/HolisticPathPrediction.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_HOLISTICPATHPREDICTION_H
#define ROS_INTERFACE_MESSAGE_HOLISTICPATHPREDICTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/LaneLineCubicCurve.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct HolisticPathPrediction_
{
  typedef HolisticPathPrediction_<ContainerAllocator> Type;

  HolisticPathPrediction_()
    : hpp()
    , planning_source(0)
    , ego_lane_width(0.0)
    , confidence(0.0)  {
    }
  HolisticPathPrediction_(const ContainerAllocator& _alloc)
    : hpp(_alloc)
    , planning_source(0)
    , ego_lane_width(0.0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::LaneLineCubicCurve_<ContainerAllocator>  _hpp_type;
  _hpp_type hpp;

   typedef int32_t _planning_source_type;
  _planning_source_type planning_source;

   typedef double _ego_lane_width_type;
  _ego_lane_width_type ego_lane_width;

   typedef double _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> const> ConstPtr;

}; // struct HolisticPathPrediction_

typedef ::ros_interface::HolisticPathPrediction_<std::allocator<void> > HolisticPathPrediction;

typedef boost::shared_ptr< ::ros_interface::HolisticPathPrediction > HolisticPathPredictionPtr;
typedef boost::shared_ptr< ::ros_interface::HolisticPathPrediction const> HolisticPathPredictionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::HolisticPathPrediction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::HolisticPathPrediction_<ContainerAllocator1> & lhs, const ::ros_interface::HolisticPathPrediction_<ContainerAllocator2> & rhs)
{
  return lhs.hpp == rhs.hpp &&
    lhs.planning_source == rhs.planning_source &&
    lhs.ego_lane_width == rhs.ego_lane_width &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::HolisticPathPrediction_<ContainerAllocator1> & lhs, const ::ros_interface::HolisticPathPrediction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a3802277f8181f1f0dd82eebaecee41";
  }

  static const char* value(const ::ros_interface::HolisticPathPrediction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a3802277f8181f1ULL;
  static const uint64_t static_value2 = 0xf0dd82eebaecee41ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/HolisticPathPrediction";
  }

  static const char* value(const ::ros_interface::HolisticPathPrediction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LaneLineCubicCurve   hpp     # 行驶路径预测： 1、针对没有车道线等特殊路段如：收费站附近、进出匝道附近、 维修区域附近，可以虚拟出可行驶路径预测； 2、针对车辆遮挡的区域，可以虚拟出可行驶路径预测；\n"
"int32   planning_source     # 规划路径来源:  0 - invalid,  1 - 双侧车道线,  2 - 左侧车道线,  3 - 右侧车道线, 4 - 左侧路沿，  5 - 右侧路沿， 6 - 前车轨迹，  7 - freespace, 8 - 本车轨迹预测\n"
"float64   ego_lane_width     # 自车道宽度\n"
"float64   confidence     # 置信度[0 - 1]\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/LaneLineCubicCurve\n"
"float64   start_x     # 车道线起始位置\n"
"float64   end_x     # 车道线结束位置\n"
"float64   a     # 三次曲线系数\n"
"float64   b     #  \n"
"float64   c     #  \n"
"float64   d     #  \n"
;
  }

  static const char* value(const ::ros_interface::HolisticPathPrediction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hpp);
      stream.next(m.planning_source);
      stream.next(m.ego_lane_width);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HolisticPathPrediction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::HolisticPathPrediction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::HolisticPathPrediction_<ContainerAllocator>& v)
  {
    s << indent << "hpp: ";
    s << std::endl;
    Printer< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >::stream(s, indent + "  ", v.hpp);
    s << indent << "planning_source: ";
    Printer<int32_t>::stream(s, indent + "  ", v.planning_source);
    s << indent << "ego_lane_width: ";
    Printer<double>::stream(s, indent + "  ", v.ego_lane_width);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_HOLISTICPATHPREDICTION_H
