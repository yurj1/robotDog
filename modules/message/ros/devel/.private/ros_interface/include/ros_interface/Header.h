// Generated by gencpp from file ros_interface/Header.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_HEADER_H
#define ROS_INTERFACE_MESSAGE_HEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Time.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Header_
{
  typedef Header_<ContainerAllocator> Type;

  Header_()
    : seq(0)
    , stamp()
    , frame_id()  {
    }
  Header_(const ContainerAllocator& _alloc)
    : seq(0)
    , stamp(_alloc)
    , frame_id(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef  ::ros_interface::Time_<ContainerAllocator>  _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;





  typedef boost::shared_ptr< ::ros_interface::Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Header_<ContainerAllocator> const> ConstPtr;

}; // struct Header_

typedef ::ros_interface::Header_<std::allocator<void> > Header;

typedef boost::shared_ptr< ::ros_interface::Header > HeaderPtr;
typedef boost::shared_ptr< ::ros_interface::Header const> HeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Header_<ContainerAllocator1> & lhs, const ::ros_interface::Header_<ContainerAllocator2> & rhs)
{
  return lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.frame_id == rhs.frame_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Header_<ContainerAllocator1> & lhs, const ::ros_interface::Header_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Header_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3695c7678a2b8f86015eccf2f844688c";
  }

  static const char* value(const ::ros_interface::Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3695c7678a2b8f86ULL;
  static const uint64_t static_value2 = 0x015eccf2f844688cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Header";
  }

  static const char* value(const ::ros_interface::Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32   seq     # Sequence number for each message. Each module maintains its own counter for sequence_num, always starting from 1 on boot.\n"
"Time   stamp     # 时间戳\n"
"string   frame_id     # 帧id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Time\n"
"uint32   sec     # 秒\n"
"uint32   nsec     # 纳秒\n"
;
  }

  static const char* value(const ::ros_interface::Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Header_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    s << std::endl;
    Printer< ::ros_interface::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_HEADER_H
