// Generated by gencpp from file ros_interface/EndPoints.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_ENDPOINTS_H
#define ROS_INTERFACE_MESSAGE_ENDPOINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct EndPoints_
{
  typedef EndPoints_<ContainerAllocator> Type;

  EndPoints_()
    : start()
    , end()  {
    }
  EndPoints_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , end(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _end_type;
  _end_type end;





  typedef boost::shared_ptr< ::ros_interface::EndPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::EndPoints_<ContainerAllocator> const> ConstPtr;

}; // struct EndPoints_

typedef ::ros_interface::EndPoints_<std::allocator<void> > EndPoints;

typedef boost::shared_ptr< ::ros_interface::EndPoints > EndPointsPtr;
typedef boost::shared_ptr< ::ros_interface::EndPoints const> EndPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::EndPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::EndPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::EndPoints_<ContainerAllocator1> & lhs, const ::ros_interface::EndPoints_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.end == rhs.end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::EndPoints_<ContainerAllocator1> & lhs, const ::ros_interface::EndPoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::EndPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::EndPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::EndPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::EndPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::EndPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::EndPoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::EndPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "485e3b7bfcfe5392ca8833381629557b";
  }

  static const char* value(const ::ros_interface::EndPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x485e3b7bfcfe5392ULL;
  static const uint64_t static_value2 = 0xca8833381629557bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::EndPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/EndPoints";
  }

  static const char* value(const ::ros_interface::EndPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::EndPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point2D   start     # 车道线上顶点\n"
"Point2D   end     # 车道线下顶点\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point2D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
;
  }

  static const char* value(const ::ros_interface::EndPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::EndPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EndPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::EndPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::EndPoints_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_ENDPOINTS_H
