// Generated by gencpp from file ros_interface/VehicleParam.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_VEHICLEPARAM_H
#define ROS_INTERFACE_MESSAGE_VEHICLEPARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct VehicleParam_
{
  typedef VehicleParam_<ContainerAllocator> Type;

  VehicleParam_()
    : brand()
    , steer_mode(0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , mass_fl(0.0)
    , mass_fr(0.0)
    , mass_rl(0.0)
    , mass_rr(0.0)
    , wheel_radius(0.0)
    , wheelbase(0.0)
    , front_edge_to_center(0.0)
    , back_edge_to_center(0.0)
    , lf(0.0)
    , lr(0.0)
    , cf(0.0)
    , cr(0.0)
    , steer_ratio(0.0)
    , rolling_coefficient(0.0)
    , air_density(0.0)
    , air_damping_coefficient(0.0)
    , max_front_steer_angle(0.0)
    , min_front_steer_angle(0.0)
    , max_rear_steer_angle(0.0)
    , min_rear_steer_angle(0.0)
    , speed_limit(0.0)
    , max_brake_value(0.0)
    , min_brake_value(0.0)
    , max_accel_value(0.0)
    , min_accel_value(0.0)
    , speed_deadzone(0.0)
    , standstill_acceleration(0.0)
    , max_front_steer_angle_rate(0.0)
    , max_rear_steer_angle_rate(0.0)
    , max_abs_speed_when_stopped(0.0)
    , max_abs_speed_when_stopped_duration(0.0)
    , brake_value_when_gear_transitioning(0.0)
    , accel_deadzone(0.0)
    , brake_deadzone(0.0)
    , acceleration_in_idle(0.0)
    , deceleration_in_idle(0.0)
    , max_acceleration_jerk(0.0)
    , max_acceleration(0.0)
    , max_deceleration(0.0)
    , min_turning_radius(0.0)  {
    }
  VehicleParam_(const ContainerAllocator& _alloc)
    : brand(_alloc)
    , steer_mode(0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , mass_fl(0.0)
    , mass_fr(0.0)
    , mass_rl(0.0)
    , mass_rr(0.0)
    , wheel_radius(0.0)
    , wheelbase(0.0)
    , front_edge_to_center(0.0)
    , back_edge_to_center(0.0)
    , lf(0.0)
    , lr(0.0)
    , cf(0.0)
    , cr(0.0)
    , steer_ratio(0.0)
    , rolling_coefficient(0.0)
    , air_density(0.0)
    , air_damping_coefficient(0.0)
    , max_front_steer_angle(0.0)
    , min_front_steer_angle(0.0)
    , max_rear_steer_angle(0.0)
    , min_rear_steer_angle(0.0)
    , speed_limit(0.0)
    , max_brake_value(0.0)
    , min_brake_value(0.0)
    , max_accel_value(0.0)
    , min_accel_value(0.0)
    , speed_deadzone(0.0)
    , standstill_acceleration(0.0)
    , max_front_steer_angle_rate(0.0)
    , max_rear_steer_angle_rate(0.0)
    , max_abs_speed_when_stopped(0.0)
    , max_abs_speed_when_stopped_duration(0.0)
    , brake_value_when_gear_transitioning(0.0)
    , accel_deadzone(0.0)
    , brake_deadzone(0.0)
    , acceleration_in_idle(0.0)
    , deceleration_in_idle(0.0)
    , max_acceleration_jerk(0.0)
    , max_acceleration(0.0)
    , max_deceleration(0.0)
    , min_turning_radius(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _brand_type;
  _brand_type brand;

   typedef int32_t _steer_mode_type;
  _steer_mode_type steer_mode;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef double _mass_fl_type;
  _mass_fl_type mass_fl;

   typedef double _mass_fr_type;
  _mass_fr_type mass_fr;

   typedef double _mass_rl_type;
  _mass_rl_type mass_rl;

   typedef double _mass_rr_type;
  _mass_rr_type mass_rr;

   typedef double _wheel_radius_type;
  _wheel_radius_type wheel_radius;

   typedef double _wheelbase_type;
  _wheelbase_type wheelbase;

   typedef double _front_edge_to_center_type;
  _front_edge_to_center_type front_edge_to_center;

   typedef double _back_edge_to_center_type;
  _back_edge_to_center_type back_edge_to_center;

   typedef double _lf_type;
  _lf_type lf;

   typedef double _lr_type;
  _lr_type lr;

   typedef double _cf_type;
  _cf_type cf;

   typedef double _cr_type;
  _cr_type cr;

   typedef double _steer_ratio_type;
  _steer_ratio_type steer_ratio;

   typedef double _rolling_coefficient_type;
  _rolling_coefficient_type rolling_coefficient;

   typedef double _air_density_type;
  _air_density_type air_density;

   typedef double _air_damping_coefficient_type;
  _air_damping_coefficient_type air_damping_coefficient;

   typedef double _max_front_steer_angle_type;
  _max_front_steer_angle_type max_front_steer_angle;

   typedef double _min_front_steer_angle_type;
  _min_front_steer_angle_type min_front_steer_angle;

   typedef double _max_rear_steer_angle_type;
  _max_rear_steer_angle_type max_rear_steer_angle;

   typedef double _min_rear_steer_angle_type;
  _min_rear_steer_angle_type min_rear_steer_angle;

   typedef double _speed_limit_type;
  _speed_limit_type speed_limit;

   typedef double _max_brake_value_type;
  _max_brake_value_type max_brake_value;

   typedef double _min_brake_value_type;
  _min_brake_value_type min_brake_value;

   typedef double _max_accel_value_type;
  _max_accel_value_type max_accel_value;

   typedef double _min_accel_value_type;
  _min_accel_value_type min_accel_value;

   typedef double _speed_deadzone_type;
  _speed_deadzone_type speed_deadzone;

   typedef double _standstill_acceleration_type;
  _standstill_acceleration_type standstill_acceleration;

   typedef double _max_front_steer_angle_rate_type;
  _max_front_steer_angle_rate_type max_front_steer_angle_rate;

   typedef double _max_rear_steer_angle_rate_type;
  _max_rear_steer_angle_rate_type max_rear_steer_angle_rate;

   typedef double _max_abs_speed_when_stopped_type;
  _max_abs_speed_when_stopped_type max_abs_speed_when_stopped;

   typedef double _max_abs_speed_when_stopped_duration_type;
  _max_abs_speed_when_stopped_duration_type max_abs_speed_when_stopped_duration;

   typedef double _brake_value_when_gear_transitioning_type;
  _brake_value_when_gear_transitioning_type brake_value_when_gear_transitioning;

   typedef double _accel_deadzone_type;
  _accel_deadzone_type accel_deadzone;

   typedef double _brake_deadzone_type;
  _brake_deadzone_type brake_deadzone;

   typedef double _acceleration_in_idle_type;
  _acceleration_in_idle_type acceleration_in_idle;

   typedef double _deceleration_in_idle_type;
  _deceleration_in_idle_type deceleration_in_idle;

   typedef double _max_acceleration_jerk_type;
  _max_acceleration_jerk_type max_acceleration_jerk;

   typedef double _max_acceleration_type;
  _max_acceleration_type max_acceleration;

   typedef double _max_deceleration_type;
  _max_deceleration_type max_deceleration;

   typedef double _min_turning_radius_type;
  _min_turning_radius_type min_turning_radius;





  typedef boost::shared_ptr< ::ros_interface::VehicleParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::VehicleParam_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleParam_

typedef ::ros_interface::VehicleParam_<std::allocator<void> > VehicleParam;

typedef boost::shared_ptr< ::ros_interface::VehicleParam > VehicleParamPtr;
typedef boost::shared_ptr< ::ros_interface::VehicleParam const> VehicleParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::VehicleParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::VehicleParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::VehicleParam_<ContainerAllocator1> & lhs, const ::ros_interface::VehicleParam_<ContainerAllocator2> & rhs)
{
  return lhs.brand == rhs.brand &&
    lhs.steer_mode == rhs.steer_mode &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.mass_fl == rhs.mass_fl &&
    lhs.mass_fr == rhs.mass_fr &&
    lhs.mass_rl == rhs.mass_rl &&
    lhs.mass_rr == rhs.mass_rr &&
    lhs.wheel_radius == rhs.wheel_radius &&
    lhs.wheelbase == rhs.wheelbase &&
    lhs.front_edge_to_center == rhs.front_edge_to_center &&
    lhs.back_edge_to_center == rhs.back_edge_to_center &&
    lhs.lf == rhs.lf &&
    lhs.lr == rhs.lr &&
    lhs.cf == rhs.cf &&
    lhs.cr == rhs.cr &&
    lhs.steer_ratio == rhs.steer_ratio &&
    lhs.rolling_coefficient == rhs.rolling_coefficient &&
    lhs.air_density == rhs.air_density &&
    lhs.air_damping_coefficient == rhs.air_damping_coefficient &&
    lhs.max_front_steer_angle == rhs.max_front_steer_angle &&
    lhs.min_front_steer_angle == rhs.min_front_steer_angle &&
    lhs.max_rear_steer_angle == rhs.max_rear_steer_angle &&
    lhs.min_rear_steer_angle == rhs.min_rear_steer_angle &&
    lhs.speed_limit == rhs.speed_limit &&
    lhs.max_brake_value == rhs.max_brake_value &&
    lhs.min_brake_value == rhs.min_brake_value &&
    lhs.max_accel_value == rhs.max_accel_value &&
    lhs.min_accel_value == rhs.min_accel_value &&
    lhs.speed_deadzone == rhs.speed_deadzone &&
    lhs.standstill_acceleration == rhs.standstill_acceleration &&
    lhs.max_front_steer_angle_rate == rhs.max_front_steer_angle_rate &&
    lhs.max_rear_steer_angle_rate == rhs.max_rear_steer_angle_rate &&
    lhs.max_abs_speed_when_stopped == rhs.max_abs_speed_when_stopped &&
    lhs.max_abs_speed_when_stopped_duration == rhs.max_abs_speed_when_stopped_duration &&
    lhs.brake_value_when_gear_transitioning == rhs.brake_value_when_gear_transitioning &&
    lhs.accel_deadzone == rhs.accel_deadzone &&
    lhs.brake_deadzone == rhs.brake_deadzone &&
    lhs.acceleration_in_idle == rhs.acceleration_in_idle &&
    lhs.deceleration_in_idle == rhs.deceleration_in_idle &&
    lhs.max_acceleration_jerk == rhs.max_acceleration_jerk &&
    lhs.max_acceleration == rhs.max_acceleration &&
    lhs.max_deceleration == rhs.max_deceleration &&
    lhs.min_turning_radius == rhs.min_turning_radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::VehicleParam_<ContainerAllocator1> & lhs, const ::ros_interface::VehicleParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::VehicleParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::VehicleParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::VehicleParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::VehicleParam_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::VehicleParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::VehicleParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::VehicleParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af312f82f3e9c18a66abf5e713a2f676";
  }

  static const char* value(const ::ros_interface::VehicleParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf312f82f3e9c18aULL;
  static const uint64_t static_value2 = 0x66abf5e713a2f676ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::VehicleParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/VehicleParam";
  }

  static const char* value(const ::ros_interface::VehicleParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::VehicleParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string   brand     #  \n"
"int32   steer_mode     #  \n"
"float64   length     #  \n"
"float64   width     #  \n"
"float64   height     #  \n"
"float64   mass_fl     #  \n"
"float64   mass_fr     #  \n"
"float64   mass_rl     #  \n"
"float64   mass_rr     #  \n"
"float64   wheel_radius     #  \n"
"float64   wheelbase     #  \n"
"float64   front_edge_to_center     #  \n"
"float64   back_edge_to_center     #  \n"
"float64   lf     #  \n"
"float64   lr     #  \n"
"float64   cf     #  \n"
"float64   cr     #  \n"
"float64   steer_ratio     #  \n"
"float64   rolling_coefficient     #  \n"
"float64   air_density     #  \n"
"float64   air_damping_coefficient     #  \n"
"float64   max_front_steer_angle     #  \n"
"float64   min_front_steer_angle     #  \n"
"float64   max_rear_steer_angle     #  \n"
"float64   min_rear_steer_angle     #  \n"
"float64   speed_limit     #  \n"
"float64   max_brake_value     #  \n"
"float64   min_brake_value     #  \n"
"float64   max_accel_value     #  \n"
"float64   min_accel_value     #  \n"
"float64   speed_deadzone     #  \n"
"float64   standstill_acceleration     #  \n"
"float64   max_front_steer_angle_rate     #  \n"
"float64   max_rear_steer_angle_rate     #  \n"
"float64   max_abs_speed_when_stopped     #  \n"
"float64   max_abs_speed_when_stopped_duration     #  \n"
"float64   brake_value_when_gear_transitioning     #  \n"
"float64   accel_deadzone     #  \n"
"float64   brake_deadzone     #  \n"
"float64   acceleration_in_idle     #  \n"
"float64   deceleration_in_idle     #  \n"
"float64   max_acceleration_jerk     #  \n"
"float64   max_acceleration     #  \n"
"float64   max_deceleration     #  \n"
"float64   min_turning_radius     #  \n"
;
  }

  static const char* value(const ::ros_interface::VehicleParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::VehicleParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.brand);
      stream.next(m.steer_mode);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.mass_fl);
      stream.next(m.mass_fr);
      stream.next(m.mass_rl);
      stream.next(m.mass_rr);
      stream.next(m.wheel_radius);
      stream.next(m.wheelbase);
      stream.next(m.front_edge_to_center);
      stream.next(m.back_edge_to_center);
      stream.next(m.lf);
      stream.next(m.lr);
      stream.next(m.cf);
      stream.next(m.cr);
      stream.next(m.steer_ratio);
      stream.next(m.rolling_coefficient);
      stream.next(m.air_density);
      stream.next(m.air_damping_coefficient);
      stream.next(m.max_front_steer_angle);
      stream.next(m.min_front_steer_angle);
      stream.next(m.max_rear_steer_angle);
      stream.next(m.min_rear_steer_angle);
      stream.next(m.speed_limit);
      stream.next(m.max_brake_value);
      stream.next(m.min_brake_value);
      stream.next(m.max_accel_value);
      stream.next(m.min_accel_value);
      stream.next(m.speed_deadzone);
      stream.next(m.standstill_acceleration);
      stream.next(m.max_front_steer_angle_rate);
      stream.next(m.max_rear_steer_angle_rate);
      stream.next(m.max_abs_speed_when_stopped);
      stream.next(m.max_abs_speed_when_stopped_duration);
      stream.next(m.brake_value_when_gear_transitioning);
      stream.next(m.accel_deadzone);
      stream.next(m.brake_deadzone);
      stream.next(m.acceleration_in_idle);
      stream.next(m.deceleration_in_idle);
      stream.next(m.max_acceleration_jerk);
      stream.next(m.max_acceleration);
      stream.next(m.max_deceleration);
      stream.next(m.min_turning_radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::VehicleParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::VehicleParam_<ContainerAllocator>& v)
  {
    s << indent << "brand: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.brand);
    s << indent << "steer_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_mode);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "mass_fl: ";
    Printer<double>::stream(s, indent + "  ", v.mass_fl);
    s << indent << "mass_fr: ";
    Printer<double>::stream(s, indent + "  ", v.mass_fr);
    s << indent << "mass_rl: ";
    Printer<double>::stream(s, indent + "  ", v.mass_rl);
    s << indent << "mass_rr: ";
    Printer<double>::stream(s, indent + "  ", v.mass_rr);
    s << indent << "wheel_radius: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_radius);
    s << indent << "wheelbase: ";
    Printer<double>::stream(s, indent + "  ", v.wheelbase);
    s << indent << "front_edge_to_center: ";
    Printer<double>::stream(s, indent + "  ", v.front_edge_to_center);
    s << indent << "back_edge_to_center: ";
    Printer<double>::stream(s, indent + "  ", v.back_edge_to_center);
    s << indent << "lf: ";
    Printer<double>::stream(s, indent + "  ", v.lf);
    s << indent << "lr: ";
    Printer<double>::stream(s, indent + "  ", v.lr);
    s << indent << "cf: ";
    Printer<double>::stream(s, indent + "  ", v.cf);
    s << indent << "cr: ";
    Printer<double>::stream(s, indent + "  ", v.cr);
    s << indent << "steer_ratio: ";
    Printer<double>::stream(s, indent + "  ", v.steer_ratio);
    s << indent << "rolling_coefficient: ";
    Printer<double>::stream(s, indent + "  ", v.rolling_coefficient);
    s << indent << "air_density: ";
    Printer<double>::stream(s, indent + "  ", v.air_density);
    s << indent << "air_damping_coefficient: ";
    Printer<double>::stream(s, indent + "  ", v.air_damping_coefficient);
    s << indent << "max_front_steer_angle: ";
    Printer<double>::stream(s, indent + "  ", v.max_front_steer_angle);
    s << indent << "min_front_steer_angle: ";
    Printer<double>::stream(s, indent + "  ", v.min_front_steer_angle);
    s << indent << "max_rear_steer_angle: ";
    Printer<double>::stream(s, indent + "  ", v.max_rear_steer_angle);
    s << indent << "min_rear_steer_angle: ";
    Printer<double>::stream(s, indent + "  ", v.min_rear_steer_angle);
    s << indent << "speed_limit: ";
    Printer<double>::stream(s, indent + "  ", v.speed_limit);
    s << indent << "max_brake_value: ";
    Printer<double>::stream(s, indent + "  ", v.max_brake_value);
    s << indent << "min_brake_value: ";
    Printer<double>::stream(s, indent + "  ", v.min_brake_value);
    s << indent << "max_accel_value: ";
    Printer<double>::stream(s, indent + "  ", v.max_accel_value);
    s << indent << "min_accel_value: ";
    Printer<double>::stream(s, indent + "  ", v.min_accel_value);
    s << indent << "speed_deadzone: ";
    Printer<double>::stream(s, indent + "  ", v.speed_deadzone);
    s << indent << "standstill_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.standstill_acceleration);
    s << indent << "max_front_steer_angle_rate: ";
    Printer<double>::stream(s, indent + "  ", v.max_front_steer_angle_rate);
    s << indent << "max_rear_steer_angle_rate: ";
    Printer<double>::stream(s, indent + "  ", v.max_rear_steer_angle_rate);
    s << indent << "max_abs_speed_when_stopped: ";
    Printer<double>::stream(s, indent + "  ", v.max_abs_speed_when_stopped);
    s << indent << "max_abs_speed_when_stopped_duration: ";
    Printer<double>::stream(s, indent + "  ", v.max_abs_speed_when_stopped_duration);
    s << indent << "brake_value_when_gear_transitioning: ";
    Printer<double>::stream(s, indent + "  ", v.brake_value_when_gear_transitioning);
    s << indent << "accel_deadzone: ";
    Printer<double>::stream(s, indent + "  ", v.accel_deadzone);
    s << indent << "brake_deadzone: ";
    Printer<double>::stream(s, indent + "  ", v.brake_deadzone);
    s << indent << "acceleration_in_idle: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_in_idle);
    s << indent << "deceleration_in_idle: ";
    Printer<double>::stream(s, indent + "  ", v.deceleration_in_idle);
    s << indent << "max_acceleration_jerk: ";
    Printer<double>::stream(s, indent + "  ", v.max_acceleration_jerk);
    s << indent << "max_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.max_acceleration);
    s << indent << "max_deceleration: ";
    Printer<double>::stream(s, indent + "  ", v.max_deceleration);
    s << indent << "min_turning_radius: ";
    Printer<double>::stream(s, indent + "  ", v.min_turning_radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_VEHICLEPARAM_H
