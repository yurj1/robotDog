// Generated by gencpp from file ros_interface/Faults.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_FAULTS_H
#define ROS_INTERFACE_MESSAGE_FAULTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Fault.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Faults_
{
  typedef Faults_<ContainerAllocator> Type;

  Faults_()
    : header()
    , version(0)
    , app_id(0)
    , is_active(false)
    , faults()  {
    }
  Faults_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , version(0)
    , app_id(0)
    , is_active(false)
    , faults(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _version_type;
  _version_type version;

   typedef int32_t _app_id_type;
  _app_id_type app_id;

   typedef uint8_t _is_active_type;
  _is_active_type is_active;

   typedef std::vector< ::ros_interface::Fault_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Fault_<ContainerAllocator> >> _faults_type;
  _faults_type faults;





  typedef boost::shared_ptr< ::ros_interface::Faults_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Faults_<ContainerAllocator> const> ConstPtr;

}; // struct Faults_

typedef ::ros_interface::Faults_<std::allocator<void> > Faults;

typedef boost::shared_ptr< ::ros_interface::Faults > FaultsPtr;
typedef boost::shared_ptr< ::ros_interface::Faults const> FaultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Faults_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Faults_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Faults_<ContainerAllocator1> & lhs, const ::ros_interface::Faults_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.version == rhs.version &&
    lhs.app_id == rhs.app_id &&
    lhs.is_active == rhs.is_active &&
    lhs.faults == rhs.faults;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Faults_<ContainerAllocator1> & lhs, const ::ros_interface::Faults_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Faults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Faults_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Faults_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Faults_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Faults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Faults_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Faults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b11ea54ef0a0c41706887becbb1308cb";
  }

  static const char* value(const ::ros_interface::Faults_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb11ea54ef0a0c417ULL;
  static const uint64_t static_value2 = 0x06887becbb1308cbULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Faults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Faults";
  }

  static const char* value(const ::ros_interface::Faults_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Faults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # 消息头\n"
"int32   version     # 版本号\n"
"int32   app_id     # 应用app所分配的id\n"
"bool   is_active     # 应用是否激活，激活为true，未激活为false\n"
"Fault[] faults # 故障集\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Fault\n"
"Time   timestamp     # 时间戳\n"
"uint64   code     # 故障码\n"
"string   reason     # 原因\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Time\n"
"uint32   sec     # 秒\n"
"uint32   nsec     # 纳秒\n"
;
  }

  static const char* value(const ::ros_interface::Faults_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Faults_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.version);
      stream.next(m.app_id);
      stream.next(m.is_active);
      stream.next(m.faults);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Faults_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Faults_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Faults_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "version: ";
    Printer<int32_t>::stream(s, indent + "  ", v.version);
    s << indent << "app_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.app_id);
    s << indent << "is_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_active);
    s << indent << "faults[]" << std::endl;
    for (size_t i = 0; i < v.faults.size(); ++i)
    {
      s << indent << "  faults[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Fault_<ContainerAllocator> >::stream(s, indent + "    ", v.faults[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_FAULTS_H
