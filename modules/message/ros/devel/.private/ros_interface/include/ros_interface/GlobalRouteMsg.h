// Generated by gencpp from file ros_interface/GlobalRouteMsg.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_GLOBALROUTEMSG_H
#define ROS_INTERFACE_MESSAGE_GLOBALROUTEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/LaneletInfo.h>
#include <ros_interface/LaneletInfo.h>
#include <ros_interface/LaneletInfo.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct GlobalRouteMsg_
{
  typedef GlobalRouteMsg_<ContainerAllocator> Type;

  GlobalRouteMsg_()
    : header()
    , route()
    , current_lanelet()
    , total_mileage(0.0)
    , cur_mileage(0.0)
    , cur_slice()  {
    }
  GlobalRouteMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , route(_alloc)
    , current_lanelet(_alloc)
    , total_mileage(0.0)
    , cur_mileage(0.0)
    , cur_slice(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::LaneletInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::LaneletInfo_<ContainerAllocator> >> _route_type;
  _route_type route;

   typedef  ::ros_interface::LaneletInfo_<ContainerAllocator>  _current_lanelet_type;
  _current_lanelet_type current_lanelet;

   typedef double _total_mileage_type;
  _total_mileage_type total_mileage;

   typedef double _cur_mileage_type;
  _cur_mileage_type cur_mileage;

   typedef std::vector< ::ros_interface::LaneletInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::LaneletInfo_<ContainerAllocator> >> _cur_slice_type;
  _cur_slice_type cur_slice;





  typedef boost::shared_ptr< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalRouteMsg_

typedef ::ros_interface::GlobalRouteMsg_<std::allocator<void> > GlobalRouteMsg;

typedef boost::shared_ptr< ::ros_interface::GlobalRouteMsg > GlobalRouteMsgPtr;
typedef boost::shared_ptr< ::ros_interface::GlobalRouteMsg const> GlobalRouteMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::GlobalRouteMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::GlobalRouteMsg_<ContainerAllocator1> & lhs, const ::ros_interface::GlobalRouteMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.route == rhs.route &&
    lhs.current_lanelet == rhs.current_lanelet &&
    lhs.total_mileage == rhs.total_mileage &&
    lhs.cur_mileage == rhs.cur_mileage &&
    lhs.cur_slice == rhs.cur_slice;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::GlobalRouteMsg_<ContainerAllocator1> & lhs, const ::ros_interface::GlobalRouteMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a9de06349ba12c560c2c024a6bcece7";
  }

  static const char* value(const ::ros_interface::GlobalRouteMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a9de06349ba12c5ULL;
  static const uint64_t static_value2 = 0x60c2c024a6bcece7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/GlobalRouteMsg";
  }

  static const char* value(const ::ros_interface::GlobalRouteMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # 消息头\n"
"LaneletInfo[] route # 一次导航的全程道路集合，从起点到终点排序\n"
"LaneletInfo   current_lanelet     # 当前所在车道的信息\n"
"float64   total_mileage     # 总里程\n"
"float64   cur_mileage     # 当前里程\n"
"LaneletInfo[] cur_slice # 当前地图切片,用来绘制局部地图\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/LaneletInfo\n"
"int32   lanelet_id     # 道路id，与地图文件对应\n"
"float64   length     # 道路长度\n"
;
  }

  static const char* value(const ::ros_interface::GlobalRouteMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.route);
      stream.next(m.current_lanelet);
      stream.next(m.total_mileage);
      stream.next(m.cur_mileage);
      stream.next(m.cur_slice);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalRouteMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::GlobalRouteMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::GlobalRouteMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "route[]" << std::endl;
    for (size_t i = 0; i < v.route.size(); ++i)
    {
      s << indent << "  route[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::LaneletInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.route[i]);
    }
    s << indent << "current_lanelet: ";
    s << std::endl;
    Printer< ::ros_interface::LaneletInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.current_lanelet);
    s << indent << "total_mileage: ";
    Printer<double>::stream(s, indent + "  ", v.total_mileage);
    s << indent << "cur_mileage: ";
    Printer<double>::stream(s, indent + "  ", v.cur_mileage);
    s << indent << "cur_slice[]" << std::endl;
    for (size_t i = 0; i < v.cur_slice.size(); ++i)
    {
      s << indent << "  cur_slice[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::LaneletInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.cur_slice[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_GLOBALROUTEMSG_H
