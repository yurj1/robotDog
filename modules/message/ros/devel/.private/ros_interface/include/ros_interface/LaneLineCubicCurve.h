// Generated by gencpp from file ros_interface/LaneLineCubicCurve.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_LANELINECUBICCURVE_H
#define ROS_INTERFACE_MESSAGE_LANELINECUBICCURVE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct LaneLineCubicCurve_
{
  typedef LaneLineCubicCurve_<ContainerAllocator> Type;

  LaneLineCubicCurve_()
    : start_x(0.0)
    , end_x(0.0)
    , a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)  {
    }
  LaneLineCubicCurve_(const ContainerAllocator& _alloc)
    : start_x(0.0)
    , end_x(0.0)
    , a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)  {
  (void)_alloc;
    }



   typedef double _start_x_type;
  _start_x_type start_x;

   typedef double _end_x_type;
  _end_x_type end_x;

   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;

   typedef double _c_type;
  _c_type c;

   typedef double _d_type;
  _d_type d;





  typedef boost::shared_ptr< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> const> ConstPtr;

}; // struct LaneLineCubicCurve_

typedef ::ros_interface::LaneLineCubicCurve_<std::allocator<void> > LaneLineCubicCurve;

typedef boost::shared_ptr< ::ros_interface::LaneLineCubicCurve > LaneLineCubicCurvePtr;
typedef boost::shared_ptr< ::ros_interface::LaneLineCubicCurve const> LaneLineCubicCurveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::LaneLineCubicCurve_<ContainerAllocator1> & lhs, const ::ros_interface::LaneLineCubicCurve_<ContainerAllocator2> & rhs)
{
  return lhs.start_x == rhs.start_x &&
    lhs.end_x == rhs.end_x &&
    lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.c == rhs.c &&
    lhs.d == rhs.d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::LaneLineCubicCurve_<ContainerAllocator1> & lhs, const ::ros_interface::LaneLineCubicCurve_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e94886c488278072d4c339f97356ea0";
  }

  static const char* value(const ::ros_interface::LaneLineCubicCurve_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e94886c48827807ULL;
  static const uint64_t static_value2 = 0x2d4c339f97356ea0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/LaneLineCubicCurve";
  }

  static const char* value(const ::ros_interface::LaneLineCubicCurve_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64   start_x     # 车道线起始位置\n"
"float64   end_x     # 车道线结束位置\n"
"float64   a     # 三次曲线系数\n"
"float64   b     #  \n"
"float64   c     #  \n"
"float64   d     #  \n"
;
  }

  static const char* value(const ::ros_interface::LaneLineCubicCurve_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_x);
      stream.next(m.end_x);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
      stream.next(m.d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneLineCubicCurve_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::LaneLineCubicCurve_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::LaneLineCubicCurve_<ContainerAllocator>& v)
  {
    s << indent << "start_x: ";
    Printer<double>::stream(s, indent + "  ", v.start_x);
    s << indent << "end_x: ";
    Printer<double>::stream(s, indent + "  ", v.end_x);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<double>::stream(s, indent + "  ", v.c);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_LANELINECUBICCURVE_H
