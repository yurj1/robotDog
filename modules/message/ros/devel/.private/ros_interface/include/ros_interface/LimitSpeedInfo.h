// Generated by gencpp from file ros_interface/LimitSpeedInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_LIMITSPEEDINFO_H
#define ROS_INTERFACE_MESSAGE_LIMITSPEEDINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct LimitSpeedInfo_
{
  typedef LimitSpeedInfo_<ContainerAllocator> Type;

  LimitSpeedInfo_()
    : limitspeed_valid_flag(0)
    , limit_speed(0.0)
    , limit_distance(0.0)  {
    }
  LimitSpeedInfo_(const ContainerAllocator& _alloc)
    : limitspeed_valid_flag(0)
    , limit_speed(0.0)
    , limit_distance(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _limitspeed_valid_flag_type;
  _limitspeed_valid_flag_type limitspeed_valid_flag;

   typedef double _limit_speed_type;
  _limit_speed_type limit_speed;

   typedef double _limit_distance_type;
  _limit_distance_type limit_distance;





  typedef boost::shared_ptr< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> const> ConstPtr;

}; // struct LimitSpeedInfo_

typedef ::ros_interface::LimitSpeedInfo_<std::allocator<void> > LimitSpeedInfo;

typedef boost::shared_ptr< ::ros_interface::LimitSpeedInfo > LimitSpeedInfoPtr;
typedef boost::shared_ptr< ::ros_interface::LimitSpeedInfo const> LimitSpeedInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::LimitSpeedInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::LimitSpeedInfo_<ContainerAllocator1> & lhs, const ::ros_interface::LimitSpeedInfo_<ContainerAllocator2> & rhs)
{
  return lhs.limitspeed_valid_flag == rhs.limitspeed_valid_flag &&
    lhs.limit_speed == rhs.limit_speed &&
    lhs.limit_distance == rhs.limit_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::LimitSpeedInfo_<ContainerAllocator1> & lhs, const ::ros_interface::LimitSpeedInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60f4e9d159cc502ec9c6b727aad50d08";
  }

  static const char* value(const ::ros_interface::LimitSpeedInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60f4e9d159cc502eULL;
  static const uint64_t static_value2 = 0xc9c6b727aad50d08ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/LimitSpeedInfo";
  }

  static const char* value(const ::ros_interface::LimitSpeedInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   limitspeed_valid_flag     # 限速有效性标志位\n"
"float64   limit_speed     # 限速大小（m/s）\n"
"float64   limit_distance     # 开始减速距离(m)\n"
;
  }

  static const char* value(const ::ros_interface::LimitSpeedInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.limitspeed_valid_flag);
      stream.next(m.limit_speed);
      stream.next(m.limit_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LimitSpeedInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::LimitSpeedInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::LimitSpeedInfo_<ContainerAllocator>& v)
  {
    s << indent << "limitspeed_valid_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.limitspeed_valid_flag);
    s << indent << "limit_speed: ";
    Printer<double>::stream(s, indent + "  ", v.limit_speed);
    s << indent << "limit_distance: ";
    Printer<double>::stream(s, indent + "  ", v.limit_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_LIMITSPEEDINFO_H
