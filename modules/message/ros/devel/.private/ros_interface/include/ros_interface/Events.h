// Generated by gencpp from file ros_interface/Events.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_EVENTS_H
#define ROS_INTERFACE_MESSAGE_EVENTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Event.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Events_
{
  typedef Events_<ContainerAllocator> Type;

  Events_()
    : header()
    , version(0)
    , events()  {
    }
  Events_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , version(0)
    , events(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _version_type;
  _version_type version;

   typedef std::vector< ::ros_interface::Event_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Event_<ContainerAllocator> >> _events_type;
  _events_type events;





  typedef boost::shared_ptr< ::ros_interface::Events_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Events_<ContainerAllocator> const> ConstPtr;

}; // struct Events_

typedef ::ros_interface::Events_<std::allocator<void> > Events;

typedef boost::shared_ptr< ::ros_interface::Events > EventsPtr;
typedef boost::shared_ptr< ::ros_interface::Events const> EventsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Events_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Events_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Events_<ContainerAllocator1> & lhs, const ::ros_interface::Events_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.version == rhs.version &&
    lhs.events == rhs.events;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Events_<ContainerAllocator1> & lhs, const ::ros_interface::Events_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Events_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Events_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Events_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Events_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Events_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Events_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Events_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73f541641194ab537b3c1e4b0b947301";
  }

  static const char* value(const ::ros_interface::Events_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73f541641194ab53ULL;
  static const uint64_t static_value2 = 0x7b3c1e4b0b947301ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Events_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Events";
  }

  static const char* value(const ::ros_interface::Events_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Events_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"int32   version     # 软件模块版本号\n"
"Event[] events # 时间集\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Event\n"
"Time   timestamp     # 时间戳\n"
"uint64   code     # 0：invalid； 1：不可泊车；2：可以泊车；3：泊车完成； 4：不可泊出；5：可以泊出；6：泊出完成;   7 :  不可行车；8：可以行车；9：行车完成； 1X：退出自动驾驶（视退出场景可细分） 10：轨迹太短，请求退出自动驾驶; 20：拨杆换道驳回；21：执行向左拨杆换道;22：执行向右拨杆换道；23：拨杆换道完成 30：准备主动向左换道；31：执行主动向左换道；32：准备主动向右换道；33：执行主动向右换道；34：主动换道完成; 147: localmap的车道线效果不好，请求人工接管或者退出自动驾驶\n"
"string   reason     # 原因\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Time\n"
"uint32   sec     # 秒\n"
"uint32   nsec     # 纳秒\n"
;
  }

  static const char* value(const ::ros_interface::Events_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Events_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.version);
      stream.next(m.events);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Events_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Events_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Events_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "version: ";
    Printer<int32_t>::stream(s, indent + "  ", v.version);
    s << indent << "events[]" << std::endl;
    for (size_t i = 0; i < v.events.size(); ++i)
    {
      s << indent << "  events[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Event_<ContainerAllocator> >::stream(s, indent + "    ", v.events[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_EVENTS_H
