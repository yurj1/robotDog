// Generated by gencpp from file ros_interface/VehicleState.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_VEHICLESTATE_H
#define ROS_INTERFACE_MESSAGE_VEHICLESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Pose.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct VehicleState_
{
  typedef VehicleState_<ContainerAllocator> Type;

  VehicleState_()
    : header()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , timestamp(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , heading(0.0)
    , kappa(0.0)
    , linear_velocity(0.0)
    , angular_velocity(0.0)
    , linear_acceleration(0.0)
    , gear(0)
    , driving_mode(0)
    , pose()
    , front_steering_value(0.0)
    , rear_steering_value(0.0)  {
    }
  VehicleState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , timestamp(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , heading(0.0)
    , kappa(0.0)
    , linear_velocity(0.0)
    , angular_velocity(0.0)
    , linear_acceleration(0.0)
    , gear(0)
    , driving_mode(0)
    , pose(_alloc)
    , front_steering_value(0.0)
    , rear_steering_value(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _kappa_type;
  _kappa_type kappa;

   typedef double _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef double _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef double _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef int32_t _gear_type;
  _gear_type gear;

   typedef int32_t _driving_mode_type;
  _driving_mode_type driving_mode;

   typedef  ::ros_interface::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef double _front_steering_value_type;
  _front_steering_value_type front_steering_value;

   typedef double _rear_steering_value_type;
  _rear_steering_value_type rear_steering_value;





  typedef boost::shared_ptr< ::ros_interface::VehicleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::VehicleState_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleState_

typedef ::ros_interface::VehicleState_<std::allocator<void> > VehicleState;

typedef boost::shared_ptr< ::ros_interface::VehicleState > VehicleStatePtr;
typedef boost::shared_ptr< ::ros_interface::VehicleState const> VehicleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::VehicleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::VehicleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::VehicleState_<ContainerAllocator1> & lhs, const ::ros_interface::VehicleState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.timestamp == rhs.timestamp &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.heading == rhs.heading &&
    lhs.kappa == rhs.kappa &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.gear == rhs.gear &&
    lhs.driving_mode == rhs.driving_mode &&
    lhs.pose == rhs.pose &&
    lhs.front_steering_value == rhs.front_steering_value &&
    lhs.rear_steering_value == rhs.rear_steering_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::VehicleState_<ContainerAllocator1> & lhs, const ::ros_interface::VehicleState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::VehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::VehicleState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08d2c2b080782b21d4ad592ab6471a80";
  }

  static const char* value(const ::ros_interface::VehicleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08d2c2b080782b21ULL;
  static const uint64_t static_value2 = 0xd4ad592ab6471a80ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/VehicleState";
  }

  static const char* value(const ::ros_interface::VehicleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"float64   x     #  \n"
"float64   y     #  \n"
"float64   z     #  \n"
"float64   timestamp     #  \n"
"float64   roll     #  \n"
"float64   pitch     #  \n"
"float64   yaw     #  \n"
"float64   heading     #  \n"
"float64   kappa     #  \n"
"float64   linear_velocity     #  \n"
"float64   angular_velocity     #  \n"
"float64   linear_acceleration     #  \n"
"int32   gear     #  \n"
"int32   driving_mode     #  \n"
"Pose   pose     #  \n"
"float64   front_steering_value     #  \n"
"float64   rear_steering_value     #  \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Pose\n"
"PointENU   position     # Position of the vehicle reference point (VRP) in the map reference frame.   The VRP is the center of rear axle.\n"
"Quaternion   orientation     # A quaternion that represents the rotation from the IMU coordinate (Right/Forward/Up) to the world coordinate (East/North/Up).\n"
"Point3D   linear_velocity     # Linear velocity of the VRP in the map reference frame.East/north/up in meters per second.\n"
"Point3D   linear_acceleration     # Linear acceleration of the VRP in the map reference frame. East/north/up in meters per square second.\n"
"Point3D   angular_velocity     # Angular velocity of the vehicle in the map reference frame.Around east/north/up axes in radians per second.\n"
"float64   heading     # The heading is zero when the car is facing East and positive when facing North\n"
"Point3D   linear_acceleration_vrf     # Linear acceleration of the VRP in the vehicle reference frame.Right/forward/up in meters per square second.\n"
"Point3D   angular_velocity_vrf     # Angular velocity of the VRP in the vehicle reference frame. Around right/forward/up axes in radians per second.\n"
"Point3D   euler_angles     # // Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.   // in world coordinate (East/North/Up)   // The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.   // The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.   // The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.   // The direction of rotation follows the right-hand rule.\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PointENU\n"
"float64   x     # East from the origin, in meters.\n"
"float64   y     # North from the origin, in meters.\n"
"float64   z     # Up from the WGS-84 ellipsoid, in meters.\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Quaternion\n"
"float64   qx     # 四维空间x\n"
"float64   qy     # 四维空间y\n"
"float64   qz     # 四维空间z\n"
"float64   qw     # 四维空间w\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::VehicleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::VehicleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.timestamp);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.heading);
      stream.next(m.kappa);
      stream.next(m.linear_velocity);
      stream.next(m.angular_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.gear);
      stream.next(m.driving_mode);
      stream.next(m.pose);
      stream.next(m.front_steering_value);
      stream.next(m.rear_steering_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::VehicleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::VehicleState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "kappa: ";
    Printer<double>::stream(s, indent + "  ", v.kappa);
    s << indent << "linear_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear);
    s << indent << "driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.driving_mode);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::ros_interface::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "front_steering_value: ";
    Printer<double>::stream(s, indent + "  ", v.front_steering_value);
    s << indent << "rear_steering_value: ";
    Printer<double>::stream(s, indent + "  ", v.rear_steering_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_VEHICLESTATE_H
