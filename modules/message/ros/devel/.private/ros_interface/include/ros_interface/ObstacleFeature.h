// Generated by gencpp from file ros_interface/ObstacleFeature.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_OBSTACLEFEATURE_H
#define ROS_INTERFACE_MESSAGE_OBSTACLEFEATURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/ObstaclePriority.h>
#include <ros_interface/PredictionTrajectoryPoint.h>
#include <ros_interface/TrajectoryPointInPrediction.h>
#include <ros_interface/TrajectoryInPrediction.h>
#include <ros_interface/TrajectoryPointInPrediction.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct ObstacleFeature_
{
  typedef ObstacleFeature_<ContainerAllocator> Type;

  ObstacleFeature_()
    : obstacle_id(0)
    , polygon_point()
    , position()
    , front_position()
    , velocity()
    , raw_velocity()
    , acceleration()
    , velocity_heading(0.0)
    , speed(0.0)
    , acc(0.0)
    , theta(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , tracking_time(0.0)
    , timestamp(0.0)
    , t_position()
    , t_velocity()
    , t_velocity_heading(0.0)
    , t_speed(0.0)
    , t_acceleration()
    , t_acc(0.0)
    , is_still(false)
    , type(0)
    , label_update_time_delta(0.0)
    , priority()
    , is_near_junction(false)
    , future_trajectory_points()
    , short_term_predicted_trajectory_points()
    , predicted_trajectory()
    , adc_trajectory_point()  {
    }
  ObstacleFeature_(const ContainerAllocator& _alloc)
    : obstacle_id(0)
    , polygon_point(_alloc)
    , position(_alloc)
    , front_position(_alloc)
    , velocity(_alloc)
    , raw_velocity(_alloc)
    , acceleration(_alloc)
    , velocity_heading(0.0)
    , speed(0.0)
    , acc(0.0)
    , theta(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , tracking_time(0.0)
    , timestamp(0.0)
    , t_position(_alloc)
    , t_velocity(_alloc)
    , t_velocity_heading(0.0)
    , t_speed(0.0)
    , t_acceleration(_alloc)
    , t_acc(0.0)
    , is_still(false)
    , type(0)
    , label_update_time_delta(0.0)
    , priority(_alloc)
    , is_near_junction(false)
    , future_trajectory_points(_alloc)
    , short_term_predicted_trajectory_points(_alloc)
    , predicted_trajectory(_alloc)
    , adc_trajectory_point(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _obstacle_id_type;
  _obstacle_id_type obstacle_id;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _polygon_point_type;
  _polygon_point_type polygon_point;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _front_position_type;
  _front_position_type front_position;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _raw_velocity_type;
  _raw_velocity_type raw_velocity;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef double _velocity_heading_type;
  _velocity_heading_type velocity_heading;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _acc_type;
  _acc_type acc;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef double _tracking_time_type;
  _tracking_time_type tracking_time;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _t_position_type;
  _t_position_type t_position;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _t_velocity_type;
  _t_velocity_type t_velocity;

   typedef double _t_velocity_heading_type;
  _t_velocity_heading_type t_velocity_heading;

   typedef double _t_speed_type;
  _t_speed_type t_speed;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _t_acceleration_type;
  _t_acceleration_type t_acceleration;

   typedef double _t_acc_type;
  _t_acc_type t_acc;

   typedef uint8_t _is_still_type;
  _is_still_type is_still;

   typedef int32_t _type_type;
  _type_type type;

   typedef double _label_update_time_delta_type;
  _label_update_time_delta_type label_update_time_delta;

   typedef  ::ros_interface::ObstaclePriority_<ContainerAllocator>  _priority_type;
  _priority_type priority;

   typedef uint8_t _is_near_junction_type;
  _is_near_junction_type is_near_junction;

   typedef std::vector< ::ros_interface::PredictionTrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::PredictionTrajectoryPoint_<ContainerAllocator> >> _future_trajectory_points_type;
  _future_trajectory_points_type future_trajectory_points;

   typedef std::vector< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >> _short_term_predicted_trajectory_points_type;
  _short_term_predicted_trajectory_points_type short_term_predicted_trajectory_points;

   typedef std::vector< ::ros_interface::TrajectoryInPrediction_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrajectoryInPrediction_<ContainerAllocator> >> _predicted_trajectory_type;
  _predicted_trajectory_type predicted_trajectory;

   typedef std::vector< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >> _adc_trajectory_point_type;
  _adc_trajectory_point_type adc_trajectory_point;





  typedef boost::shared_ptr< ::ros_interface::ObstacleFeature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::ObstacleFeature_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleFeature_

typedef ::ros_interface::ObstacleFeature_<std::allocator<void> > ObstacleFeature;

typedef boost::shared_ptr< ::ros_interface::ObstacleFeature > ObstacleFeaturePtr;
typedef boost::shared_ptr< ::ros_interface::ObstacleFeature const> ObstacleFeatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::ObstacleFeature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::ObstacleFeature_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::ObstacleFeature_<ContainerAllocator1> & lhs, const ::ros_interface::ObstacleFeature_<ContainerAllocator2> & rhs)
{
  return lhs.obstacle_id == rhs.obstacle_id &&
    lhs.polygon_point == rhs.polygon_point &&
    lhs.position == rhs.position &&
    lhs.front_position == rhs.front_position &&
    lhs.velocity == rhs.velocity &&
    lhs.raw_velocity == rhs.raw_velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.velocity_heading == rhs.velocity_heading &&
    lhs.speed == rhs.speed &&
    lhs.acc == rhs.acc &&
    lhs.theta == rhs.theta &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.tracking_time == rhs.tracking_time &&
    lhs.timestamp == rhs.timestamp &&
    lhs.t_position == rhs.t_position &&
    lhs.t_velocity == rhs.t_velocity &&
    lhs.t_velocity_heading == rhs.t_velocity_heading &&
    lhs.t_speed == rhs.t_speed &&
    lhs.t_acceleration == rhs.t_acceleration &&
    lhs.t_acc == rhs.t_acc &&
    lhs.is_still == rhs.is_still &&
    lhs.type == rhs.type &&
    lhs.label_update_time_delta == rhs.label_update_time_delta &&
    lhs.priority == rhs.priority &&
    lhs.is_near_junction == rhs.is_near_junction &&
    lhs.future_trajectory_points == rhs.future_trajectory_points &&
    lhs.short_term_predicted_trajectory_points == rhs.short_term_predicted_trajectory_points &&
    lhs.predicted_trajectory == rhs.predicted_trajectory &&
    lhs.adc_trajectory_point == rhs.adc_trajectory_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::ObstacleFeature_<ContainerAllocator1> & lhs, const ::ros_interface::ObstacleFeature_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ObstacleFeature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ObstacleFeature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ObstacleFeature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ObstacleFeature_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ObstacleFeature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ObstacleFeature_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::ObstacleFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac34bc04e5508d6fec4e09e859e6379b";
  }

  static const char* value(const ::ros_interface::ObstacleFeature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac34bc04e5508d6fULL;
  static const uint64_t static_value2 = 0xec4e09e859e6379bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::ObstacleFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/ObstacleFeature";
  }

  static const char* value(const ::ros_interface::ObstacleFeature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::ObstacleFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   obstacle_id     # Obstacle ID\n"
"Point3D   polygon_point     # 障碍物边框点列\n"
"Point3D   position     #  \n"
"Point3D   front_position     #  \n"
"Point3D   velocity     #  \n"
"Point3D   raw_velocity     # from perception\n"
"Point3D   acceleration     #  \n"
"float64   velocity_heading     #  \n"
"float64   speed     #  \n"
"float64   acc     #  \n"
"float64   theta     #  \n"
"float64   length     #  \n"
"float64   width     #  \n"
"float64   height     #  \n"
"float64   tracking_time     #  \n"
"float64   timestamp     #  \n"
"Point3D   t_position     #  \n"
"Point3D   t_velocity     # [deprecated = true]\n"
"float64   t_velocity_heading     # [deprecated = true]\n"
"float64   t_speed     # [deprecated = true]\n"
"Point3D   t_acceleration     # [deprecated = true]\n"
"float64   t_acc     # [deprecated = true]\n"
"bool   is_still     # [deprecated = false]\n"
"int32   type     # 感知到的障碍物类型         0-UNKNOWN, 1-UNKNOWN_MOVABLE, 2-UNKNOWN_UNMOVABLE, 3-PEDESTRIAN, 4-BICYCLE,     5-VEHICLE\n"
"float64   label_update_time_delta     #  \n"
"ObstaclePriority   priority     # CAUTION = 1; NORMAL = 2; IGNORE = 3;\n"
"bool   is_near_junction     #  \n"
"PredictionTrajectoryPoint[] future_trajectory_points # Obstacle ground-truth labels:\n"
"TrajectoryPointInPrediction[] short_term_predicted_trajectory_points # Obstacle short-term predicted trajectory points\n"
"TrajectoryInPrediction[] predicted_trajectory # Obstacle predicted trajectories\n"
"TrajectoryPointInPrediction[] adc_trajectory_point # ADC trajectory at the same frame\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ObstaclePriority\n"
"int32   priority     # CAUTION = 1; NORMAL = 2; IGNORE = 3;\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PredictionTrajectoryPoint\n"
"Point3D   predition_path_point     #  \n"
"float64   timestamp     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryPointInPrediction\n"
"PathPoint   path_point     # path point\n"
"float64   v     # linear velocity\n"
"float64   a     # linear acceleration\n"
"float64   relative_time     # relative time from beginning of the trajectory\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PathPoint\n"
"float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryInPrediction\n"
"float64   probability     # probability of this trajectory\n"
"TrajectoryPoint[] trajectory_points #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryPoint\n"
"PathPoint   path_point     # path point\n"
"float64   v     # linear velocity\n"
"float64   a     # linear acceleration\n"
"float64   relative_time     # relative time from beginning of the trajectory\n"
"float64   da     # longitudinal jerk\n"
"bool   is_steer_valid     # 转向是否有效\n"
"float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis\n"
"float64   rear_steer     # 后轮转角\n"
"int32   gear     # 档位\n"
;
  }

  static const char* value(const ::ros_interface::ObstacleFeature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::ObstacleFeature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacle_id);
      stream.next(m.polygon_point);
      stream.next(m.position);
      stream.next(m.front_position);
      stream.next(m.velocity);
      stream.next(m.raw_velocity);
      stream.next(m.acceleration);
      stream.next(m.velocity_heading);
      stream.next(m.speed);
      stream.next(m.acc);
      stream.next(m.theta);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.tracking_time);
      stream.next(m.timestamp);
      stream.next(m.t_position);
      stream.next(m.t_velocity);
      stream.next(m.t_velocity_heading);
      stream.next(m.t_speed);
      stream.next(m.t_acceleration);
      stream.next(m.t_acc);
      stream.next(m.is_still);
      stream.next(m.type);
      stream.next(m.label_update_time_delta);
      stream.next(m.priority);
      stream.next(m.is_near_junction);
      stream.next(m.future_trajectory_points);
      stream.next(m.short_term_predicted_trajectory_points);
      stream.next(m.predicted_trajectory);
      stream.next(m.adc_trajectory_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleFeature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::ObstacleFeature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::ObstacleFeature_<ContainerAllocator>& v)
  {
    s << indent << "obstacle_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacle_id);
    s << indent << "polygon_point: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.polygon_point);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "front_position: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.front_position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "raw_velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.raw_velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "velocity_heading: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_heading);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "acc: ";
    Printer<double>::stream(s, indent + "  ", v.acc);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "tracking_time: ";
    Printer<double>::stream(s, indent + "  ", v.tracking_time);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "t_position: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.t_position);
    s << indent << "t_velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.t_velocity);
    s << indent << "t_velocity_heading: ";
    Printer<double>::stream(s, indent + "  ", v.t_velocity_heading);
    s << indent << "t_speed: ";
    Printer<double>::stream(s, indent + "  ", v.t_speed);
    s << indent << "t_acceleration: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.t_acceleration);
    s << indent << "t_acc: ";
    Printer<double>::stream(s, indent + "  ", v.t_acc);
    s << indent << "is_still: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_still);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "label_update_time_delta: ";
    Printer<double>::stream(s, indent + "  ", v.label_update_time_delta);
    s << indent << "priority: ";
    s << std::endl;
    Printer< ::ros_interface::ObstaclePriority_<ContainerAllocator> >::stream(s, indent + "  ", v.priority);
    s << indent << "is_near_junction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_near_junction);
    s << indent << "future_trajectory_points[]" << std::endl;
    for (size_t i = 0; i < v.future_trajectory_points.size(); ++i)
    {
      s << indent << "  future_trajectory_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::PredictionTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.future_trajectory_points[i]);
    }
    s << indent << "short_term_predicted_trajectory_points[]" << std::endl;
    for (size_t i = 0; i < v.short_term_predicted_trajectory_points.size(); ++i)
    {
      s << indent << "  short_term_predicted_trajectory_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >::stream(s, indent + "    ", v.short_term_predicted_trajectory_points[i]);
    }
    s << indent << "predicted_trajectory[]" << std::endl;
    for (size_t i = 0; i < v.predicted_trajectory.size(); ++i)
    {
      s << indent << "  predicted_trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrajectoryInPrediction_<ContainerAllocator> >::stream(s, indent + "    ", v.predicted_trajectory[i]);
    }
    s << indent << "adc_trajectory_point[]" << std::endl;
    for (size_t i = 0; i < v.adc_trajectory_point.size(); ++i)
    {
      s << indent << "  adc_trajectory_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrajectoryPointInPrediction_<ContainerAllocator> >::stream(s, indent + "    ", v.adc_trajectory_point[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_OBSTACLEFEATURE_H
