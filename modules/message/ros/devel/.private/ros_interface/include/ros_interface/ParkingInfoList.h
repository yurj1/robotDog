// Generated by gencpp from file ros_interface/ParkingInfoList.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PARKINGINFOLIST_H
#define ROS_INTERFACE_MESSAGE_PARKINGINFOLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/ParkingInfo.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct ParkingInfoList_
{
  typedef ParkingInfoList_<ContainerAllocator> Type;

  ParkingInfoList_()
    : header()
    , parking_info()
    , error_code(0)
    , is_valid(false)
    , parking_out_enable(false)
    , parking_out_direction(0)
    , parking_out_id(0)  {
    }
  ParkingInfoList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , parking_info(_alloc)
    , error_code(0)
    , is_valid(false)
    , parking_out_enable(false)
    , parking_out_direction(0)
    , parking_out_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::ParkingInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::ParkingInfo_<ContainerAllocator> >> _parking_info_type;
  _parking_info_type parking_info;

   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;

   typedef uint8_t _parking_out_enable_type;
  _parking_out_enable_type parking_out_enable;

   typedef int32_t _parking_out_direction_type;
  _parking_out_direction_type parking_out_direction;

   typedef int32_t _parking_out_id_type;
  _parking_out_id_type parking_out_id;





  typedef boost::shared_ptr< ::ros_interface::ParkingInfoList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::ParkingInfoList_<ContainerAllocator> const> ConstPtr;

}; // struct ParkingInfoList_

typedef ::ros_interface::ParkingInfoList_<std::allocator<void> > ParkingInfoList;

typedef boost::shared_ptr< ::ros_interface::ParkingInfoList > ParkingInfoListPtr;
typedef boost::shared_ptr< ::ros_interface::ParkingInfoList const> ParkingInfoListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::ParkingInfoList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::ParkingInfoList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::ParkingInfoList_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingInfoList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.parking_info == rhs.parking_info &&
    lhs.error_code == rhs.error_code &&
    lhs.is_valid == rhs.is_valid &&
    lhs.parking_out_enable == rhs.parking_out_enable &&
    lhs.parking_out_direction == rhs.parking_out_direction &&
    lhs.parking_out_id == rhs.parking_out_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::ParkingInfoList_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingInfoList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingInfoList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingInfoList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingInfoList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingInfoList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingInfoList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingInfoList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::ParkingInfoList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d25f84ed55f89eeeaac5e9769b9c663";
  }

  static const char* value(const ::ros_interface::ParkingInfoList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d25f84ed55f89eeULL;
  static const uint64_t static_value2 = 0xeaac5e9769b9c663ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::ParkingInfoList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/ParkingInfoList";
  }

  static const char* value(const ::ros_interface::ParkingInfoList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::ParkingInfoList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # 消息头\n"
"ParkingInfo[] parking_info # 检测出的停车位数组\n"
"int32   error_code     # 错误码（default = OK）\n"
"bool   is_valid     # 车位数据是否合法\n"
"bool   parking_out_enable     # 是否能泊出\n"
"int32   parking_out_direction     # 泊出方向\n"
"int32   parking_out_id     # 当前自车所在车位ID\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ParkingInfo\n"
"Header   header     # timestamp is included in header\n"
"int32   parking_space_id     # 停车位id\n"
"int32   parking_type     # PARKING_TYPE=0//无效泊车 PARKING_TYPE=1//水平泊车 PARKING_TYPE=2//垂直泊车 PARKING_TYPE=3//倾斜泊车\n"
"int32   parking_status     # PARKING_ENABLE=0//可泊 PARKING_DISENABLE=1//不可泊 PARKING_NONOPTIONAL=2//不可选\n"
"float64   confidence     # 车位置信度\n"
"Point3D   center_point_of_parking     # 世界坐标系下停车位中心点\n"
"float64   theta     # 世界坐标系下的夹角（单位rad），车位出口与正东方向夹角\n"
"float64   width     # 停车位宽（单位m）\n"
"float64   length     # 停车位长单位m）\n"
"float64   yaw_offset     # 停车位角度偏移量（倾斜车位），倾斜车位与道路边线夹角,(单位m）\n"
"Polygon3D   polygon     # 世界坐标系下的车位多边形\n"
"int32   sensor_id     # 车位数据来自相机id 0-front_center相机 1-front_left相机 2-front_right相机 3-left_front相机 4-left_back右后相机 5-right_front相机 6-right_back相机 7-back相机 8-相机融合\n"
"bool   is_lane_width_valid     # 车道宽度是否有效\n"
"float64   lane_width     # 泊车可用(双)车道宽度\n"
"ParkingStopper[] parking_stoppers # 车位内部的限位器数组\n"
"int32   parking_direction_type     #   DIR_INVALID = 0,   LEFT = 1,   UP = 2,   RIGHT = 3,   DOWN = 4,\n"
"int32   left_occupied_status     # 0-unknown 未知，1-empty 空闲，2-occupied 被占用\n"
"int32   right_occupied_status     # 0-unknown 未知，1-empty 空闲，2-occupied 被占用\n"
"int32   parking_source_type     # 0-线车位， 1-空间车位， 2-融合车位\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Polygon3D\n"
"int32   coordinate_system     # 坐标系\n"
"Point3D[] points # 三维点集\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ParkingStopper\n"
"Header   header     # timestamp is  included in header\n"
"Point3D   center_point_vehicle     # 车辆坐标系下限位器中心点坐标\n"
"Point3D   center_point_abs     # 绝对坐标系下限位器中心点坐标\n"
"Point3D[] stopper_points_vehicle # 车辆坐标系下限位器关键点\n"
"Point3D[] stopper_points_abs # 绝对坐标系下限位器关键点\n"
;
  }

  static const char* value(const ::ros_interface::ParkingInfoList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::ParkingInfoList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.parking_info);
      stream.next(m.error_code);
      stream.next(m.is_valid);
      stream.next(m.parking_out_enable);
      stream.next(m.parking_out_direction);
      stream.next(m.parking_out_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParkingInfoList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::ParkingInfoList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::ParkingInfoList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "parking_info[]" << std::endl;
    for (size_t i = 0; i < v.parking_info.size(); ++i)
    {
      s << indent << "  parking_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::ParkingInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.parking_info[i]);
    }
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
    s << indent << "parking_out_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parking_out_enable);
    s << indent << "parking_out_direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_out_direction);
    s << indent << "parking_out_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_out_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PARKINGINFOLIST_H
