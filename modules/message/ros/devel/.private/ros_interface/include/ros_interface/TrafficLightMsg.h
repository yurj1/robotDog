// Generated by gencpp from file ros_interface/TrafficLightMsg.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_TRAFFICLIGHTMSG_H
#define ROS_INTERFACE_MESSAGE_TRAFFICLIGHTMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/TrafficLight.h>
#include <ros_interface/TrafficLightDebug.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct TrafficLightMsg_
{
  typedef TrafficLightMsg_<ContainerAllocator> Type;

  TrafficLightMsg_()
    : header()
    , traffic_light()
    , traffic_light_debug()
    , contain_lights(false)
    , camera_id(0)
    , is_valid(false)  {
    }
  TrafficLightMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , traffic_light(_alloc)
    , traffic_light_debug(_alloc)
    , contain_lights(false)
    , camera_id(0)
    , is_valid(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::TrafficLight_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::TrafficLight_<ContainerAllocator> >> _traffic_light_type;
  _traffic_light_type traffic_light;

   typedef  ::ros_interface::TrafficLightDebug_<ContainerAllocator>  _traffic_light_debug_type;
  _traffic_light_debug_type traffic_light_debug;

   typedef uint8_t _contain_lights_type;
  _contain_lights_type contain_lights;

   typedef int32_t _camera_id_type;
  _camera_id_type camera_id;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;





  typedef boost::shared_ptr< ::ros_interface::TrafficLightMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::TrafficLightMsg_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightMsg_

typedef ::ros_interface::TrafficLightMsg_<std::allocator<void> > TrafficLightMsg;

typedef boost::shared_ptr< ::ros_interface::TrafficLightMsg > TrafficLightMsgPtr;
typedef boost::shared_ptr< ::ros_interface::TrafficLightMsg const> TrafficLightMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::TrafficLightMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::TrafficLightMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::TrafficLightMsg_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficLightMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.traffic_light == rhs.traffic_light &&
    lhs.traffic_light_debug == rhs.traffic_light_debug &&
    lhs.contain_lights == rhs.contain_lights &&
    lhs.camera_id == rhs.camera_id &&
    lhs.is_valid == rhs.is_valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::TrafficLightMsg_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficLightMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficLightMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficLightMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficLightMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficLightMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficLightMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficLightMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::TrafficLightMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6be2f3c99e26b2711d35cc48d38d8ea";
  }

  static const char* value(const ::ros_interface::TrafficLightMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6be2f3c99e26b27ULL;
  static const uint64_t static_value2 = 0x11d35cc48d38d8eaULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::TrafficLightMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/TrafficLightMsg";
  }

  static const char* value(const ::ros_interface::TrafficLightMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::TrafficLightMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # 消息头\n"
"TrafficLight[] traffic_light # 检出的交通灯数组\n"
"TrafficLightDebug   traffic_light_debug     # 交通灯数组调试\n"
"bool   contain_lights     # 是否包含交通灯\n"
"int32   camera_id     # CAMERA_FRONT_LONG = 0; CAMERA_FRONT_NARROW = 1; CAMERA_FRONT_SHORT = 2; CAMERA_FRONT_WIDE = 3;\n"
"bool   is_valid     # true: valid  false: invalid\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrafficLight\n"
"int32   color     # UNKNOWN = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;\n"
"uint32   id     # light id\n"
"int32   type     # STRAIGHT = 0; TURN_LEFT = 1; TURN_RIGHT = 2; STRAIGHT_TURN_LEFT = 3; STRAIGHT_TURN_RIGHT =4; CIRCULAR = 5; PEDESTRIAN = 6; CYCLIST = 7; UNKNOWN = 8;\n"
"float64   confidence     # 置信度confdence: [0-1]\n"
"ImageRect   light_rect     # 交通灯矩形框light rect\n"
"Point3D   position     # 交通灯位置position of light\n"
"float64   distance     # 距离distance between light and stop line\n"
"int32[] light_lanes # corresponding lanes of light\n"
"float64   tracking_time     # duration of a light since track\n"
"bool   blink     # true:\n"
"float64   blinking_time     # duration of a light blinking\n"
"float64   remaining_time     # V2X time of light\n"
"Time   create_time     # time of light detected\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ImageRect\n"
"int32   x     # coordinate x of left-top point of image rect\n"
"int32   y     # coordinate y of left-top point of image rect\n"
"int32   width     # width of image rect\n"
"int32   height     # height of image rect\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Time\n"
"uint32   sec     # 秒\n"
"uint32   nsec     # 纳秒\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrafficLightDebug\n"
"TrafficLightBox   cropbox     #  \n"
"TrafficLightBox[] box #  \n"
"int32   signal_num     #  \n"
"int32   valid_pos     #  \n"
"float64   ts_diff_pos     #  \n"
"float64   ts_diff_sys     #  \n"
"int32   project_error     #  \n"
"float64   distance_to_stop_line     #  \n"
"int32   camera_id     #  \n"
"TrafficLightBox[] crop_roi #  \n"
"TrafficLightBox[] projected_roi #  \n"
"TrafficLightBox[] rectified_roi #  \n"
"TrafficLightBox[] debug_roi #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrafficLightBox\n"
"int32   x     # 交通灯目标在图像上中心点横向方向像素位置\n"
"int32   y     # 交通灯目标在图像上中心点纵向方向像素位置\n"
"int32   width     # 交通灯目标在图像上宽度\n"
"int32   height     # 交通灯目标在图像上高度\n"
"int32   color     # UNKNOWN = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;\n"
"bool   selected     # 是否选择\n"
"string   camera_name     # 相机名称\n"
;
  }

  static const char* value(const ::ros_interface::TrafficLightMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::TrafficLightMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.traffic_light);
      stream.next(m.traffic_light_debug);
      stream.next(m.contain_lights);
      stream.next(m.camera_id);
      stream.next(m.is_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::TrafficLightMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::TrafficLightMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "traffic_light[]" << std::endl;
    for (size_t i = 0; i < v.traffic_light.size(); ++i)
    {
      s << indent << "  traffic_light[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::TrafficLight_<ContainerAllocator> >::stream(s, indent + "    ", v.traffic_light[i]);
    }
    s << indent << "traffic_light_debug: ";
    s << std::endl;
    Printer< ::ros_interface::TrafficLightDebug_<ContainerAllocator> >::stream(s, indent + "  ", v.traffic_light_debug);
    s << indent << "contain_lights: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.contain_lights);
    s << indent << "camera_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camera_id);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_TRAFFICLIGHTMSG_H
