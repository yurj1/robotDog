// Generated by gencpp from file ros_interface/HMIObstacleList.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_HMIOBSTACLELIST_H
#define ROS_INTERFACE_MESSAGE_HMIOBSTACLELIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/HMIObstacle.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct HMIObstacleList_
{
  typedef HMIObstacleList_<ContainerAllocator> Type;

  HMIObstacleList_()
    : header()
    , sensor_id(0)
    , obstacle()
    , error_code(0)
    , is_valid(false)
    , change_origin_flag(0)  {
    }
  HMIObstacleList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensor_id(0)
    , obstacle(_alloc)
    , error_code(0)
    , is_valid(false)
    , change_origin_flag(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef std::vector< ::ros_interface::HMIObstacle_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::HMIObstacle_<ContainerAllocator> >> _obstacle_type;
  _obstacle_type obstacle;

   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;

   typedef int32_t _change_origin_flag_type;
  _change_origin_flag_type change_origin_flag;





  typedef boost::shared_ptr< ::ros_interface::HMIObstacleList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::HMIObstacleList_<ContainerAllocator> const> ConstPtr;

}; // struct HMIObstacleList_

typedef ::ros_interface::HMIObstacleList_<std::allocator<void> > HMIObstacleList;

typedef boost::shared_ptr< ::ros_interface::HMIObstacleList > HMIObstacleListPtr;
typedef boost::shared_ptr< ::ros_interface::HMIObstacleList const> HMIObstacleListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::HMIObstacleList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::HMIObstacleList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::HMIObstacleList_<ContainerAllocator1> & lhs, const ::ros_interface::HMIObstacleList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.obstacle == rhs.obstacle &&
    lhs.error_code == rhs.error_code &&
    lhs.is_valid == rhs.is_valid &&
    lhs.change_origin_flag == rhs.change_origin_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::HMIObstacleList_<ContainerAllocator1> & lhs, const ::ros_interface::HMIObstacleList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMIObstacleList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMIObstacleList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMIObstacleList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMIObstacleList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMIObstacleList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMIObstacleList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::HMIObstacleList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d7a0bcbe382576c4349f1aac7a556a8";
  }

  static const char* value(const ::ros_interface::HMIObstacleList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d7a0bcbe382576cULL;
  static const uint64_t static_value2 = 0x4349f1aac7a556a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::HMIObstacleList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/HMIObstacleList";
  }

  static const char* value(const ::ros_interface::HMIObstacleList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::HMIObstacleList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # 消息头\n"
"int32   sensor_id     # 安装的传感器id(camera,lidar,radar) ' 相机id: 0-front_center相机 1-front_left相机 2-front_right相机 3-left_front相机 4-left_back右后相机 5-right_front相机 6-right_back相机 7-back相机'  8-相机融合\n"
"HMIObstacle[] obstacle # 检测出的障碍物数组\n"
"int32   error_code     # 错误码（default = OK）\n"
"bool   is_valid     # 障碍物数据是否合法\n"
"int32   change_origin_flag     # 坐标切换状态（0-坐标系切换成功 1-坐标系切换中 2-坐标系切换故障）\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/HMIObstacle\n"
"int32   id     # 障碍物id\n"
"Point3D   center_pos_vehicle     # 车辆坐标系下障碍物的中心位置\n"
"Point3D   center_pos_abs     # 世界坐标系下障碍物的中心位置\n"
"float64   theta_vehicle     # 车辆坐标系下障碍物的朝向\n"
"float64   theta_abs     # 世界坐标系下障碍物的朝向\n"
"float64   length     # 障碍物长度\n"
"float64   width     # 障碍物宽度\n"
"float64   height     # 障碍物高度\n"
"int32   type     # 障碍物类别： UNKNOWN = 0; UNKNOWN_MOVABLE = 1; UNKNOWN_UNMOVABLE = 2; PEDESTRIAN = 3; BICYCLE = 4; VEHICLE = 5;\n"
"float64   confidence     # 障碍物类别置信度\n"
"int32   confidence_type     # 障碍物置信度类别： CONFIDENCE_UNKNOWN = 0; CONFIDENCE_CNN = 1; CONFIDENCE_RADAR = 2;\n"
"int32   sub_type     # 障碍物类别： ST_UNKNOWN = 0; ST_UNKNOWN_MOVABLE = 1; ST_UNKNOWN_UNMOVABLE = 2; ST_CAR = 3; ST_VAN = 4; ST_TRUCK = 5; ST_BUS = 6; ST_CYCLIST = 7; ST_MOTORCYCLIST = 8; ST_TRICYCLIST = 9; ST_PEDESTRIAN = 10; ST_TRAFFICCONE = 11; ST_PILLAR = 12; ST_SPEED_BUMP = 13;\n"
"Point3D[] points #  \n"
"uint8   cipv_flag     # 障碍物状态标志（0-CIPV 1-CIPS 2-LPIHP 3-RPIHP 4-NONE）\n"
"int32   fusion_type     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::HMIObstacleList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::HMIObstacleList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensor_id);
      stream.next(m.obstacle);
      stream.next(m.error_code);
      stream.next(m.is_valid);
      stream.next(m.change_origin_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMIObstacleList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::HMIObstacleList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::HMIObstacleList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensor_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "obstacle[]" << std::endl;
    for (size_t i = 0; i < v.obstacle.size(); ++i)
    {
      s << indent << "  obstacle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::HMIObstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacle[i]);
    }
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
    s << indent << "change_origin_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.change_origin_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_HMIOBSTACLELIST_H
