// Generated by gencpp from file ros_interface/SpeedPoint.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_SPEEDPOINT_H
#define ROS_INTERFACE_MESSAGE_SPEEDPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct SpeedPoint_
{
  typedef SpeedPoint_<ContainerAllocator> Type;

  SpeedPoint_()
    : s(0.0)
    , t(0.0)
    , v(0.0)
    , a(0.0)
    , da(0.0)  {
    }
  SpeedPoint_(const ContainerAllocator& _alloc)
    : s(0.0)
    , t(0.0)
    , v(0.0)
    , a(0.0)
    , da(0.0)  {
  (void)_alloc;
    }



   typedef double _s_type;
  _s_type s;

   typedef double _t_type;
  _t_type t;

   typedef double _v_type;
  _v_type v;

   typedef double _a_type;
  _a_type a;

   typedef double _da_type;
  _da_type da;





  typedef boost::shared_ptr< ::ros_interface::SpeedPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::SpeedPoint_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedPoint_

typedef ::ros_interface::SpeedPoint_<std::allocator<void> > SpeedPoint;

typedef boost::shared_ptr< ::ros_interface::SpeedPoint > SpeedPointPtr;
typedef boost::shared_ptr< ::ros_interface::SpeedPoint const> SpeedPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::SpeedPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::SpeedPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::SpeedPoint_<ContainerAllocator1> & lhs, const ::ros_interface::SpeedPoint_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.t == rhs.t &&
    lhs.v == rhs.v &&
    lhs.a == rhs.a &&
    lhs.da == rhs.da;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::SpeedPoint_<ContainerAllocator1> & lhs, const ::ros_interface::SpeedPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::SpeedPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::SpeedPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::SpeedPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::SpeedPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::SpeedPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::SpeedPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::SpeedPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3e1bfc300ee53cc70f5abd28c102033";
  }

  static const char* value(const ::ros_interface::SpeedPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3e1bfc300ee53ccULL;
  static const uint64_t static_value2 = 0x70f5abd28c102033ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::SpeedPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/SpeedPoint";
  }

  static const char* value(const ::ros_interface::SpeedPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::SpeedPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64   s     # 里程\n"
"float64   t     # 时间\n"
"float64   v     # speed (m/s)\n"
"float64   a     # acceleration (m/s^2)\n"
"float64   da     # jerk (m/s^3)\n"
;
  }

  static const char* value(const ::ros_interface::SpeedPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::SpeedPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.t);
      stream.next(m.v);
      stream.next(m.a);
      stream.next(m.da);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::SpeedPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::SpeedPoint_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "t: ";
    Printer<double>::stream(s, indent + "  ", v.t);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "da: ";
    Printer<double>::stream(s, indent + "  ", v.da);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_SPEEDPOINT_H
