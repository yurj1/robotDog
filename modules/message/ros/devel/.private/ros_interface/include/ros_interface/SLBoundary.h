// Generated by gencpp from file ros_interface/SLBoundary.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_SLBOUNDARY_H
#define ROS_INTERFACE_MESSAGE_SLBOUNDARY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/SLPoint.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct SLBoundary_
{
  typedef SLBoundary_<ContainerAllocator> Type;

  SLBoundary_()
    : start_s(0.0)
    , end_s(0.0)
    , start_l(0.0)
    , end_l(0.0)
    , boundary_point()  {
    }
  SLBoundary_(const ContainerAllocator& _alloc)
    : start_s(0.0)
    , end_s(0.0)
    , start_l(0.0)
    , end_l(0.0)
    , boundary_point(_alloc)  {
  (void)_alloc;
    }



   typedef double _start_s_type;
  _start_s_type start_s;

   typedef double _end_s_type;
  _end_s_type end_s;

   typedef double _start_l_type;
  _start_l_type start_l;

   typedef double _end_l_type;
  _end_l_type end_l;

   typedef std::vector< ::ros_interface::SLPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::SLPoint_<ContainerAllocator> >> _boundary_point_type;
  _boundary_point_type boundary_point;





  typedef boost::shared_ptr< ::ros_interface::SLBoundary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::SLBoundary_<ContainerAllocator> const> ConstPtr;

}; // struct SLBoundary_

typedef ::ros_interface::SLBoundary_<std::allocator<void> > SLBoundary;

typedef boost::shared_ptr< ::ros_interface::SLBoundary > SLBoundaryPtr;
typedef boost::shared_ptr< ::ros_interface::SLBoundary const> SLBoundaryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::SLBoundary_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::SLBoundary_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::SLBoundary_<ContainerAllocator1> & lhs, const ::ros_interface::SLBoundary_<ContainerAllocator2> & rhs)
{
  return lhs.start_s == rhs.start_s &&
    lhs.end_s == rhs.end_s &&
    lhs.start_l == rhs.start_l &&
    lhs.end_l == rhs.end_l &&
    lhs.boundary_point == rhs.boundary_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::SLBoundary_<ContainerAllocator1> & lhs, const ::ros_interface::SLBoundary_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::SLBoundary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::SLBoundary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::SLBoundary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::SLBoundary_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::SLBoundary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::SLBoundary_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::SLBoundary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f10f98a43d7c56cfaed470a969316c95";
  }

  static const char* value(const ::ros_interface::SLBoundary_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf10f98a43d7c56cfULL;
  static const uint64_t static_value2 = 0xaed470a969316c95ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::SLBoundary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/SLBoundary";
  }

  static const char* value(const ::ros_interface::SLBoundary_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::SLBoundary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64   start_s     # 起始点纵向位移\n"
"float64   end_s     # 终止点纵向位移\n"
"float64   start_l     # 起始点横向位移\n"
"float64   end_l     # 终止点横向位移\n"
"SLPoint[] boundary_point # sl点集\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/SLPoint\n"
"float64   s     # 纵向位移\n"
"float64   l     # 横向位移\n"
;
  }

  static const char* value(const ::ros_interface::SLBoundary_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::SLBoundary_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_s);
      stream.next(m.end_s);
      stream.next(m.start_l);
      stream.next(m.end_l);
      stream.next(m.boundary_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SLBoundary_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::SLBoundary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::SLBoundary_<ContainerAllocator>& v)
  {
    s << indent << "start_s: ";
    Printer<double>::stream(s, indent + "  ", v.start_s);
    s << indent << "end_s: ";
    Printer<double>::stream(s, indent + "  ", v.end_s);
    s << indent << "start_l: ";
    Printer<double>::stream(s, indent + "  ", v.start_l);
    s << indent << "end_l: ";
    Printer<double>::stream(s, indent + "  ", v.end_l);
    s << indent << "boundary_point[]" << std::endl;
    for (size_t i = 0; i < v.boundary_point.size(); ++i)
    {
      s << indent << "  boundary_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::SLPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.boundary_point[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_SLBOUNDARY_H
