// Generated by gencpp from file ros_interface/ParkingStopper.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PARKINGSTOPPER_H
#define ROS_INTERFACE_MESSAGE_PARKINGSTOPPER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct ParkingStopper_
{
  typedef ParkingStopper_<ContainerAllocator> Type;

  ParkingStopper_()
    : header()
    , center_point_vehicle()
    , center_point_abs()
    , stopper_points_vehicle()
    , stopper_points_abs()  {
    }
  ParkingStopper_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , center_point_vehicle(_alloc)
    , center_point_abs(_alloc)
    , stopper_points_vehicle(_alloc)
    , stopper_points_abs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _center_point_vehicle_type;
  _center_point_vehicle_type center_point_vehicle;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _center_point_abs_type;
  _center_point_abs_type center_point_abs;

   typedef std::vector< ::ros_interface::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point3D_<ContainerAllocator> >> _stopper_points_vehicle_type;
  _stopper_points_vehicle_type stopper_points_vehicle;

   typedef std::vector< ::ros_interface::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point3D_<ContainerAllocator> >> _stopper_points_abs_type;
  _stopper_points_abs_type stopper_points_abs;





  typedef boost::shared_ptr< ::ros_interface::ParkingStopper_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::ParkingStopper_<ContainerAllocator> const> ConstPtr;

}; // struct ParkingStopper_

typedef ::ros_interface::ParkingStopper_<std::allocator<void> > ParkingStopper;

typedef boost::shared_ptr< ::ros_interface::ParkingStopper > ParkingStopperPtr;
typedef boost::shared_ptr< ::ros_interface::ParkingStopper const> ParkingStopperConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::ParkingStopper_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::ParkingStopper_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::ParkingStopper_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingStopper_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.center_point_vehicle == rhs.center_point_vehicle &&
    lhs.center_point_abs == rhs.center_point_abs &&
    lhs.stopper_points_vehicle == rhs.stopper_points_vehicle &&
    lhs.stopper_points_abs == rhs.stopper_points_abs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::ParkingStopper_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingStopper_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingStopper_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingStopper_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingStopper_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingStopper_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingStopper_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingStopper_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::ParkingStopper_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02850809483c04a8bdc47ff0256be651";
  }

  static const char* value(const ::ros_interface::ParkingStopper_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02850809483c04a8ULL;
  static const uint64_t static_value2 = 0xbdc47ff0256be651ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::ParkingStopper_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/ParkingStopper";
  }

  static const char* value(const ::ros_interface::ParkingStopper_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::ParkingStopper_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # timestamp is  included in header\n"
"Point3D   center_point_vehicle     # 车辆坐标系下限位器中心点坐标\n"
"Point3D   center_point_abs     # 绝对坐标系下限位器中心点坐标\n"
"Point3D[] stopper_points_vehicle # 车辆坐标系下限位器关键点\n"
"Point3D[] stopper_points_abs # 绝对坐标系下限位器关键点\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::ParkingStopper_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::ParkingStopper_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.center_point_vehicle);
      stream.next(m.center_point_abs);
      stream.next(m.stopper_points_vehicle);
      stream.next(m.stopper_points_abs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParkingStopper_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::ParkingStopper_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::ParkingStopper_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "center_point_vehicle: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point_vehicle);
    s << indent << "center_point_abs: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point_abs);
    s << indent << "stopper_points_vehicle[]" << std::endl;
    for (size_t i = 0; i < v.stopper_points_vehicle.size(); ++i)
    {
      s << indent << "  stopper_points_vehicle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.stopper_points_vehicle[i]);
    }
    s << indent << "stopper_points_abs[]" << std::endl;
    for (size_t i = 0; i < v.stopper_points_abs.size(); ++i)
    {
      s << indent << "  stopper_points_abs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.stopper_points_abs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PARKINGSTOPPER_H
