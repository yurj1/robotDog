// Generated by gencpp from file ros_interface/Message.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_MESSAGE_H
#define ROS_INTERFACE_MESSAGE_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct Message_
{
  typedef Message_<ContainerAllocator> Type;

  Message_()
    : code(0)
    , value(0)  {
    }
  Message_(const ContainerAllocator& _alloc)
    : code(0)
    , value(0)  {
  (void)_alloc;
    }



   typedef int32_t _code_type;
  _code_type code;

   typedef int32_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::ros_interface::Message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Message_<ContainerAllocator> const> ConstPtr;

}; // struct Message_

typedef ::ros_interface::Message_<std::allocator<void> > Message;

typedef boost::shared_ptr< ::ros_interface::Message > MessagePtr;
typedef boost::shared_ptr< ::ros_interface::Message const> MessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Message_<ContainerAllocator1> & lhs, const ::ros_interface::Message_<ContainerAllocator2> & rhs)
{
  return lhs.code == rhs.code &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Message_<ContainerAllocator1> & lhs, const ::ros_interface::Message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3029599a805fcfc9721c94ecccb132b2";
  }

  static const char* value(const ::ros_interface::Message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3029599a805fcfc9ULL;
  static const uint64_t static_value2 = 0x721c94ecccb132b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Message";
  }

  static const char* value(const ::ros_interface::Message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   code     # 指定需要显示的值的code定义，需要与self_id绑定 作为前缀\n"
"int32   value     # 对应显示的值或表达的状态\n"
;
  }

  static const char* value(const ::ros_interface::Message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.code);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Message_<ContainerAllocator>& v)
  {
    s << indent << "code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.code);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_MESSAGE_H
