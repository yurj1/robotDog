// Generated by gencpp from file ros_interface/TrafficLight.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_TRAFFICLIGHT_H
#define ROS_INTERFACE_MESSAGE_TRAFFICLIGHT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/ImageRect.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Time.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct TrafficLight_
{
  typedef TrafficLight_<ContainerAllocator> Type;

  TrafficLight_()
    : color(0)
    , id(0)
    , type(0)
    , confidence(0.0)
    , light_rect()
    , position()
    , distance(0.0)
    , light_lanes()
    , tracking_time(0.0)
    , blink(false)
    , blinking_time(0.0)
    , remaining_time(0.0)
    , create_time()  {
    }
  TrafficLight_(const ContainerAllocator& _alloc)
    : color(0)
    , id(0)
    , type(0)
    , confidence(0.0)
    , light_rect(_alloc)
    , position(_alloc)
    , distance(0.0)
    , light_lanes(_alloc)
    , tracking_time(0.0)
    , blink(false)
    , blinking_time(0.0)
    , remaining_time(0.0)
    , create_time(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _color_type;
  _color_type color;

   typedef uint32_t _id_type;
  _id_type id;

   typedef int32_t _type_type;
  _type_type type;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef  ::ros_interface::ImageRect_<ContainerAllocator>  _light_rect_type;
  _light_rect_type light_rect;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _distance_type;
  _distance_type distance;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _light_lanes_type;
  _light_lanes_type light_lanes;

   typedef double _tracking_time_type;
  _tracking_time_type tracking_time;

   typedef uint8_t _blink_type;
  _blink_type blink;

   typedef double _blinking_time_type;
  _blinking_time_type blinking_time;

   typedef double _remaining_time_type;
  _remaining_time_type remaining_time;

   typedef  ::ros_interface::Time_<ContainerAllocator>  _create_time_type;
  _create_time_type create_time;





  typedef boost::shared_ptr< ::ros_interface::TrafficLight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::TrafficLight_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLight_

typedef ::ros_interface::TrafficLight_<std::allocator<void> > TrafficLight;

typedef boost::shared_ptr< ::ros_interface::TrafficLight > TrafficLightPtr;
typedef boost::shared_ptr< ::ros_interface::TrafficLight const> TrafficLightConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::TrafficLight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::TrafficLight_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::TrafficLight_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficLight_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.confidence == rhs.confidence &&
    lhs.light_rect == rhs.light_rect &&
    lhs.position == rhs.position &&
    lhs.distance == rhs.distance &&
    lhs.light_lanes == rhs.light_lanes &&
    lhs.tracking_time == rhs.tracking_time &&
    lhs.blink == rhs.blink &&
    lhs.blinking_time == rhs.blinking_time &&
    lhs.remaining_time == rhs.remaining_time &&
    lhs.create_time == rhs.create_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::TrafficLight_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficLight_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficLight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficLight_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficLight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficLight_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::TrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d24a7eb9eebb6222dbbfb397efd4db6";
  }

  static const char* value(const ::ros_interface::TrafficLight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d24a7eb9eebb622ULL;
  static const uint64_t static_value2 = 0x2dbbfb397efd4db6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::TrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/TrafficLight";
  }

  static const char* value(const ::ros_interface::TrafficLight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::TrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   color     # UNKNOWN = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;\n"
"uint32   id     # light id\n"
"int32   type     # STRAIGHT = 0; TURN_LEFT = 1; TURN_RIGHT = 2; STRAIGHT_TURN_LEFT = 3; STRAIGHT_TURN_RIGHT =4; CIRCULAR = 5; PEDESTRIAN = 6; CYCLIST = 7; UNKNOWN = 8;\n"
"float64   confidence     # 置信度confdence: [0-1]\n"
"ImageRect   light_rect     # 交通灯矩形框light rect\n"
"Point3D   position     # 交通灯位置position of light\n"
"float64   distance     # 距离distance between light and stop line\n"
"int32[] light_lanes # corresponding lanes of light\n"
"float64   tracking_time     # duration of a light since track\n"
"bool   blink     # true:\n"
"float64   blinking_time     # duration of a light blinking\n"
"float64   remaining_time     # V2X time of light\n"
"Time   create_time     # time of light detected\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ImageRect\n"
"int32   x     # coordinate x of left-top point of image rect\n"
"int32   y     # coordinate y of left-top point of image rect\n"
"int32   width     # width of image rect\n"
"int32   height     # height of image rect\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Time\n"
"uint32   sec     # 秒\n"
"uint32   nsec     # 纳秒\n"
;
  }

  static const char* value(const ::ros_interface::TrafficLight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::TrafficLight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.confidence);
      stream.next(m.light_rect);
      stream.next(m.position);
      stream.next(m.distance);
      stream.next(m.light_lanes);
      stream.next(m.tracking_time);
      stream.next(m.blink);
      stream.next(m.blinking_time);
      stream.next(m.remaining_time);
      stream.next(m.create_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::TrafficLight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::TrafficLight_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.color);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "light_rect: ";
    s << std::endl;
    Printer< ::ros_interface::ImageRect_<ContainerAllocator> >::stream(s, indent + "  ", v.light_rect);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "light_lanes[]" << std::endl;
    for (size_t i = 0; i < v.light_lanes.size(); ++i)
    {
      s << indent << "  light_lanes[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.light_lanes[i]);
    }
    s << indent << "tracking_time: ";
    Printer<double>::stream(s, indent + "  ", v.tracking_time);
    s << indent << "blink: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blink);
    s << indent << "blinking_time: ";
    Printer<double>::stream(s, indent + "  ", v.blinking_time);
    s << indent << "remaining_time: ";
    Printer<double>::stream(s, indent + "  ", v.remaining_time);
    s << indent << "create_time: ";
    s << std::endl;
    Printer< ::ros_interface::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.create_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_TRAFFICLIGHT_H
