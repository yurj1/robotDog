// Generated by gencpp from file ros_interface/Point2dList.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_POINT2DLIST_H
#define ROS_INTERFACE_MESSAGE_POINT2DLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point2D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Point2dList_
{
  typedef Point2dList_<ContainerAllocator> Type;

  Point2dList_()
    : point2d_list()  {
    }
  Point2dList_(const ContainerAllocator& _alloc)
    : point2d_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ros_interface::Point2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point2D_<ContainerAllocator> >> _point2d_list_type;
  _point2d_list_type point2d_list;





  typedef boost::shared_ptr< ::ros_interface::Point2dList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Point2dList_<ContainerAllocator> const> ConstPtr;

}; // struct Point2dList_

typedef ::ros_interface::Point2dList_<std::allocator<void> > Point2dList;

typedef boost::shared_ptr< ::ros_interface::Point2dList > Point2dListPtr;
typedef boost::shared_ptr< ::ros_interface::Point2dList const> Point2dListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Point2dList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Point2dList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Point2dList_<ContainerAllocator1> & lhs, const ::ros_interface::Point2dList_<ContainerAllocator2> & rhs)
{
  return lhs.point2d_list == rhs.point2d_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Point2dList_<ContainerAllocator1> & lhs, const ::ros_interface::Point2dList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Point2dList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Point2dList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Point2dList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Point2dList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Point2dList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Point2dList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Point2dList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9206e603a48b83293989b183293e1078";
  }

  static const char* value(const ::ros_interface::Point2dList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9206e603a48b8329ULL;
  static const uint64_t static_value2 = 0x3989b183293e1078ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Point2dList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Point2dList";
  }

  static const char* value(const ::ros_interface::Point2dList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Point2dList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point2D[] point2d_list #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point2D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
;
  }

  static const char* value(const ::ros_interface::Point2dList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Point2dList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point2d_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Point2dList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Point2dList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Point2dList_<ContainerAllocator>& v)
  {
    s << indent << "point2d_list[]" << std::endl;
    for (size_t i = 0; i < v.point2d_list.size(); ++i)
    {
      s << indent << "  point2d_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "    ", v.point2d_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_POINT2DLIST_H
