// Generated by gencpp from file ros_interface/Matrix3D.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_MATRIX3D_H
#define ROS_INTERFACE_MESSAGE_MATRIX3D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct Matrix3D_
{
  typedef Matrix3D_<ContainerAllocator> Type;

  Matrix3D_()
    : a00(0.0)
    , a01(0.0)
    , a02(0.0)
    , a10(0.0)
    , a11(0.0)
    , a12(0.0)
    , a20(0.0)
    , a21(0.0)
    , a22(0.0)  {
    }
  Matrix3D_(const ContainerAllocator& _alloc)
    : a00(0.0)
    , a01(0.0)
    , a02(0.0)
    , a10(0.0)
    , a11(0.0)
    , a12(0.0)
    , a20(0.0)
    , a21(0.0)
    , a22(0.0)  {
  (void)_alloc;
    }



   typedef double _a00_type;
  _a00_type a00;

   typedef double _a01_type;
  _a01_type a01;

   typedef double _a02_type;
  _a02_type a02;

   typedef double _a10_type;
  _a10_type a10;

   typedef double _a11_type;
  _a11_type a11;

   typedef double _a12_type;
  _a12_type a12;

   typedef double _a20_type;
  _a20_type a20;

   typedef double _a21_type;
  _a21_type a21;

   typedef double _a22_type;
  _a22_type a22;





  typedef boost::shared_ptr< ::ros_interface::Matrix3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Matrix3D_<ContainerAllocator> const> ConstPtr;

}; // struct Matrix3D_

typedef ::ros_interface::Matrix3D_<std::allocator<void> > Matrix3D;

typedef boost::shared_ptr< ::ros_interface::Matrix3D > Matrix3DPtr;
typedef boost::shared_ptr< ::ros_interface::Matrix3D const> Matrix3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Matrix3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Matrix3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Matrix3D_<ContainerAllocator1> & lhs, const ::ros_interface::Matrix3D_<ContainerAllocator2> & rhs)
{
  return lhs.a00 == rhs.a00 &&
    lhs.a01 == rhs.a01 &&
    lhs.a02 == rhs.a02 &&
    lhs.a10 == rhs.a10 &&
    lhs.a11 == rhs.a11 &&
    lhs.a12 == rhs.a12 &&
    lhs.a20 == rhs.a20 &&
    lhs.a21 == rhs.a21 &&
    lhs.a22 == rhs.a22;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Matrix3D_<ContainerAllocator1> & lhs, const ::ros_interface::Matrix3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Matrix3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Matrix3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Matrix3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Matrix3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Matrix3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Matrix3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Matrix3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df2f48490b2be1b3dcfbc7fadaa3db94";
  }

  static const char* value(const ::ros_interface::Matrix3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf2f48490b2be1b3ULL;
  static const uint64_t static_value2 = 0xdcfbc7fadaa3db94ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Matrix3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Matrix3D";
  }

  static const char* value(const ::ros_interface::Matrix3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Matrix3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64   a00     # 第一行第一列元素\n"
"float64   a01     # 第一行第二列元素\n"
"float64   a02     # 第一行第三列元素\n"
"float64   a10     # 第二行第一列元素\n"
"float64   a11     # 第二行第二列元素\n"
"float64   a12     # 第二行第三列元素\n"
"float64   a20     # 第三行第一列元素\n"
"float64   a21     # 第三行第二列元素\n"
"float64   a22     # 第三行第三列元素\n"
;
  }

  static const char* value(const ::ros_interface::Matrix3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Matrix3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a00);
      stream.next(m.a01);
      stream.next(m.a02);
      stream.next(m.a10);
      stream.next(m.a11);
      stream.next(m.a12);
      stream.next(m.a20);
      stream.next(m.a21);
      stream.next(m.a22);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Matrix3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Matrix3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Matrix3D_<ContainerAllocator>& v)
  {
    s << indent << "a00: ";
    Printer<double>::stream(s, indent + "  ", v.a00);
    s << indent << "a01: ";
    Printer<double>::stream(s, indent + "  ", v.a01);
    s << indent << "a02: ";
    Printer<double>::stream(s, indent + "  ", v.a02);
    s << indent << "a10: ";
    Printer<double>::stream(s, indent + "  ", v.a10);
    s << indent << "a11: ";
    Printer<double>::stream(s, indent + "  ", v.a11);
    s << indent << "a12: ";
    Printer<double>::stream(s, indent + "  ", v.a12);
    s << indent << "a20: ";
    Printer<double>::stream(s, indent + "  ", v.a20);
    s << indent << "a21: ";
    Printer<double>::stream(s, indent + "  ", v.a21);
    s << indent << "a22: ";
    Printer<double>::stream(s, indent + "  ", v.a22);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_MATRIX3D_H
