// Generated by gencpp from file ros_interface/UltrasonicObstacle.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_ULTRASONICOBSTACLE_H
#define ROS_INTERFACE_MESSAGE_ULTRASONICOBSTACLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct UltrasonicObstacle_
{
  typedef UltrasonicObstacle_<ContainerAllocator> Type;

  UltrasonicObstacle_()
    : id(0)
    , range(0.0)  {
    }
  UltrasonicObstacle_(const ContainerAllocator& _alloc)
    : id(0)
    , range(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef double _range_type;
  _range_type range;





  typedef boost::shared_ptr< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct UltrasonicObstacle_

typedef ::ros_interface::UltrasonicObstacle_<std::allocator<void> > UltrasonicObstacle;

typedef boost::shared_ptr< ::ros_interface::UltrasonicObstacle > UltrasonicObstaclePtr;
typedef boost::shared_ptr< ::ros_interface::UltrasonicObstacle const> UltrasonicObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::UltrasonicObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::UltrasonicObstacle_<ContainerAllocator1> & lhs, const ::ros_interface::UltrasonicObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.range == rhs.range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::UltrasonicObstacle_<ContainerAllocator1> & lhs, const ::ros_interface::UltrasonicObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a071cc49f1c1d100af28eb6b14c404b";
  }

  static const char* value(const ::ros_interface::UltrasonicObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a071cc49f1c1d10ULL;
  static const uint64_t static_value2 = 0x0af28eb6b14c404bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/UltrasonicObstacle";
  }

  static const char* value(const ::ros_interface::UltrasonicObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   id     # 障碍物id\n"
"float64   range     # 障碍物距离\n"
;
  }

  static const char* value(const ::ros_interface::UltrasonicObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UltrasonicObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::UltrasonicObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::UltrasonicObstacle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_ULTRASONICOBSTACLE_H
