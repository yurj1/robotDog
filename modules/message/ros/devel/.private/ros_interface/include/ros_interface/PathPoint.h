// Generated by gencpp from file ros_interface/PathPoint.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PATHPOINT_H
#define ROS_INTERFACE_MESSAGE_PATHPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct PathPoint_
{
  typedef PathPoint_<ContainerAllocator> Type;

  PathPoint_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , theta(0.0)
    , kappa(0.0)
    , s(0.0)
    , dkappa(0.0)
    , ddkappa(0.0)
    , lane_id(0.0)
    , x_derivative(0.0)
    , y_derivative(0.0)  {
    }
  PathPoint_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , theta(0.0)
    , kappa(0.0)
    , s(0.0)
    , dkappa(0.0)
    , ddkappa(0.0)
    , lane_id(0.0)
    , x_derivative(0.0)
    , y_derivative(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _kappa_type;
  _kappa_type kappa;

   typedef double _s_type;
  _s_type s;

   typedef double _dkappa_type;
  _dkappa_type dkappa;

   typedef double _ddkappa_type;
  _ddkappa_type ddkappa;

   typedef double _lane_id_type;
  _lane_id_type lane_id;

   typedef double _x_derivative_type;
  _x_derivative_type x_derivative;

   typedef double _y_derivative_type;
  _y_derivative_type y_derivative;





  typedef boost::shared_ptr< ::ros_interface::PathPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::PathPoint_<ContainerAllocator> const> ConstPtr;

}; // struct PathPoint_

typedef ::ros_interface::PathPoint_<std::allocator<void> > PathPoint;

typedef boost::shared_ptr< ::ros_interface::PathPoint > PathPointPtr;
typedef boost::shared_ptr< ::ros_interface::PathPoint const> PathPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::PathPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::PathPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::PathPoint_<ContainerAllocator1> & lhs, const ::ros_interface::PathPoint_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.theta == rhs.theta &&
    lhs.kappa == rhs.kappa &&
    lhs.s == rhs.s &&
    lhs.dkappa == rhs.dkappa &&
    lhs.ddkappa == rhs.ddkappa &&
    lhs.lane_id == rhs.lane_id &&
    lhs.x_derivative == rhs.x_derivative &&
    lhs.y_derivative == rhs.y_derivative;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::PathPoint_<ContainerAllocator1> & lhs, const ::ros_interface::PathPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PathPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PathPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PathPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PathPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PathPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PathPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::PathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d7f4ed096293a13bafb904c75b6c36b";
  }

  static const char* value(const ::ros_interface::PathPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d7f4ed096293a13ULL;
  static const uint64_t static_value2 = 0xbafb904c75b6c36bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::PathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/PathPoint";
  }

  static const char* value(const ::ros_interface::PathPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::PathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
;
  }

  static const char* value(const ::ros_interface::PathPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::PathPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.theta);
      stream.next(m.kappa);
      stream.next(m.s);
      stream.next(m.dkappa);
      stream.next(m.ddkappa);
      stream.next(m.lane_id);
      stream.next(m.x_derivative);
      stream.next(m.y_derivative);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::PathPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::PathPoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "kappa: ";
    Printer<double>::stream(s, indent + "  ", v.kappa);
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "dkappa: ";
    Printer<double>::stream(s, indent + "  ", v.dkappa);
    s << indent << "ddkappa: ";
    Printer<double>::stream(s, indent + "  ", v.ddkappa);
    s << indent << "lane_id: ";
    Printer<double>::stream(s, indent + "  ", v.lane_id);
    s << indent << "x_derivative: ";
    Printer<double>::stream(s, indent + "  ", v.x_derivative);
    s << indent << "y_derivative: ";
    Printer<double>::stream(s, indent + "  ", v.y_derivative);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PATHPOINT_H
