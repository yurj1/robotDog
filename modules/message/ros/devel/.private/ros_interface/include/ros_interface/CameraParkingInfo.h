// Generated by gencpp from file ros_interface/CameraParkingInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_CAMERAPARKINGINFO_H
#define ROS_INTERFACE_MESSAGE_CAMERAPARKINGINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/ImageKeyPoint.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct CameraParkingInfo_
{
  typedef CameraParkingInfo_<ContainerAllocator> Type;

  CameraParkingInfo_()
    : header()
    , parking_space_id(0)
    , parking_type(0)
    , is_parking_enable(false)
    , confidence(0.0)
    , center_point_of_parking()
    , theta(0.0)
    , width(0.0)
    , length(0.0)
    , yaw_offset(0.0)
    , parking_points_in_image()  {
    }
  CameraParkingInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , parking_space_id(0)
    , parking_type(0)
    , is_parking_enable(false)
    , confidence(0.0)
    , center_point_of_parking(_alloc)
    , theta(0.0)
    , width(0.0)
    , length(0.0)
    , yaw_offset(0.0)
    , parking_points_in_image(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _parking_space_id_type;
  _parking_space_id_type parking_space_id;

   typedef int32_t _parking_type_type;
  _parking_type_type parking_type;

   typedef uint8_t _is_parking_enable_type;
  _is_parking_enable_type is_parking_enable;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _center_point_of_parking_type;
  _center_point_of_parking_type center_point_of_parking;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _width_type;
  _width_type width;

   typedef double _length_type;
  _length_type length;

   typedef double _yaw_offset_type;
  _yaw_offset_type yaw_offset;

   typedef std::vector< ::ros_interface::ImageKeyPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::ImageKeyPoint_<ContainerAllocator> >> _parking_points_in_image_type;
  _parking_points_in_image_type parking_points_in_image;





  typedef boost::shared_ptr< ::ros_interface::CameraParkingInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::CameraParkingInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CameraParkingInfo_

typedef ::ros_interface::CameraParkingInfo_<std::allocator<void> > CameraParkingInfo;

typedef boost::shared_ptr< ::ros_interface::CameraParkingInfo > CameraParkingInfoPtr;
typedef boost::shared_ptr< ::ros_interface::CameraParkingInfo const> CameraParkingInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::CameraParkingInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::CameraParkingInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::CameraParkingInfo_<ContainerAllocator1> & lhs, const ::ros_interface::CameraParkingInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.parking_space_id == rhs.parking_space_id &&
    lhs.parking_type == rhs.parking_type &&
    lhs.is_parking_enable == rhs.is_parking_enable &&
    lhs.confidence == rhs.confidence &&
    lhs.center_point_of_parking == rhs.center_point_of_parking &&
    lhs.theta == rhs.theta &&
    lhs.width == rhs.width &&
    lhs.length == rhs.length &&
    lhs.yaw_offset == rhs.yaw_offset &&
    lhs.parking_points_in_image == rhs.parking_points_in_image;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::CameraParkingInfo_<ContainerAllocator1> & lhs, const ::ros_interface::CameraParkingInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::CameraParkingInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::CameraParkingInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::CameraParkingInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::CameraParkingInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::CameraParkingInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::CameraParkingInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::CameraParkingInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "857f775ab536a49a085ea8594ec9e570";
  }

  static const char* value(const ::ros_interface::CameraParkingInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x857f775ab536a49aULL;
  static const uint64_t static_value2 = 0x085ea8594ec9e570ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::CameraParkingInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/CameraParkingInfo";
  }

  static const char* value(const ::ros_interface::CameraParkingInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::CameraParkingInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # timestamp is  included in header\n"
"int32   parking_space_id     # 停车位id\n"
"int32   parking_type     # PARKING_TYPE=0//无效泊车 PARKING_TYPE=1//垂直泊车 PARKING_TYPE=2//水平泊车 PARKING_TYPE=3//倾斜泊车\n"
"bool   is_parking_enable     # PARKING_ENABLE=0//不可泊入 PARKING_ENABLE=1//可泊入\n"
"float64   confidence     # 停车位置信度\n"
"Point3D   center_point_of_parking     # 车辆坐标系的停车位中心点\n"
"float64   theta     # 车辆坐标系下停车位的朝向\n"
"float64   width     # 停车位宽\n"
"float64   length     # 停车位长\n"
"float64   yaw_offset     # 停车位角度偏移量（倾斜车位），倾斜车位与道路边线夹角\n"
"ImageKeyPoint[] parking_points_in_image # 图像坐标系下停车位关键点，顺时针方向\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ImageKeyPoint\n"
"float64   x     # 车位图像关键点x坐标\n"
"float64   y     # 车位图像关键点y坐标\n"
"float64   confidence     # 置信度\n"
;
  }

  static const char* value(const ::ros_interface::CameraParkingInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::CameraParkingInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.parking_space_id);
      stream.next(m.parking_type);
      stream.next(m.is_parking_enable);
      stream.next(m.confidence);
      stream.next(m.center_point_of_parking);
      stream.next(m.theta);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.yaw_offset);
      stream.next(m.parking_points_in_image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraParkingInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::CameraParkingInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::CameraParkingInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "parking_space_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_space_id);
    s << indent << "parking_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_type);
    s << indent << "is_parking_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_parking_enable);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "center_point_of_parking: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point_of_parking);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "yaw_offset: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_offset);
    s << indent << "parking_points_in_image[]" << std::endl;
    for (size_t i = 0; i < v.parking_points_in_image.size(); ++i)
    {
      s << indent << "  parking_points_in_image[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::ImageKeyPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.parking_points_in_image[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_CAMERAPARKINGINFO_H
