// Generated by gencpp from file ros_interface/ParkingStateDisplay.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PARKINGSTATEDISPLAY_H
#define ROS_INTERFACE_MESSAGE_PARKINGSTATEDISPLAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct ParkingStateDisplay_
{
  typedef ParkingStateDisplay_<ContainerAllocator> Type;

  ParkingStateDisplay_()
    : header()
    , parking_type(0)
    , moves_counter(0)
    , remian_distance(0.0)
    , display_info(0)
    , distance_to_leader_obj(0.0)
    , state(0)  {
    }
  ParkingStateDisplay_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , parking_type(0)
    , moves_counter(0)
    , remian_distance(0.0)
    , display_info(0)
    , distance_to_leader_obj(0.0)
    , state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _parking_type_type;
  _parking_type_type parking_type;

   typedef int32_t _moves_counter_type;
  _moves_counter_type moves_counter;

   typedef double _remian_distance_type;
  _remian_distance_type remian_distance;

   typedef int32_t _display_info_type;
  _display_info_type display_info;

   typedef double _distance_to_leader_obj_type;
  _distance_to_leader_obj_type distance_to_leader_obj;

   typedef int32_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> const> ConstPtr;

}; // struct ParkingStateDisplay_

typedef ::ros_interface::ParkingStateDisplay_<std::allocator<void> > ParkingStateDisplay;

typedef boost::shared_ptr< ::ros_interface::ParkingStateDisplay > ParkingStateDisplayPtr;
typedef boost::shared_ptr< ::ros_interface::ParkingStateDisplay const> ParkingStateDisplayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::ParkingStateDisplay_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::ParkingStateDisplay_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingStateDisplay_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.parking_type == rhs.parking_type &&
    lhs.moves_counter == rhs.moves_counter &&
    lhs.remian_distance == rhs.remian_distance &&
    lhs.display_info == rhs.display_info &&
    lhs.distance_to_leader_obj == rhs.distance_to_leader_obj &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::ParkingStateDisplay_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingStateDisplay_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> >
{
  static const char* value()
  {
    return "877b72abf16a45360d8ea1120bf76726";
  }

  static const char* value(const ::ros_interface::ParkingStateDisplay_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x877b72abf16a4536ULL;
  static const uint64_t static_value2 = 0x0d8ea1120bf76726ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/ParkingStateDisplay";
  }

  static const char* value(const ::ros_interface::ParkingStateDisplay_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"int32   parking_type     # 0：无效 1：垂直泊车 2：水平泊车 3：斜方泊车\n"
"int32   moves_counter     # 揉库次数\n"
"float64   remian_distance     # 剩余距离\n"
"int32   display_info     # 详细信息\n"
"float64   distance_to_leader_obj     # 距离最近障碍物距离\n"
"int32   state     #  \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_interface::ParkingStateDisplay_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.parking_type);
      stream.next(m.moves_counter);
      stream.next(m.remian_distance);
      stream.next(m.display_info);
      stream.next(m.distance_to_leader_obj);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParkingStateDisplay_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::ParkingStateDisplay_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::ParkingStateDisplay_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "parking_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_type);
    s << indent << "moves_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.moves_counter);
    s << indent << "remian_distance: ";
    Printer<double>::stream(s, indent + "  ", v.remian_distance);
    s << indent << "display_info: ";
    Printer<int32_t>::stream(s, indent + "  ", v.display_info);
    s << indent << "distance_to_leader_obj: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_leader_obj);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PARKINGSTATEDISPLAY_H
