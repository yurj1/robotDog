// Generated by gencpp from file ros_interface/DiagnosticArray.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_DIAGNOSTICARRAY_H
#define ROS_INTERFACE_MESSAGE_DIAGNOSTICARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/DiagnosticStatus.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct DiagnosticArray_
{
  typedef DiagnosticArray_<ContainerAllocator> Type;

  DiagnosticArray_()
    : header()
    , status()  {
    }
  DiagnosticArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::DiagnosticStatus_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::DiagnosticStatus_<ContainerAllocator> >> _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::ros_interface::DiagnosticArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::DiagnosticArray_<ContainerAllocator> const> ConstPtr;

}; // struct DiagnosticArray_

typedef ::ros_interface::DiagnosticArray_<std::allocator<void> > DiagnosticArray;

typedef boost::shared_ptr< ::ros_interface::DiagnosticArray > DiagnosticArrayPtr;
typedef boost::shared_ptr< ::ros_interface::DiagnosticArray const> DiagnosticArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::DiagnosticArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::DiagnosticArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::DiagnosticArray_<ContainerAllocator1> & lhs, const ::ros_interface::DiagnosticArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::DiagnosticArray_<ContainerAllocator1> & lhs, const ::ros_interface::DiagnosticArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::DiagnosticArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::DiagnosticArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::DiagnosticArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::DiagnosticArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::DiagnosticArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::DiagnosticArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::DiagnosticArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "243ceda84eaeef8b31086b7c7a595d9f";
  }

  static const char* value(const ::ros_interface::DiagnosticArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x243ceda84eaeef8bULL;
  static const uint64_t static_value2 = 0x31086b7c7a595d9fULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::DiagnosticArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/DiagnosticArray";
  }

  static const char* value(const ::ros_interface::DiagnosticArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::DiagnosticArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # timestamp is  included in header\n"
"DiagnosticStatus[] status # 诊断状态\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/DiagnosticStatus\n"
"Header   header     # timestamp is  included in header\n"
"int32   id     # level*100000 + 序号（RECOVER 400000） WARN 车运动状态（静止）100001 左前门状态（关闭）100002 右前门状态（关闭）100003 左后门状态（关闭）100004 右后门状态（关闭）100005 安全带状态（关闭）100006 后视镜状态（打开）100007 充电枪状态 100008 油门状态 （正常）100009 智驾系统（正常）100010 动力系统（正常）100011 左前轮胎压（正常）100012 右前轮胎压（正常）100013 左后轮胎压（正常）100014 右后轮胎压（正常）100015 转向系统（正常）100016 制动系统（正常）100017 档位系统（正常）100018 EPB系统（正常）100019 气囊状态（正常）100020 油箱盖状态（正常）100021 后备箱状态（正常）100022 底盘信息（正常）100023 定位信息（正常）100024 方向盘人工接管 100025 电量表（正常）100026 暂停超时 100027 暂停次数过多 100028 泊车超时 100029 人为刹车 100030 人为挂P挡 100031 障碍物碰撞 100032 EPB状态(释放) 100033 ERROR 规划失败 200000\n"
"int32   level     # 诊断状态\n"
"string   name     # 测试/组件报告的描述\n"
"string   message     # 状态描述\n"
"string   hardware_id     # 硬件的唯一描述\n"
"KeyValues[] values # 与状态关联的key-value组\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/KeyValues\n"
"string   key     #  \n"
"string   value     #  \n"
;
  }

  static const char* value(const ::ros_interface::DiagnosticArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::DiagnosticArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiagnosticArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::DiagnosticArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::DiagnosticArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::DiagnosticStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_DIAGNOSTICARRAY_H
