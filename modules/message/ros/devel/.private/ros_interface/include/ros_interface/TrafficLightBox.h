// Generated by gencpp from file ros_interface/TrafficLightBox.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_TRAFFICLIGHTBOX_H
#define ROS_INTERFACE_MESSAGE_TRAFFICLIGHTBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct TrafficLightBox_
{
  typedef TrafficLightBox_<ContainerAllocator> Type;

  TrafficLightBox_()
    : x(0)
    , y(0)
    , width(0)
    , height(0)
    , color(0)
    , selected(false)
    , camera_name()  {
    }
  TrafficLightBox_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , width(0)
    , height(0)
    , color(0)
    , selected(false)
    , camera_name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _color_type;
  _color_type color;

   typedef uint8_t _selected_type;
  _selected_type selected;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _camera_name_type;
  _camera_name_type camera_name;





  typedef boost::shared_ptr< ::ros_interface::TrafficLightBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::TrafficLightBox_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightBox_

typedef ::ros_interface::TrafficLightBox_<std::allocator<void> > TrafficLightBox;

typedef boost::shared_ptr< ::ros_interface::TrafficLightBox > TrafficLightBoxPtr;
typedef boost::shared_ptr< ::ros_interface::TrafficLightBox const> TrafficLightBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::TrafficLightBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::TrafficLightBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::TrafficLightBox_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficLightBox_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.color == rhs.color &&
    lhs.selected == rhs.selected &&
    lhs.camera_name == rhs.camera_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::TrafficLightBox_<ContainerAllocator1> & lhs, const ::ros_interface::TrafficLightBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficLightBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrafficLightBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficLightBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrafficLightBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficLightBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrafficLightBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::TrafficLightBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f1ef1a196e498958450410958317793";
  }

  static const char* value(const ::ros_interface::TrafficLightBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f1ef1a196e49895ULL;
  static const uint64_t static_value2 = 0x8450410958317793ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::TrafficLightBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/TrafficLightBox";
  }

  static const char* value(const ::ros_interface::TrafficLightBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::TrafficLightBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   x     # 交通灯目标在图像上中心点横向方向像素位置\n"
"int32   y     # 交通灯目标在图像上中心点纵向方向像素位置\n"
"int32   width     # 交通灯目标在图像上宽度\n"
"int32   height     # 交通灯目标在图像上高度\n"
"int32   color     # UNKNOWN = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;\n"
"bool   selected     # 是否选择\n"
"string   camera_name     # 相机名称\n"
;
  }

  static const char* value(const ::ros_interface::TrafficLightBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::TrafficLightBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.color);
      stream.next(m.selected);
      stream.next(m.camera_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::TrafficLightBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::TrafficLightBox_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.color);
    s << indent << "selected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.selected);
    s << indent << "camera_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.camera_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_TRAFFICLIGHTBOX_H
