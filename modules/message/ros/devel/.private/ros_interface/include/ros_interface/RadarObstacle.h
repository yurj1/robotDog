// Generated by gencpp from file ros_interface/RadarObstacle.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_RADAROBSTACLE_H
#define ROS_INTERFACE_MESSAGE_RADAROBSTACLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Point2D.h>
#include <ros_interface/Status.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct RadarObstacle_
{
  typedef RadarObstacle_<ContainerAllocator> Type;

  RadarObstacle_()
    : id(0)
    , life_time(0)
    , relative_position()
    , relative_position_rms()
    , relative_velocity()
    , relative_velocity_rms()
    , relative_acceleration()
    , relative_acceleration_rms()
    , rcs(0.0)
    , snr(0.0)
    , moving_status(0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , theta(0.0)
    , absolute_position()
    , absolute_position_rms()
    , absolute_velocity()
    , absolute_velocity_rms()
    , absolute_acceleration()
    , absolute_acceleration_rms()
    , orientation(0.0)
    , orient_rms(0.0)
    , yaw(0.0)
    , yaw_rms(0.0)
    , count(0)
    , moving_frames_count(0)
    , status()
    , underpass_probability(0.0)
    , overpass_probability(0.0)
    , exist_probability(0)
    , mov_property(0)
    , track_state(0)
    , track_type(0)  {
    }
  RadarObstacle_(const ContainerAllocator& _alloc)
    : id(0)
    , life_time(0)
    , relative_position(_alloc)
    , relative_position_rms(_alloc)
    , relative_velocity(_alloc)
    , relative_velocity_rms(_alloc)
    , relative_acceleration(_alloc)
    , relative_acceleration_rms(_alloc)
    , rcs(0.0)
    , snr(0.0)
    , moving_status(0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , theta(0.0)
    , absolute_position(_alloc)
    , absolute_position_rms(_alloc)
    , absolute_velocity(_alloc)
    , absolute_velocity_rms(_alloc)
    , absolute_acceleration(_alloc)
    , absolute_acceleration_rms(_alloc)
    , orientation(0.0)
    , orient_rms(0.0)
    , yaw(0.0)
    , yaw_rms(0.0)
    , count(0)
    , moving_frames_count(0)
    , status(_alloc)
    , underpass_probability(0.0)
    , overpass_probability(0.0)
    , exist_probability(0)
    , mov_property(0)
    , track_state(0)
    , track_type(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef uint8_t _life_time_type;
  _life_time_type life_time;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _relative_position_type;
  _relative_position_type relative_position;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _relative_position_rms_type;
  _relative_position_rms_type relative_position_rms;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _relative_velocity_type;
  _relative_velocity_type relative_velocity;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _relative_velocity_rms_type;
  _relative_velocity_rms_type relative_velocity_rms;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _relative_acceleration_type;
  _relative_acceleration_type relative_acceleration;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _relative_acceleration_rms_type;
  _relative_acceleration_rms_type relative_acceleration_rms;

   typedef double _rcs_type;
  _rcs_type rcs;

   typedef double _snr_type;
  _snr_type snr;

   typedef int32_t _moving_status_type;
  _moving_status_type moving_status;

   typedef double _width_type;
  _width_type width;

   typedef double _length_type;
  _length_type length;

   typedef double _height_type;
  _height_type height;

   typedef double _theta_type;
  _theta_type theta;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _absolute_position_type;
  _absolute_position_type absolute_position;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _absolute_position_rms_type;
  _absolute_position_rms_type absolute_position_rms;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _absolute_velocity_type;
  _absolute_velocity_type absolute_velocity;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _absolute_velocity_rms_type;
  _absolute_velocity_rms_type absolute_velocity_rms;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _absolute_acceleration_type;
  _absolute_acceleration_type absolute_acceleration;

   typedef  ::ros_interface::Point2D_<ContainerAllocator>  _absolute_acceleration_rms_type;
  _absolute_acceleration_rms_type absolute_acceleration_rms;

   typedef double _orientation_type;
  _orientation_type orientation;

   typedef double _orient_rms_type;
  _orient_rms_type orient_rms;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _yaw_rms_type;
  _yaw_rms_type yaw_rms;

   typedef int32_t _count_type;
  _count_type count;

   typedef int32_t _moving_frames_count_type;
  _moving_frames_count_type moving_frames_count;

   typedef  ::ros_interface::Status_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef double _underpass_probability_type;
  _underpass_probability_type underpass_probability;

   typedef double _overpass_probability_type;
  _overpass_probability_type overpass_probability;

   typedef uint8_t _exist_probability_type;
  _exist_probability_type exist_probability;

   typedef uint8_t _mov_property_type;
  _mov_property_type mov_property;

   typedef uint8_t _track_state_type;
  _track_state_type track_state;

   typedef uint8_t _track_type_type;
  _track_type_type track_type;





  typedef boost::shared_ptr< ::ros_interface::RadarObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::RadarObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct RadarObstacle_

typedef ::ros_interface::RadarObstacle_<std::allocator<void> > RadarObstacle;

typedef boost::shared_ptr< ::ros_interface::RadarObstacle > RadarObstaclePtr;
typedef boost::shared_ptr< ::ros_interface::RadarObstacle const> RadarObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::RadarObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::RadarObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::RadarObstacle_<ContainerAllocator1> & lhs, const ::ros_interface::RadarObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.life_time == rhs.life_time &&
    lhs.relative_position == rhs.relative_position &&
    lhs.relative_position_rms == rhs.relative_position_rms &&
    lhs.relative_velocity == rhs.relative_velocity &&
    lhs.relative_velocity_rms == rhs.relative_velocity_rms &&
    lhs.relative_acceleration == rhs.relative_acceleration &&
    lhs.relative_acceleration_rms == rhs.relative_acceleration_rms &&
    lhs.rcs == rhs.rcs &&
    lhs.snr == rhs.snr &&
    lhs.moving_status == rhs.moving_status &&
    lhs.width == rhs.width &&
    lhs.length == rhs.length &&
    lhs.height == rhs.height &&
    lhs.theta == rhs.theta &&
    lhs.absolute_position == rhs.absolute_position &&
    lhs.absolute_position_rms == rhs.absolute_position_rms &&
    lhs.absolute_velocity == rhs.absolute_velocity &&
    lhs.absolute_velocity_rms == rhs.absolute_velocity_rms &&
    lhs.absolute_acceleration == rhs.absolute_acceleration &&
    lhs.absolute_acceleration_rms == rhs.absolute_acceleration_rms &&
    lhs.orientation == rhs.orientation &&
    lhs.orient_rms == rhs.orient_rms &&
    lhs.yaw == rhs.yaw &&
    lhs.yaw_rms == rhs.yaw_rms &&
    lhs.count == rhs.count &&
    lhs.moving_frames_count == rhs.moving_frames_count &&
    lhs.status == rhs.status &&
    lhs.underpass_probability == rhs.underpass_probability &&
    lhs.overpass_probability == rhs.overpass_probability &&
    lhs.exist_probability == rhs.exist_probability &&
    lhs.mov_property == rhs.mov_property &&
    lhs.track_state == rhs.track_state &&
    lhs.track_type == rhs.track_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::RadarObstacle_<ContainerAllocator1> & lhs, const ::ros_interface::RadarObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RadarObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RadarObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RadarObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RadarObstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RadarObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RadarObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::RadarObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d415f3f1097d79c4238ba7b7df30ac73";
  }

  static const char* value(const ::ros_interface::RadarObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd415f3f1097d79c4ULL;
  static const uint64_t static_value2 = 0x238ba7b7df30ac73ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::RadarObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/RadarObstacle";
  }

  static const char* value(const ::ros_interface::RadarObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::RadarObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   id     # obstacle ID.\n"
"uint8   life_time     # 障碍物存在时间\n"
"Point2D   relative_position     # 雷达坐标系障碍物位置\n"
"Point2D   relative_position_rms     # 雷达坐标系障碍物位置标准差\n"
"Point2D   relative_velocity     # 雷达坐标系障碍物速度\n"
"Point2D   relative_velocity_rms     # 雷达坐标系障碍物速度标准差\n"
"Point2D   relative_acceleration     # 雷达坐标系障碍物加速度\n"
"Point2D   relative_acceleration_rms     # 雷达坐标系障碍物加速度标准差\n"
"float64   rcs     # 雷达散射面积\n"
"float64   snr     #  \n"
"int32   moving_status     # STATIONARY = 0; NEARING = 1; AWAYING = 2; NONE = 3;\n"
"float64   width     # 雷达障碍物宽度\n"
"float64   length     # 雷达障碍物长度\n"
"float64   height     # 雷达障碍物高度\n"
"float64   theta     #  \n"
"Point2D   absolute_position     # obstacle position in map coordinate system\n"
"Point2D   absolute_position_rms     #  \n"
"Point2D   absolute_velocity     # obstacle position in map coordinate system\n"
"Point2D   absolute_velocity_rms     #  \n"
"Point2D   absolute_acceleration     #  \n"
"Point2D   absolute_acceleration_rms     #  \n"
"float64   orientation     # 雷达障碍物方位角\n"
"float64   orient_rms     # 雷达障碍物方位角标准差\n"
"float64   yaw     #  \n"
"float64   yaw_rms     #  \n"
"int32   count     #  \n"
"int32   moving_frames_count     #  \n"
"Status   status     # 状态码\n"
"float64   underpass_probability     #  \n"
"float64   overpass_probability     #  \n"
"uint8   exist_probability     # 障碍物存在的概率\n"
"uint8   mov_property     # 障碍物移动属性：MOVING_PROPERTY_MOVING=0，MOVING_PROPERTY_STATIONARY=1，MOVING_PROPERTY_ONCOMING=2，MOVING_PROPERTY_STATIONARY_CANDIDATE=3，MOVING_PROPERTY_UNKOWN=4，MOVING_PROPERTY_CROSSING_STATIONARY=5，MOVING_PROPERTY_CROSSING_MOVING=6，MOVING_PROPERTY_STOPPED=7\n"
"uint8   track_state     # 跟踪状态：TRACK_STATE_DELETED=0；TRACK_STATE_INITED=1；TRACK_STATE_MEASURED=2；TRACK_STATE_PREDICTED=3；TRACK_STATE_DELETED_FOR_MERGE=4；TRACK_STATE_NEW_FOR_MERGE=5；\n"
"uint8   track_type     # 追踪的障碍物类型：TRACK_TYPE_POINT=0；TRACK_TYPE_CAR=1；TRACK_TYPE_TRUCK=2；TRACK_TYPE_PEDESTRIAN=3；TRACK_TYPE_MOTORCYCLE=4；TRACK_TYPE_BICYCLE=5；TRACK_TYPE_WIDE=6；TRACK_TYPE_RESERVED=7；TRACK_TYPE_BRIDGE=8；\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point2D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Status\n"
"int32   error_code     # 错误码\n"
"string   msg     # 错误码描述\n"
;
  }

  static const char* value(const ::ros_interface::RadarObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::RadarObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.life_time);
      stream.next(m.relative_position);
      stream.next(m.relative_position_rms);
      stream.next(m.relative_velocity);
      stream.next(m.relative_velocity_rms);
      stream.next(m.relative_acceleration);
      stream.next(m.relative_acceleration_rms);
      stream.next(m.rcs);
      stream.next(m.snr);
      stream.next(m.moving_status);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.height);
      stream.next(m.theta);
      stream.next(m.absolute_position);
      stream.next(m.absolute_position_rms);
      stream.next(m.absolute_velocity);
      stream.next(m.absolute_velocity_rms);
      stream.next(m.absolute_acceleration);
      stream.next(m.absolute_acceleration_rms);
      stream.next(m.orientation);
      stream.next(m.orient_rms);
      stream.next(m.yaw);
      stream.next(m.yaw_rms);
      stream.next(m.count);
      stream.next(m.moving_frames_count);
      stream.next(m.status);
      stream.next(m.underpass_probability);
      stream.next(m.overpass_probability);
      stream.next(m.exist_probability);
      stream.next(m.mov_property);
      stream.next(m.track_state);
      stream.next(m.track_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::RadarObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::RadarObstacle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "life_time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.life_time);
    s << indent << "relative_position: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_position);
    s << indent << "relative_position_rms: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_position_rms);
    s << indent << "relative_velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_velocity);
    s << indent << "relative_velocity_rms: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_velocity_rms);
    s << indent << "relative_acceleration: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_acceleration);
    s << indent << "relative_acceleration_rms: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_acceleration_rms);
    s << indent << "rcs: ";
    Printer<double>::stream(s, indent + "  ", v.rcs);
    s << indent << "snr: ";
    Printer<double>::stream(s, indent + "  ", v.snr);
    s << indent << "moving_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.moving_status);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "absolute_position: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_position);
    s << indent << "absolute_position_rms: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_position_rms);
    s << indent << "absolute_velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_velocity);
    s << indent << "absolute_velocity_rms: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_velocity_rms);
    s << indent << "absolute_acceleration: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_acceleration);
    s << indent << "absolute_acceleration_rms: ";
    s << std::endl;
    Printer< ::ros_interface::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_acceleration_rms);
    s << indent << "orientation: ";
    Printer<double>::stream(s, indent + "  ", v.orientation);
    s << indent << "orient_rms: ";
    Printer<double>::stream(s, indent + "  ", v.orient_rms);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "yaw_rms: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rms);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
    s << indent << "moving_frames_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.moving_frames_count);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::ros_interface::Status_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "underpass_probability: ";
    Printer<double>::stream(s, indent + "  ", v.underpass_probability);
    s << indent << "overpass_probability: ";
    Printer<double>::stream(s, indent + "  ", v.overpass_probability);
    s << indent << "exist_probability: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exist_probability);
    s << indent << "mov_property: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mov_property);
    s << indent << "track_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.track_state);
    s << indent << "track_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.track_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_RADAROBSTACLE_H
