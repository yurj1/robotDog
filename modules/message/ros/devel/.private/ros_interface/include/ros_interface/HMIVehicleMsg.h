// Generated by gencpp from file ros_interface/HMIVehicleMsg.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_HMIVEHICLEMSG_H
#define ROS_INTERFACE_MESSAGE_HMIVEHICLEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/PointLLH.h>
#include <ros_interface/PointENU.h>
#include <ros_interface/PointENU.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct HMIVehicleMsg_
{
  typedef HMIVehicleMsg_<ContainerAllocator> Type;

  HMIVehicleMsg_()
    : header()
    , driving_mode(0)
    , gear_location(0)
    , steering_value(0.0)
    , accel_value(0.0)
    , brake_value(0.0)
    , speed_mps(0.0)
    , position()
    , utm_position()
    , pitch(0.0)
    , roll(0.0)
    , heading(0.0)
    , rtk_flag(0)
    , origin_lat(0.0)
    , origin_lon(0.0)
    , current_ins_yaw(0.0)
    , auto_safe(0)
    , battery_power_percentage(0.0)
    , charging_gun_status(0)
    , chassis_error_code()
    , brake_lamp_status(0)
    , turn_lamp_status(0)
    , mercator_position()  {
    }
  HMIVehicleMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , driving_mode(0)
    , gear_location(0)
    , steering_value(0.0)
    , accel_value(0.0)
    , brake_value(0.0)
    , speed_mps(0.0)
    , position(_alloc)
    , utm_position(_alloc)
    , pitch(0.0)
    , roll(0.0)
    , heading(0.0)
    , rtk_flag(0)
    , origin_lat(0.0)
    , origin_lon(0.0)
    , current_ins_yaw(0.0)
    , auto_safe(0)
    , battery_power_percentage(0.0)
    , charging_gun_status(0)
    , chassis_error_code(_alloc)
    , brake_lamp_status(0)
    , turn_lamp_status(0)
    , mercator_position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _driving_mode_type;
  _driving_mode_type driving_mode;

   typedef int32_t _gear_location_type;
  _gear_location_type gear_location;

   typedef double _steering_value_type;
  _steering_value_type steering_value;

   typedef double _accel_value_type;
  _accel_value_type accel_value;

   typedef double _brake_value_type;
  _brake_value_type brake_value;

   typedef double _speed_mps_type;
  _speed_mps_type speed_mps;

   typedef  ::ros_interface::PointLLH_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::ros_interface::PointENU_<ContainerAllocator>  _utm_position_type;
  _utm_position_type utm_position;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _heading_type;
  _heading_type heading;

   typedef int32_t _rtk_flag_type;
  _rtk_flag_type rtk_flag;

   typedef double _origin_lat_type;
  _origin_lat_type origin_lat;

   typedef double _origin_lon_type;
  _origin_lon_type origin_lon;

   typedef double _current_ins_yaw_type;
  _current_ins_yaw_type current_ins_yaw;

   typedef int32_t _auto_safe_type;
  _auto_safe_type auto_safe;

   typedef double _battery_power_percentage_type;
  _battery_power_percentage_type battery_power_percentage;

   typedef int32_t _charging_gun_status_type;
  _charging_gun_status_type charging_gun_status;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _chassis_error_code_type;
  _chassis_error_code_type chassis_error_code;

   typedef int32_t _brake_lamp_status_type;
  _brake_lamp_status_type brake_lamp_status;

   typedef int32_t _turn_lamp_status_type;
  _turn_lamp_status_type turn_lamp_status;

   typedef  ::ros_interface::PointENU_<ContainerAllocator>  _mercator_position_type;
  _mercator_position_type mercator_position;





  typedef boost::shared_ptr< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> const> ConstPtr;

}; // struct HMIVehicleMsg_

typedef ::ros_interface::HMIVehicleMsg_<std::allocator<void> > HMIVehicleMsg;

typedef boost::shared_ptr< ::ros_interface::HMIVehicleMsg > HMIVehicleMsgPtr;
typedef boost::shared_ptr< ::ros_interface::HMIVehicleMsg const> HMIVehicleMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::HMIVehicleMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::HMIVehicleMsg_<ContainerAllocator1> & lhs, const ::ros_interface::HMIVehicleMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.driving_mode == rhs.driving_mode &&
    lhs.gear_location == rhs.gear_location &&
    lhs.steering_value == rhs.steering_value &&
    lhs.accel_value == rhs.accel_value &&
    lhs.brake_value == rhs.brake_value &&
    lhs.speed_mps == rhs.speed_mps &&
    lhs.position == rhs.position &&
    lhs.utm_position == rhs.utm_position &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.heading == rhs.heading &&
    lhs.rtk_flag == rhs.rtk_flag &&
    lhs.origin_lat == rhs.origin_lat &&
    lhs.origin_lon == rhs.origin_lon &&
    lhs.current_ins_yaw == rhs.current_ins_yaw &&
    lhs.auto_safe == rhs.auto_safe &&
    lhs.battery_power_percentage == rhs.battery_power_percentage &&
    lhs.charging_gun_status == rhs.charging_gun_status &&
    lhs.chassis_error_code == rhs.chassis_error_code &&
    lhs.brake_lamp_status == rhs.brake_lamp_status &&
    lhs.turn_lamp_status == rhs.turn_lamp_status &&
    lhs.mercator_position == rhs.mercator_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::HMIVehicleMsg_<ContainerAllocator1> & lhs, const ::ros_interface::HMIVehicleMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "406f4c0f16a35ecb30b22550fabf5c9f";
  }

  static const char* value(const ::ros_interface::HMIVehicleMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x406f4c0f16a35ecbULL;
  static const uint64_t static_value2 = 0x30b22550fabf5c9fULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/HMIVehicleMsg";
  }

  static const char* value(const ::ros_interface::HMIVehicleMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"int32   driving_mode     # 驾驶状态\n"
"int32   gear_location     # 档位值\n"
"float64   steering_value     # 方向盘转角\n"
"float64   accel_value     # 线控驱动值（油门值）\n"
"float64   brake_value     # 线控制动值（刹车值）\n"
"float64   speed_mps     # 车速（m/s）\n"
"PointLLH   position     # 经纬度高程\n"
"PointENU   utm_position     # 相对参考点xyz坐标\n"
"float64   pitch     # 方向(单位弧度，-π～π,正东:0, 逆时针。都满足右手定则)\n"
"float64   roll     #  \n"
"float64   heading     #  \n"
"int32   rtk_flag     # RTK标志值\n"
"float64   origin_lat     # // 参考点纬度 GCJ-02格式\n"
"float64   origin_lon     # // 参考点经度 GCJ-02格式\n"
"float64   current_ins_yaw     #  \n"
"int32   auto_safe     # //  安全驾驶0:正常 1:左前车门没关 2:右前车门没关 3:左后车门没关 4:右后车门没关 5:未系安全带 6: 未打开反观镜 7:车辆未静止\n"
"float64   battery_power_percentage     # 电池电量值\n"
"int32   charging_gun_status     # 充电枪状态\n"
"int32[] chassis_error_code # 底盘错误码\n"
"int32   brake_lamp_status     # 刹车灯状态\n"
"int32   turn_lamp_status     # 转向灯状态\n"
"PointENU   mercator_position     # 转坐标系后的参考点\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PointLLH\n"
"float64   lon     # Longitude in degrees, ranging from -180 to 180.\n"
"float64   lat     # Latitude in degrees, ranging from -90 to 90.\n"
"float64   height     # WGS-84 ellipsoid height in meters.\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PointENU\n"
"float64   x     # East from the origin, in meters.\n"
"float64   y     # North from the origin, in meters.\n"
"float64   z     # Up from the WGS-84 ellipsoid, in meters.\n"
;
  }

  static const char* value(const ::ros_interface::HMIVehicleMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.driving_mode);
      stream.next(m.gear_location);
      stream.next(m.steering_value);
      stream.next(m.accel_value);
      stream.next(m.brake_value);
      stream.next(m.speed_mps);
      stream.next(m.position);
      stream.next(m.utm_position);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.heading);
      stream.next(m.rtk_flag);
      stream.next(m.origin_lat);
      stream.next(m.origin_lon);
      stream.next(m.current_ins_yaw);
      stream.next(m.auto_safe);
      stream.next(m.battery_power_percentage);
      stream.next(m.charging_gun_status);
      stream.next(m.chassis_error_code);
      stream.next(m.brake_lamp_status);
      stream.next(m.turn_lamp_status);
      stream.next(m.mercator_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMIVehicleMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::HMIVehicleMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::HMIVehicleMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.driving_mode);
    s << indent << "gear_location: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear_location);
    s << indent << "steering_value: ";
    Printer<double>::stream(s, indent + "  ", v.steering_value);
    s << indent << "accel_value: ";
    Printer<double>::stream(s, indent + "  ", v.accel_value);
    s << indent << "brake_value: ";
    Printer<double>::stream(s, indent + "  ", v.brake_value);
    s << indent << "speed_mps: ";
    Printer<double>::stream(s, indent + "  ", v.speed_mps);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::ros_interface::PointLLH_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "utm_position: ";
    s << std::endl;
    Printer< ::ros_interface::PointENU_<ContainerAllocator> >::stream(s, indent + "  ", v.utm_position);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "rtk_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rtk_flag);
    s << indent << "origin_lat: ";
    Printer<double>::stream(s, indent + "  ", v.origin_lat);
    s << indent << "origin_lon: ";
    Printer<double>::stream(s, indent + "  ", v.origin_lon);
    s << indent << "current_ins_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.current_ins_yaw);
    s << indent << "auto_safe: ";
    Printer<int32_t>::stream(s, indent + "  ", v.auto_safe);
    s << indent << "battery_power_percentage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_power_percentage);
    s << indent << "charging_gun_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.charging_gun_status);
    s << indent << "chassis_error_code[]" << std::endl;
    for (size_t i = 0; i < v.chassis_error_code.size(); ++i)
    {
      s << indent << "  chassis_error_code[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.chassis_error_code[i]);
    }
    s << indent << "brake_lamp_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake_lamp_status);
    s << indent << "turn_lamp_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turn_lamp_status);
    s << indent << "mercator_position: ";
    s << std::endl;
    Printer< ::ros_interface::PointENU_<ContainerAllocator> >::stream(s, indent + "  ", v.mercator_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_HMIVEHICLEMSG_H
