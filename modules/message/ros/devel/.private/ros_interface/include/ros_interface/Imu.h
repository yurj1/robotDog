// Generated by gencpp from file ros_interface/Imu.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_IMU_H
#define ROS_INTERFACE_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Quaternion.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Imu_
{
  typedef Imu_<ContainerAllocator> Type;

  Imu_()
    : header()
    , is_valid(false)
    , orientation()
    , orientation_covariance()
    , angular_velocity()
    , angular_velocity_covariance()
    , linear_acceleration()
    , linear_acceleration_covariance()  {
    }
  Imu_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , is_valid(false)
    , orientation(_alloc)
    , orientation_covariance(_alloc)
    , angular_velocity(_alloc)
    , angular_velocity_covariance(_alloc)
    , linear_acceleration(_alloc)
    , linear_acceleration_covariance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;

   typedef  ::ros_interface::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _orientation_covariance_type;
  _orientation_covariance_type orientation_covariance;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _angular_velocity_covariance_type;
  _angular_velocity_covariance_type angular_velocity_covariance;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _linear_acceleration_covariance_type;
  _linear_acceleration_covariance_type linear_acceleration_covariance;





  typedef boost::shared_ptr< ::ros_interface::Imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Imu_<ContainerAllocator> const> ConstPtr;

}; // struct Imu_

typedef ::ros_interface::Imu_<std::allocator<void> > Imu;

typedef boost::shared_ptr< ::ros_interface::Imu > ImuPtr;
typedef boost::shared_ptr< ::ros_interface::Imu const> ImuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Imu_<ContainerAllocator1> & lhs, const ::ros_interface::Imu_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.is_valid == rhs.is_valid &&
    lhs.orientation == rhs.orientation &&
    lhs.orientation_covariance == rhs.orientation_covariance &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.angular_velocity_covariance == rhs.angular_velocity_covariance &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.linear_acceleration_covariance == rhs.linear_acceleration_covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Imu_<ContainerAllocator1> & lhs, const ::ros_interface::Imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Imu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Imu_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "400b1b2966d2f99a2d52eb709cd9bec3";
  }

  static const char* value(const ::ros_interface::Imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x400b1b2966d2f99aULL;
  static const uint64_t static_value2 = 0x2d52eb709cd9bec3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Imu";
  }

  static const char* value(const ::ros_interface::Imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # 头部信息\n"
"bool   is_valid     # 数据有效性标志位\n"
"Quaternion   orientation     # 角度（四元素）\n"
"float64[] orientation_covariance # 角度方差\n"
"Point3D   angular_velocity     # 角速度信息angularVelocity.x：x方向角速度信息angularVelocity.y: y方向角速度信息angularVelocity.z：z方向角速度信息\n"
"float64[] angular_velocity_covariance # 速度方差\n"
"Point3D   linear_acceleration     # 线加速度信息linearAcceleration.x：x方向线加速度信息linearAcceleration.y: y方向线加速度信息linearAcceleration.z：z方向线加速度信息\n"
"float64[] linear_acceleration_covariance # 线性加速度方差\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Quaternion\n"
"float64   qx     # 四维空间x\n"
"float64   qy     # 四维空间y\n"
"float64   qz     # 四维空间z\n"
"float64   qw     # 四维空间w\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::Imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.is_valid);
      stream.next(m.orientation);
      stream.next(m.orientation_covariance);
      stream.next(m.angular_velocity);
      stream.next(m.angular_velocity_covariance);
      stream.next(m.linear_acceleration);
      stream.next(m.linear_acceleration_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Imu_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::ros_interface::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "orientation_covariance[]" << std::endl;
    for (size_t i = 0; i < v.orientation_covariance.size(); ++i)
    {
      s << indent << "  orientation_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation_covariance[i]);
    }
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "angular_velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity_covariance.size(); ++i)
    {
      s << indent << "  angular_velocity_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angular_velocity_covariance[i]);
    }
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "linear_acceleration_covariance[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration_covariance.size(); ++i)
    {
      s << indent << "  linear_acceleration_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.linear_acceleration_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_IMU_H
