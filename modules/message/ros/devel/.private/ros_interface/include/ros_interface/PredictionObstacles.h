// Generated by gencpp from file ros_interface/PredictionObstacles.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PREDICTIONOBSTACLES_H
#define ROS_INTERFACE_MESSAGE_PREDICTIONOBSTACLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/PredictionObstacle.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct PredictionObstacles_
{
  typedef PredictionObstacles_<ContainerAllocator> Type;

  PredictionObstacles_()
    : header()
    , prediction_obstacles()
    , change_origin_flag(0)
    , start_timestamp(0.0)
    , end_timestamp(0.0)
    , self_intent(0)
    , scenario(0)  {
    }
  PredictionObstacles_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , prediction_obstacles(_alloc)
    , change_origin_flag(0)
    , start_timestamp(0.0)
    , end_timestamp(0.0)
    , self_intent(0)
    , scenario(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::PredictionObstacle_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::PredictionObstacle_<ContainerAllocator> >> _prediction_obstacles_type;
  _prediction_obstacles_type prediction_obstacles;

   typedef int32_t _change_origin_flag_type;
  _change_origin_flag_type change_origin_flag;

   typedef double _start_timestamp_type;
  _start_timestamp_type start_timestamp;

   typedef double _end_timestamp_type;
  _end_timestamp_type end_timestamp;

   typedef int32_t _self_intent_type;
  _self_intent_type self_intent;

   typedef int32_t _scenario_type;
  _scenario_type scenario;





  typedef boost::shared_ptr< ::ros_interface::PredictionObstacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::PredictionObstacles_<ContainerAllocator> const> ConstPtr;

}; // struct PredictionObstacles_

typedef ::ros_interface::PredictionObstacles_<std::allocator<void> > PredictionObstacles;

typedef boost::shared_ptr< ::ros_interface::PredictionObstacles > PredictionObstaclesPtr;
typedef boost::shared_ptr< ::ros_interface::PredictionObstacles const> PredictionObstaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::PredictionObstacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::PredictionObstacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::PredictionObstacles_<ContainerAllocator1> & lhs, const ::ros_interface::PredictionObstacles_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.prediction_obstacles == rhs.prediction_obstacles &&
    lhs.change_origin_flag == rhs.change_origin_flag &&
    lhs.start_timestamp == rhs.start_timestamp &&
    lhs.end_timestamp == rhs.end_timestamp &&
    lhs.self_intent == rhs.self_intent &&
    lhs.scenario == rhs.scenario;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::PredictionObstacles_<ContainerAllocator1> & lhs, const ::ros_interface::PredictionObstacles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PredictionObstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PredictionObstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PredictionObstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PredictionObstacles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PredictionObstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PredictionObstacles_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::PredictionObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cece11669f9fb404fd25aca92c5416f2";
  }

  static const char* value(const ::ros_interface::PredictionObstacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcece11669f9fb404ULL;
  static const uint64_t static_value2 = 0xfd25aca92c5416f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::PredictionObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/PredictionObstacles";
  }

  static const char* value(const ::ros_interface::PredictionObstacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::PredictionObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # timestamp is included in header\n"
"PredictionObstacle[] prediction_obstacles # make prediction for multiple obstacles\n"
"int32   change_origin_flag     # 0:坐标系切换成功 1:坐标系切换中 2:坐标系切换故障\n"
"float64   start_timestamp     # start timestamp\n"
"float64   end_timestamp     # end timestamp\n"
"int32   self_intent     # 自动驾驶车辆意图  0-UNKNOWN, 1-STOP, 2-CRUISE, 3-CHANGE_LANE\n"
"int32   scenario     # 场景              0-UNKNOWN, 1000-CRUISE, 1001-CRUISE_URBAN 1002-CRUISE_HIGHWAY, 2000-JUNCTION  2001-JUNCTION_TRAFFIC_LIGHT 2002-JUNCTION_STOP_SIGN\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PredictionObstacle\n"
"PerceptionObstacle   perception_obstacle     # perception info of obstacle\n"
"float64   timestamp     # GPS time in seconds\n"
"float64   predicted_period     # the length of the time for this prediction (e.g. 10s)\n"
"TrajectoryInPrediction[] trajectory # can have multiple trajectories per obstacle\n"
"ObstacleIntent   intent     # 估计障碍物的意图        0-UNKNOWN, 1-STOP, 2-STATIONARY, 3-移动 MOVING, 4-HANGE_LANE, 5-LOW_ACCELERATION, 6-HIGH_ACCELERATION, 7-LOW_DECELERATION, 8-HIGH_DECELERATION, \n"
"ObstaclePriority   priority     # 障碍物优先级               1-CAUTION, 2-NORMAL, 3-IGNORE\n"
"ObstacleInteractiveTag   interactive_tag     #  \n"
"bool   is_static     # is obstacle static (default = false)\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PerceptionObstacle\n"
"int32   id     #  \n"
"Point3D   position     #  \n"
"float64   theta     #  \n"
"Point3D   velocity     #  \n"
"float64   length     #  \n"
"float64   width     #  \n"
"float64   height     #  \n"
"Point3D[] polygon_point #  \n"
"float64   tracking_time     #  \n"
"int32   type     # 障碍物类型： 0-Unknown 1-Unknown_movable 2-Unknown_unmovable 3-Pedestrian 4-Bicycle   5-Vehicle\n"
"int32   lane_position     # 车道线位置 -2-NEXT_LEFT_LANE -1-LEFT_LANE 0-EGO_LANE 1-RIGHT_LANE 2-NEXT_RIGHT_LANE 3-OTHERS 4-UNKNOWN\n"
"float64   confidence     #  \n"
"float64   timestamp     #  \n"
"uint8   confidence_type     # 置信度类型                  0-CONFIDENCE_UNKNOWN, 1-CONFIDENCE_CN, 2-CONFIDENCE_RAD\n"
"Point3D   drops     #  \n"
"Point3D   acceleration     #  \n"
"Point3D   anchor_point     #  \n"
"Point3D[] bounding_box #  \n"
"int32   sub_type     #  \n"
"float64   height_above_ground     #  \n"
"float64[] position_covariance #  \n"
"float64[] velocity_covariance #  \n"
"float64[] acceleration_covariance #  \n"
"uint8   light_status     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryInPrediction\n"
"float64   probability     # probability of this trajectory\n"
"TrajectoryPoint[] trajectory_points #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryPoint\n"
"PathPoint   path_point     # path point\n"
"float64   v     # linear velocity\n"
"float64   a     # linear acceleration\n"
"float64   relative_time     # relative time from beginning of the trajectory\n"
"float64   da     # longitudinal jerk\n"
"bool   is_steer_valid     # 转向是否有效\n"
"float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis\n"
"float64   rear_steer     # 后轮转角\n"
"int32   gear     # 档位\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PathPoint\n"
"float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ObstacleIntent\n"
"int32   type     # 估计障碍物的意图        0-UNKNOWN, 1-STOP, 2-STATIONARY, 3-移动 MOVING, 4-HANGE_LANE, 5-LOW_ACCELERATION, 6-HIGH_ACCELERATION, 7-LOW_DECELERATION, 8-HIGH_DECELERATION, \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ObstaclePriority\n"
"int32   priority     # CAUTION = 1; NORMAL = 2; IGNORE = 3;\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ObstacleInteractiveTag\n"
"int32   interactive_tag     #  \n"
;
  }

  static const char* value(const ::ros_interface::PredictionObstacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::PredictionObstacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.prediction_obstacles);
      stream.next(m.change_origin_flag);
      stream.next(m.start_timestamp);
      stream.next(m.end_timestamp);
      stream.next(m.self_intent);
      stream.next(m.scenario);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictionObstacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::PredictionObstacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::PredictionObstacles_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "prediction_obstacles[]" << std::endl;
    for (size_t i = 0; i < v.prediction_obstacles.size(); ++i)
    {
      s << indent << "  prediction_obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::PredictionObstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.prediction_obstacles[i]);
    }
    s << indent << "change_origin_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.change_origin_flag);
    s << indent << "start_timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.start_timestamp);
    s << indent << "end_timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.end_timestamp);
    s << indent << "self_intent: ";
    Printer<int32_t>::stream(s, indent + "  ", v.self_intent);
    s << indent << "scenario: ";
    Printer<int32_t>::stream(s, indent + "  ", v.scenario);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PREDICTIONOBSTACLES_H
