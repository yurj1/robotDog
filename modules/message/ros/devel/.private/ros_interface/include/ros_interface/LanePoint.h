// Generated by gencpp from file ros_interface/LanePoint.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_LANEPOINT_H
#define ROS_INTERFACE_MESSAGE_LANEPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct LanePoint_
{
  typedef LanePoint_<ContainerAllocator> Type;

  LanePoint_()
    : point()
    , theta(0.0)
    , mileage(0.0)
    , limit_speed(0.0)
    , left_road_width(0.0)
    , right_road_width(0.0)
    , left_line_type(0)
    , right_line_type(0)  {
    }
  LanePoint_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , theta(0.0)
    , mileage(0.0)
    , limit_speed(0.0)
    , left_road_width(0.0)
    , right_road_width(0.0)
    , left_line_type(0)
    , right_line_type(0)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _mileage_type;
  _mileage_type mileage;

   typedef double _limit_speed_type;
  _limit_speed_type limit_speed;

   typedef double _left_road_width_type;
  _left_road_width_type left_road_width;

   typedef double _right_road_width_type;
  _right_road_width_type right_road_width;

   typedef int32_t _left_line_type_type;
  _left_line_type_type left_line_type;

   typedef int32_t _right_line_type_type;
  _right_line_type_type right_line_type;





  typedef boost::shared_ptr< ::ros_interface::LanePoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::LanePoint_<ContainerAllocator> const> ConstPtr;

}; // struct LanePoint_

typedef ::ros_interface::LanePoint_<std::allocator<void> > LanePoint;

typedef boost::shared_ptr< ::ros_interface::LanePoint > LanePointPtr;
typedef boost::shared_ptr< ::ros_interface::LanePoint const> LanePointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::LanePoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::LanePoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::LanePoint_<ContainerAllocator1> & lhs, const ::ros_interface::LanePoint_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.theta == rhs.theta &&
    lhs.mileage == rhs.mileage &&
    lhs.limit_speed == rhs.limit_speed &&
    lhs.left_road_width == rhs.left_road_width &&
    lhs.right_road_width == rhs.right_road_width &&
    lhs.left_line_type == rhs.left_line_type &&
    lhs.right_line_type == rhs.right_line_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::LanePoint_<ContainerAllocator1> & lhs, const ::ros_interface::LanePoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LanePoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LanePoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LanePoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LanePoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LanePoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LanePoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::LanePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b86492a98e6209595aa1050feb0e5d3b";
  }

  static const char* value(const ::ros_interface::LanePoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb86492a98e620959ULL;
  static const uint64_t static_value2 = 0x5aa1050feb0e5d3bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::LanePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/LanePoint";
  }

  static const char* value(const ::ros_interface::LanePoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::LanePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point3D   point     # 点xyz\n"
"float64   theta     # 方向（与东方向夹角，逆时针方向为正，单位为弧度）\n"
"float64   mileage     # 总体里程\n"
"float64   limit_speed     # 地图限速（单位m/s）\n"
"float64   left_road_width     # 左边车道宽\n"
"float64   right_road_width     # 右边车道宽\n"
"int32   left_line_type     # 左边车线线型\n"
"int32   right_line_type     # 右边车线线型\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::LanePoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::LanePoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.theta);
      stream.next(m.mileage);
      stream.next(m.limit_speed);
      stream.next(m.left_road_width);
      stream.next(m.right_road_width);
      stream.next(m.left_line_type);
      stream.next(m.right_line_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LanePoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::LanePoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::LanePoint_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "mileage: ";
    Printer<double>::stream(s, indent + "  ", v.mileage);
    s << indent << "limit_speed: ";
    Printer<double>::stream(s, indent + "  ", v.limit_speed);
    s << indent << "left_road_width: ";
    Printer<double>::stream(s, indent + "  ", v.left_road_width);
    s << indent << "right_road_width: ";
    Printer<double>::stream(s, indent + "  ", v.right_road_width);
    s << indent << "left_line_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_line_type);
    s << indent << "right_line_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_line_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_LANEPOINT_H
