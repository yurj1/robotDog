// Generated by gencpp from file ros_interface/ParkingInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PARKINGINFO_H
#define ROS_INTERFACE_MESSAGE_PARKINGINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Polygon3D.h>
#include <ros_interface/ParkingStopper.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct ParkingInfo_
{
  typedef ParkingInfo_<ContainerAllocator> Type;

  ParkingInfo_()
    : header()
    , parking_space_id(0)
    , parking_type(0)
    , parking_status(0)
    , confidence(0.0)
    , center_point_of_parking()
    , theta(0.0)
    , width(0.0)
    , length(0.0)
    , yaw_offset(0.0)
    , polygon()
    , sensor_id(0)
    , is_lane_width_valid(false)
    , lane_width(0.0)
    , parking_stoppers()
    , parking_direction_type(0)
    , left_occupied_status(0)
    , right_occupied_status(0)
    , parking_source_type(0)  {
    }
  ParkingInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , parking_space_id(0)
    , parking_type(0)
    , parking_status(0)
    , confidence(0.0)
    , center_point_of_parking(_alloc)
    , theta(0.0)
    , width(0.0)
    , length(0.0)
    , yaw_offset(0.0)
    , polygon(_alloc)
    , sensor_id(0)
    , is_lane_width_valid(false)
    , lane_width(0.0)
    , parking_stoppers(_alloc)
    , parking_direction_type(0)
    , left_occupied_status(0)
    , right_occupied_status(0)
    , parking_source_type(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _parking_space_id_type;
  _parking_space_id_type parking_space_id;

   typedef int32_t _parking_type_type;
  _parking_type_type parking_type;

   typedef int32_t _parking_status_type;
  _parking_status_type parking_status;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _center_point_of_parking_type;
  _center_point_of_parking_type center_point_of_parking;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _width_type;
  _width_type width;

   typedef double _length_type;
  _length_type length;

   typedef double _yaw_offset_type;
  _yaw_offset_type yaw_offset;

   typedef  ::ros_interface::Polygon3D_<ContainerAllocator>  _polygon_type;
  _polygon_type polygon;

   typedef int32_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef uint8_t _is_lane_width_valid_type;
  _is_lane_width_valid_type is_lane_width_valid;

   typedef double _lane_width_type;
  _lane_width_type lane_width;

   typedef std::vector< ::ros_interface::ParkingStopper_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::ParkingStopper_<ContainerAllocator> >> _parking_stoppers_type;
  _parking_stoppers_type parking_stoppers;

   typedef int32_t _parking_direction_type_type;
  _parking_direction_type_type parking_direction_type;

   typedef int32_t _left_occupied_status_type;
  _left_occupied_status_type left_occupied_status;

   typedef int32_t _right_occupied_status_type;
  _right_occupied_status_type right_occupied_status;

   typedef int32_t _parking_source_type_type;
  _parking_source_type_type parking_source_type;





  typedef boost::shared_ptr< ::ros_interface::ParkingInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::ParkingInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ParkingInfo_

typedef ::ros_interface::ParkingInfo_<std::allocator<void> > ParkingInfo;

typedef boost::shared_ptr< ::ros_interface::ParkingInfo > ParkingInfoPtr;
typedef boost::shared_ptr< ::ros_interface::ParkingInfo const> ParkingInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::ParkingInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::ParkingInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::ParkingInfo_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.parking_space_id == rhs.parking_space_id &&
    lhs.parking_type == rhs.parking_type &&
    lhs.parking_status == rhs.parking_status &&
    lhs.confidence == rhs.confidence &&
    lhs.center_point_of_parking == rhs.center_point_of_parking &&
    lhs.theta == rhs.theta &&
    lhs.width == rhs.width &&
    lhs.length == rhs.length &&
    lhs.yaw_offset == rhs.yaw_offset &&
    lhs.polygon == rhs.polygon &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.is_lane_width_valid == rhs.is_lane_width_valid &&
    lhs.lane_width == rhs.lane_width &&
    lhs.parking_stoppers == rhs.parking_stoppers &&
    lhs.parking_direction_type == rhs.parking_direction_type &&
    lhs.left_occupied_status == rhs.left_occupied_status &&
    lhs.right_occupied_status == rhs.right_occupied_status &&
    lhs.parking_source_type == rhs.parking_source_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::ParkingInfo_<ContainerAllocator1> & lhs, const ::ros_interface::ParkingInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ParkingInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ParkingInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ParkingInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::ParkingInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b0489ffb7cd5f3eeb8bca19f9864670";
  }

  static const char* value(const ::ros_interface::ParkingInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b0489ffb7cd5f3eULL;
  static const uint64_t static_value2 = 0xeb8bca19f9864670ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::ParkingInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/ParkingInfo";
  }

  static const char* value(const ::ros_interface::ParkingInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::ParkingInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # timestamp is included in header\n"
"int32   parking_space_id     # 停车位id\n"
"int32   parking_type     # PARKING_TYPE=0//无效泊车 PARKING_TYPE=1//水平泊车 PARKING_TYPE=2//垂直泊车 PARKING_TYPE=3//倾斜泊车\n"
"int32   parking_status     # PARKING_ENABLE=0//可泊 PARKING_DISENABLE=1//不可泊 PARKING_NONOPTIONAL=2//不可选\n"
"float64   confidence     # 车位置信度\n"
"Point3D   center_point_of_parking     # 世界坐标系下停车位中心点\n"
"float64   theta     # 世界坐标系下的夹角（单位rad），车位出口与正东方向夹角\n"
"float64   width     # 停车位宽（单位m）\n"
"float64   length     # 停车位长单位m）\n"
"float64   yaw_offset     # 停车位角度偏移量（倾斜车位），倾斜车位与道路边线夹角,(单位m）\n"
"Polygon3D   polygon     # 世界坐标系下的车位多边形\n"
"int32   sensor_id     # 车位数据来自相机id 0-front_center相机 1-front_left相机 2-front_right相机 3-left_front相机 4-left_back右后相机 5-right_front相机 6-right_back相机 7-back相机 8-相机融合\n"
"bool   is_lane_width_valid     # 车道宽度是否有效\n"
"float64   lane_width     # 泊车可用(双)车道宽度\n"
"ParkingStopper[] parking_stoppers # 车位内部的限位器数组\n"
"int32   parking_direction_type     #   DIR_INVALID = 0,   LEFT = 1,   UP = 2,   RIGHT = 3,   DOWN = 4,\n"
"int32   left_occupied_status     # 0-unknown 未知，1-empty 空闲，2-occupied 被占用\n"
"int32   right_occupied_status     # 0-unknown 未知，1-empty 空闲，2-occupied 被占用\n"
"int32   parking_source_type     # 0-线车位， 1-空间车位， 2-融合车位\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Polygon3D\n"
"int32   coordinate_system     # 坐标系\n"
"Point3D[] points # 三维点集\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ParkingStopper\n"
"Header   header     # timestamp is  included in header\n"
"Point3D   center_point_vehicle     # 车辆坐标系下限位器中心点坐标\n"
"Point3D   center_point_abs     # 绝对坐标系下限位器中心点坐标\n"
"Point3D[] stopper_points_vehicle # 车辆坐标系下限位器关键点\n"
"Point3D[] stopper_points_abs # 绝对坐标系下限位器关键点\n"
;
  }

  static const char* value(const ::ros_interface::ParkingInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::ParkingInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.parking_space_id);
      stream.next(m.parking_type);
      stream.next(m.parking_status);
      stream.next(m.confidence);
      stream.next(m.center_point_of_parking);
      stream.next(m.theta);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.yaw_offset);
      stream.next(m.polygon);
      stream.next(m.sensor_id);
      stream.next(m.is_lane_width_valid);
      stream.next(m.lane_width);
      stream.next(m.parking_stoppers);
      stream.next(m.parking_direction_type);
      stream.next(m.left_occupied_status);
      stream.next(m.right_occupied_status);
      stream.next(m.parking_source_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParkingInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::ParkingInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::ParkingInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "parking_space_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_space_id);
    s << indent << "parking_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_type);
    s << indent << "parking_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_status);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "center_point_of_parking: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point_of_parking);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "yaw_offset: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_offset);
    s << indent << "polygon: ";
    s << std::endl;
    Printer< ::ros_interface::Polygon3D_<ContainerAllocator> >::stream(s, indent + "  ", v.polygon);
    s << indent << "sensor_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "is_lane_width_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_lane_width_valid);
    s << indent << "lane_width: ";
    Printer<double>::stream(s, indent + "  ", v.lane_width);
    s << indent << "parking_stoppers[]" << std::endl;
    for (size_t i = 0; i < v.parking_stoppers.size(); ++i)
    {
      s << indent << "  parking_stoppers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::ParkingStopper_<ContainerAllocator> >::stream(s, indent + "    ", v.parking_stoppers[i]);
    }
    s << indent << "parking_direction_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_direction_type);
    s << indent << "left_occupied_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_occupied_status);
    s << indent << "right_occupied_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_occupied_status);
    s << indent << "parking_source_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parking_source_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PARKINGINFO_H
