// Generated by gencpp from file ros_interface/LaneInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_LANEINFO_H
#define ROS_INTERFACE_MESSAGE_LANEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/LanePoint.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct LaneInfo_
{
  typedef LaneInfo_<ContainerAllocator> Type;

  LaneInfo_()
    : priority(0)
    , global_id(0)
    , predecessor_id(0)
    , successor_id(0)
    , left_neighbor_id(0)
    , right_neighbor_id(0)
    , type(0)
    , lane_points()  {
    }
  LaneInfo_(const ContainerAllocator& _alloc)
    : priority(0)
    , global_id(0)
    , predecessor_id(0)
    , successor_id(0)
    , left_neighbor_id(0)
    , right_neighbor_id(0)
    , type(0)
    , lane_points(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _priority_type;
  _priority_type priority;

   typedef int8_t _global_id_type;
  _global_id_type global_id;

   typedef int8_t _predecessor_id_type;
  _predecessor_id_type predecessor_id;

   typedef int8_t _successor_id_type;
  _successor_id_type successor_id;

   typedef int8_t _left_neighbor_id_type;
  _left_neighbor_id_type left_neighbor_id;

   typedef int8_t _right_neighbor_id_type;
  _right_neighbor_id_type right_neighbor_id;

   typedef int8_t _type_type;
  _type_type type;

   typedef std::vector< ::ros_interface::LanePoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::LanePoint_<ContainerAllocator> >> _lane_points_type;
  _lane_points_type lane_points;





  typedef boost::shared_ptr< ::ros_interface::LaneInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::LaneInfo_<ContainerAllocator> const> ConstPtr;

}; // struct LaneInfo_

typedef ::ros_interface::LaneInfo_<std::allocator<void> > LaneInfo;

typedef boost::shared_ptr< ::ros_interface::LaneInfo > LaneInfoPtr;
typedef boost::shared_ptr< ::ros_interface::LaneInfo const> LaneInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::LaneInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::LaneInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::LaneInfo_<ContainerAllocator1> & lhs, const ::ros_interface::LaneInfo_<ContainerAllocator2> & rhs)
{
  return lhs.priority == rhs.priority &&
    lhs.global_id == rhs.global_id &&
    lhs.predecessor_id == rhs.predecessor_id &&
    lhs.successor_id == rhs.successor_id &&
    lhs.left_neighbor_id == rhs.left_neighbor_id &&
    lhs.right_neighbor_id == rhs.right_neighbor_id &&
    lhs.type == rhs.type &&
    lhs.lane_points == rhs.lane_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::LaneInfo_<ContainerAllocator1> & lhs, const ::ros_interface::LaneInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LaneInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::LaneInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LaneInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::LaneInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LaneInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::LaneInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::LaneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ef29114104627b60d3c8213d422ab75";
  }

  static const char* value(const ::ros_interface::LaneInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ef29114104627b6ULL;
  static const uint64_t static_value2 = 0x0d3c8213d422ab75ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::LaneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/LaneInfo";
  }

  static const char* value(const ::ros_interface::LaneInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::LaneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8   priority     # 道路优先级\n"
"int8   global_id     # 道路全局id（从左至右，从0开始）\n"
"int8   predecessor_id     # 上一车道id\n"
"int8   successor_id     # 下一车道id\n"
"int8   left_neighbor_id     # 左边相邻车道id\n"
"int8   right_neighbor_id     # 右边相邻车道id\n"
"int8   type     # 类型（预留）\n"
"LanePoint[] lane_points # 道路参考线（z）\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/LanePoint\n"
"Point3D   point     # 点xyz\n"
"float64   theta     # 方向（与东方向夹角，逆时针方向为正，单位为弧度）\n"
"float64   mileage     # 总体里程\n"
"float64   limit_speed     # 地图限速（单位m/s）\n"
"float64   left_road_width     # 左边车道宽\n"
"float64   right_road_width     # 右边车道宽\n"
"int32   left_line_type     # 左边车线线型\n"
"int32   right_line_type     # 右边车线线型\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::LaneInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::LaneInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.priority);
      stream.next(m.global_id);
      stream.next(m.predecessor_id);
      stream.next(m.successor_id);
      stream.next(m.left_neighbor_id);
      stream.next(m.right_neighbor_id);
      stream.next(m.type);
      stream.next(m.lane_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::LaneInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::LaneInfo_<ContainerAllocator>& v)
  {
    s << indent << "priority: ";
    Printer<int8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "global_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.global_id);
    s << indent << "predecessor_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.predecessor_id);
    s << indent << "successor_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.successor_id);
    s << indent << "left_neighbor_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.left_neighbor_id);
    s << indent << "right_neighbor_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.right_neighbor_id);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "lane_points[]" << std::endl;
    for (size_t i = 0; i < v.lane_points.size(); ++i)
    {
      s << indent << "  lane_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::LanePoint_<ContainerAllocator> >::stream(s, indent + "    ", v.lane_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_LANEINFO_H
