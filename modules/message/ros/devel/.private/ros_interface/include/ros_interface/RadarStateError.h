// Generated by gencpp from file ros_interface/RadarStateError.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_RADARSTATEERROR_H
#define ROS_INTERFACE_MESSAGE_RADARSTATEERROR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct RadarStateError_
{
  typedef RadarStateError_<ContainerAllocator> Type;

  RadarStateError_()
    : persistent_error(0)
    , temporary_error(0)
    , interference_error(0)
    , temperature_error(0)
    , voltage_error(0)
    , block_error(0)
    , broadcast_error(0)
    , electric_axis_error(0)
    , config_error(0)
    , calibration_error(0)  {
    }
  RadarStateError_(const ContainerAllocator& _alloc)
    : persistent_error(0)
    , temporary_error(0)
    , interference_error(0)
    , temperature_error(0)
    , voltage_error(0)
    , block_error(0)
    , broadcast_error(0)
    , electric_axis_error(0)
    , config_error(0)
    , calibration_error(0)  {
  (void)_alloc;
    }



   typedef uint8_t _persistent_error_type;
  _persistent_error_type persistent_error;

   typedef uint8_t _temporary_error_type;
  _temporary_error_type temporary_error;

   typedef uint8_t _interference_error_type;
  _interference_error_type interference_error;

   typedef uint8_t _temperature_error_type;
  _temperature_error_type temperature_error;

   typedef uint8_t _voltage_error_type;
  _voltage_error_type voltage_error;

   typedef uint8_t _block_error_type;
  _block_error_type block_error;

   typedef uint8_t _broadcast_error_type;
  _broadcast_error_type broadcast_error;

   typedef uint8_t _electric_axis_error_type;
  _electric_axis_error_type electric_axis_error;

   typedef uint8_t _config_error_type;
  _config_error_type config_error;

   typedef uint8_t _calibration_error_type;
  _calibration_error_type calibration_error;





  typedef boost::shared_ptr< ::ros_interface::RadarStateError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::RadarStateError_<ContainerAllocator> const> ConstPtr;

}; // struct RadarStateError_

typedef ::ros_interface::RadarStateError_<std::allocator<void> > RadarStateError;

typedef boost::shared_ptr< ::ros_interface::RadarStateError > RadarStateErrorPtr;
typedef boost::shared_ptr< ::ros_interface::RadarStateError const> RadarStateErrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::RadarStateError_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::RadarStateError_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::RadarStateError_<ContainerAllocator1> & lhs, const ::ros_interface::RadarStateError_<ContainerAllocator2> & rhs)
{
  return lhs.persistent_error == rhs.persistent_error &&
    lhs.temporary_error == rhs.temporary_error &&
    lhs.interference_error == rhs.interference_error &&
    lhs.temperature_error == rhs.temperature_error &&
    lhs.voltage_error == rhs.voltage_error &&
    lhs.block_error == rhs.block_error &&
    lhs.broadcast_error == rhs.broadcast_error &&
    lhs.electric_axis_error == rhs.electric_axis_error &&
    lhs.config_error == rhs.config_error &&
    lhs.calibration_error == rhs.calibration_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::RadarStateError_<ContainerAllocator1> & lhs, const ::ros_interface::RadarStateError_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RadarStateError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RadarStateError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RadarStateError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RadarStateError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RadarStateError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RadarStateError_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::RadarStateError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4942ff8a1bc3c01e0fec7de2001e444c";
  }

  static const char* value(const ::ros_interface::RadarStateError_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4942ff8a1bc3c01eULL;
  static const uint64_t static_value2 = 0x0fec7de2001e444cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::RadarStateError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/RadarStateError";
  }

  static const char* value(const ::ros_interface::RadarStateError_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::RadarStateError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8   persistent_error     #  \n"
"uint8   temporary_error     #  \n"
"uint8   interference_error     #  \n"
"uint8   temperature_error     #  \n"
"uint8   voltage_error     #  \n"
"uint8   block_error     #  \n"
"uint8   broadcast_error     #  \n"
"uint8   electric_axis_error     #  \n"
"uint8   config_error     #  \n"
"uint8   calibration_error     #  \n"
;
  }

  static const char* value(const ::ros_interface::RadarStateError_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::RadarStateError_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.persistent_error);
      stream.next(m.temporary_error);
      stream.next(m.interference_error);
      stream.next(m.temperature_error);
      stream.next(m.voltage_error);
      stream.next(m.block_error);
      stream.next(m.broadcast_error);
      stream.next(m.electric_axis_error);
      stream.next(m.config_error);
      stream.next(m.calibration_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarStateError_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::RadarStateError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::RadarStateError_<ContainerAllocator>& v)
  {
    s << indent << "persistent_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.persistent_error);
    s << indent << "temporary_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temporary_error);
    s << indent << "interference_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interference_error);
    s << indent << "temperature_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temperature_error);
    s << indent << "voltage_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.voltage_error);
    s << indent << "block_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.block_error);
    s << indent << "broadcast_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.broadcast_error);
    s << indent << "electric_axis_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.electric_axis_error);
    s << indent << "config_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.config_error);
    s << indent << "calibration_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calibration_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_RADARSTATEERROR_H
