// Generated by gencpp from file ros_interface/RadarObstacleListMsg.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_RADAROBSTACLELISTMSG_H
#define ROS_INTERFACE_MESSAGE_RADAROBSTACLELISTMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/RadarObstacle.h>
#include <ros_interface/RadarState.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct RadarObstacleListMsg_
{
  typedef RadarObstacleListMsg_<ContainerAllocator> Type;

  RadarObstacleListMsg_()
    : header()
    , radar_obstacle()
    , sensor_id(0)
    , radar_state()
    , is_valid(false)  {
    }
  RadarObstacleListMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , radar_obstacle(_alloc)
    , sensor_id(0)
    , radar_state(_alloc)
    , is_valid(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::RadarObstacle_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::RadarObstacle_<ContainerAllocator> >> _radar_obstacle_type;
  _radar_obstacle_type radar_obstacle;

   typedef uint8_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef  ::ros_interface::RadarState_<ContainerAllocator>  _radar_state_type;
  _radar_state_type radar_state;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;





  typedef boost::shared_ptr< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RadarObstacleListMsg_

typedef ::ros_interface::RadarObstacleListMsg_<std::allocator<void> > RadarObstacleListMsg;

typedef boost::shared_ptr< ::ros_interface::RadarObstacleListMsg > RadarObstacleListMsgPtr;
typedef boost::shared_ptr< ::ros_interface::RadarObstacleListMsg const> RadarObstacleListMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::RadarObstacleListMsg_<ContainerAllocator1> & lhs, const ::ros_interface::RadarObstacleListMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.radar_obstacle == rhs.radar_obstacle &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.radar_state == rhs.radar_state &&
    lhs.is_valid == rhs.is_valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::RadarObstacleListMsg_<ContainerAllocator1> & lhs, const ::ros_interface::RadarObstacleListMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3660edcdfc572605c301b7d0cc42e1d4";
  }

  static const char* value(const ::ros_interface::RadarObstacleListMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3660edcdfc572605ULL;
  static const uint64_t static_value2 = 0xc301b7d0cc42e1d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/RadarObstacleListMsg";
  }

  static const char* value(const ::ros_interface::RadarObstacleListMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # 消息头\n"
"RadarObstacle[] radar_obstacle # 毫米波雷达障碍物数组\n"
"uint8   sensor_id     # 毫米波雷达 ID.\n"
"RadarState   radar_state     # radar state.\n"
"bool   is_valid     # true: valid  false: invalid\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/RadarObstacle\n"
"int32   id     # obstacle ID.\n"
"uint8   life_time     # 障碍物存在时间\n"
"Point2D   relative_position     # 雷达坐标系障碍物位置\n"
"Point2D   relative_position_rms     # 雷达坐标系障碍物位置标准差\n"
"Point2D   relative_velocity     # 雷达坐标系障碍物速度\n"
"Point2D   relative_velocity_rms     # 雷达坐标系障碍物速度标准差\n"
"Point2D   relative_acceleration     # 雷达坐标系障碍物加速度\n"
"Point2D   relative_acceleration_rms     # 雷达坐标系障碍物加速度标准差\n"
"float64   rcs     # 雷达散射面积\n"
"float64   snr     #  \n"
"int32   moving_status     # STATIONARY = 0; NEARING = 1; AWAYING = 2; NONE = 3;\n"
"float64   width     # 雷达障碍物宽度\n"
"float64   length     # 雷达障碍物长度\n"
"float64   height     # 雷达障碍物高度\n"
"float64   theta     #  \n"
"Point2D   absolute_position     # obstacle position in map coordinate system\n"
"Point2D   absolute_position_rms     #  \n"
"Point2D   absolute_velocity     # obstacle position in map coordinate system\n"
"Point2D   absolute_velocity_rms     #  \n"
"Point2D   absolute_acceleration     #  \n"
"Point2D   absolute_acceleration_rms     #  \n"
"float64   orientation     # 雷达障碍物方位角\n"
"float64   orient_rms     # 雷达障碍物方位角标准差\n"
"float64   yaw     #  \n"
"float64   yaw_rms     #  \n"
"int32   count     #  \n"
"int32   moving_frames_count     #  \n"
"Status   status     # 状态码\n"
"float64   underpass_probability     #  \n"
"float64   overpass_probability     #  \n"
"uint8   exist_probability     # 障碍物存在的概率\n"
"uint8   mov_property     # 障碍物移动属性：MOVING_PROPERTY_MOVING=0，MOVING_PROPERTY_STATIONARY=1，MOVING_PROPERTY_ONCOMING=2，MOVING_PROPERTY_STATIONARY_CANDIDATE=3，MOVING_PROPERTY_UNKOWN=4，MOVING_PROPERTY_CROSSING_STATIONARY=5，MOVING_PROPERTY_CROSSING_MOVING=6，MOVING_PROPERTY_STOPPED=7\n"
"uint8   track_state     # 跟踪状态：TRACK_STATE_DELETED=0；TRACK_STATE_INITED=1；TRACK_STATE_MEASURED=2；TRACK_STATE_PREDICTED=3；TRACK_STATE_DELETED_FOR_MERGE=4；TRACK_STATE_NEW_FOR_MERGE=5；\n"
"uint8   track_type     # 追踪的障碍物类型：TRACK_TYPE_POINT=0；TRACK_TYPE_CAR=1；TRACK_TYPE_TRUCK=2；TRACK_TYPE_PEDESTRIAN=3；TRACK_TYPE_MOTORCYCLE=4；TRACK_TYPE_BICYCLE=5；TRACK_TYPE_WIDE=6；TRACK_TYPE_RESERVED=7；TRACK_TYPE_BRIDGE=8；\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point2D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Status\n"
"int32   error_code     # 错误码\n"
"string   msg     # 错误码描述\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/RadarState\n"
"uint8   sensor_id     #  \n"
"uint8   nvm_read_status     #  \n"
"uint8   nvm_write_status     #  \n"
"RadarStateError   radar_state_error     #  \n"
"RadarStateMode   radar_state_mode     #  \n"
"uint16   max_distance     #  \n"
"uint8   sort_index     #  \n"
"uint8   radar_power     #  \n"
"uint8   ctl_relay     #  \n"
"uint8   output_type     #  \n"
"uint8   send_quality     #  \n"
"uint8   send_extinfo     #  \n"
"uint8   motion_rx_state     #  \n"
"uint8   rcs_threshold     #  \n"
"uint8   connector_direction     #  \n"
"uint8   radar_position     #  \n"
"uint8   hw_error     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/RadarStateError\n"
"uint8   persistent_error     #  \n"
"uint8   temporary_error     #  \n"
"uint8   interference_error     #  \n"
"uint8   temperature_error     #  \n"
"uint8   voltage_error     #  \n"
"uint8   block_error     #  \n"
"uint8   broadcast_error     #  \n"
"uint8   electric_axis_error     #  \n"
"uint8   config_error     #  \n"
"uint8   calibration_error     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/RadarStateMode\n"
"uint8   can0_work_mode     # can0工作模式\n"
"uint8   can1_work_mode     # can1工作模式\n"
"uint8   dual_can_mode     # 双总线工作模式\n"
"uint8   timming_mode     # 计时模式\n"
"uint8   power_mode     # 电源模式\n"
"uint8   performance_mode     # 效能模式\n"
;
  }

  static const char* value(const ::ros_interface::RadarObstacleListMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.radar_obstacle);
      stream.next(m.sensor_id);
      stream.next(m.radar_state);
      stream.next(m.is_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarObstacleListMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::RadarObstacleListMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::RadarObstacleListMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "radar_obstacle[]" << std::endl;
    for (size_t i = 0; i < v.radar_obstacle.size(); ++i)
    {
      s << indent << "  radar_obstacle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::RadarObstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.radar_obstacle[i]);
    }
    s << indent << "sensor_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "radar_state: ";
    s << std::endl;
    Printer< ::ros_interface::RadarState_<ContainerAllocator> >::stream(s, indent + "  ", v.radar_state);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_RADAROBSTACLELISTMSG_H
