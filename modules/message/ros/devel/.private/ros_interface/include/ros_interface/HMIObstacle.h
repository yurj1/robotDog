// Generated by gencpp from file ros_interface/HMIObstacle.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_HMIOBSTACLE_H
#define ROS_INTERFACE_MESSAGE_HMIOBSTACLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct HMIObstacle_
{
  typedef HMIObstacle_<ContainerAllocator> Type;

  HMIObstacle_()
    : id(0)
    , center_pos_vehicle()
    , center_pos_abs()
    , theta_vehicle(0.0)
    , theta_abs(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , type(0)
    , confidence(0.0)
    , confidence_type(0)
    , sub_type(0)
    , points()
    , cipv_flag(0)
    , fusion_type(0)  {
    }
  HMIObstacle_(const ContainerAllocator& _alloc)
    : id(0)
    , center_pos_vehicle(_alloc)
    , center_pos_abs(_alloc)
    , theta_vehicle(0.0)
    , theta_abs(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , type(0)
    , confidence(0.0)
    , confidence_type(0)
    , sub_type(0)
    , points(_alloc)
    , cipv_flag(0)
    , fusion_type(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _center_pos_vehicle_type;
  _center_pos_vehicle_type center_pos_vehicle;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _center_pos_abs_type;
  _center_pos_abs_type center_pos_abs;

   typedef double _theta_vehicle_type;
  _theta_vehicle_type theta_vehicle;

   typedef double _theta_abs_type;
  _theta_abs_type theta_abs;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef int32_t _type_type;
  _type_type type;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef int32_t _confidence_type_type;
  _confidence_type_type confidence_type;

   typedef int32_t _sub_type_type;
  _sub_type_type sub_type;

   typedef std::vector< ::ros_interface::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point3D_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef uint8_t _cipv_flag_type;
  _cipv_flag_type cipv_flag;

   typedef int32_t _fusion_type_type;
  _fusion_type_type fusion_type;





  typedef boost::shared_ptr< ::ros_interface::HMIObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::HMIObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct HMIObstacle_

typedef ::ros_interface::HMIObstacle_<std::allocator<void> > HMIObstacle;

typedef boost::shared_ptr< ::ros_interface::HMIObstacle > HMIObstaclePtr;
typedef boost::shared_ptr< ::ros_interface::HMIObstacle const> HMIObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::HMIObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::HMIObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::HMIObstacle_<ContainerAllocator1> & lhs, const ::ros_interface::HMIObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.center_pos_vehicle == rhs.center_pos_vehicle &&
    lhs.center_pos_abs == rhs.center_pos_abs &&
    lhs.theta_vehicle == rhs.theta_vehicle &&
    lhs.theta_abs == rhs.theta_abs &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.type == rhs.type &&
    lhs.confidence == rhs.confidence &&
    lhs.confidence_type == rhs.confidence_type &&
    lhs.sub_type == rhs.sub_type &&
    lhs.points == rhs.points &&
    lhs.cipv_flag == rhs.cipv_flag &&
    lhs.fusion_type == rhs.fusion_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::HMIObstacle_<ContainerAllocator1> & lhs, const ::ros_interface::HMIObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMIObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMIObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMIObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMIObstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMIObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMIObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::HMIObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ab6a424b93e3cb3c742f3a87ab0d5da";
  }

  static const char* value(const ::ros_interface::HMIObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ab6a424b93e3cb3ULL;
  static const uint64_t static_value2 = 0xc742f3a87ab0d5daULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::HMIObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/HMIObstacle";
  }

  static const char* value(const ::ros_interface::HMIObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::HMIObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   id     # 障碍物id\n"
"Point3D   center_pos_vehicle     # 车辆坐标系下障碍物的中心位置\n"
"Point3D   center_pos_abs     # 世界坐标系下障碍物的中心位置\n"
"float64   theta_vehicle     # 车辆坐标系下障碍物的朝向\n"
"float64   theta_abs     # 世界坐标系下障碍物的朝向\n"
"float64   length     # 障碍物长度\n"
"float64   width     # 障碍物宽度\n"
"float64   height     # 障碍物高度\n"
"int32   type     # 障碍物类别： UNKNOWN = 0; UNKNOWN_MOVABLE = 1; UNKNOWN_UNMOVABLE = 2; PEDESTRIAN = 3; BICYCLE = 4; VEHICLE = 5;\n"
"float64   confidence     # 障碍物类别置信度\n"
"int32   confidence_type     # 障碍物置信度类别： CONFIDENCE_UNKNOWN = 0; CONFIDENCE_CNN = 1; CONFIDENCE_RADAR = 2;\n"
"int32   sub_type     # 障碍物类别： ST_UNKNOWN = 0; ST_UNKNOWN_MOVABLE = 1; ST_UNKNOWN_UNMOVABLE = 2; ST_CAR = 3; ST_VAN = 4; ST_TRUCK = 5; ST_BUS = 6; ST_CYCLIST = 7; ST_MOTORCYCLIST = 8; ST_TRICYCLIST = 9; ST_PEDESTRIAN = 10; ST_TRAFFICCONE = 11; ST_PILLAR = 12; ST_SPEED_BUMP = 13;\n"
"Point3D[] points #  \n"
"uint8   cipv_flag     # 障碍物状态标志（0-CIPV 1-CIPS 2-LPIHP 3-RPIHP 4-NONE）\n"
"int32   fusion_type     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::HMIObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::HMIObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.center_pos_vehicle);
      stream.next(m.center_pos_abs);
      stream.next(m.theta_vehicle);
      stream.next(m.theta_abs);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.type);
      stream.next(m.confidence);
      stream.next(m.confidence_type);
      stream.next(m.sub_type);
      stream.next(m.points);
      stream.next(m.cipv_flag);
      stream.next(m.fusion_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMIObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::HMIObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::HMIObstacle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "center_pos_vehicle: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.center_pos_vehicle);
    s << indent << "center_pos_abs: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.center_pos_abs);
    s << indent << "theta_vehicle: ";
    Printer<double>::stream(s, indent + "  ", v.theta_vehicle);
    s << indent << "theta_abs: ";
    Printer<double>::stream(s, indent + "  ", v.theta_abs);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "confidence_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.confidence_type);
    s << indent << "sub_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sub_type);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "cipv_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cipv_flag);
    s << indent << "fusion_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fusion_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_HMIOBSTACLE_H
