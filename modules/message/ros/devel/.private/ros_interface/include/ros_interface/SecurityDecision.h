// Generated by gencpp from file ros_interface/SecurityDecision.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_SECURITYDECISION_H
#define ROS_INTERFACE_MESSAGE_SECURITYDECISION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/WarningCommand.h>
#include <ros_interface/TrajectoryLimitCommand.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct SecurityDecision_
{
  typedef SecurityDecision_<ContainerAllocator> Type;

  SecurityDecision_()
    : header()
    , warning_command()
    , brake_report(0)
    , change_lane_command(0)
    , trajectory_limit_command()
    , park_command(0)
    , drivingmode_report(0)  {
    }
  SecurityDecision_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , warning_command(_alloc)
    , brake_report(0)
    , change_lane_command(0)
    , trajectory_limit_command(_alloc)
    , park_command(0)
    , drivingmode_report(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_interface::WarningCommand_<ContainerAllocator>  _warning_command_type;
  _warning_command_type warning_command;

   typedef int32_t _brake_report_type;
  _brake_report_type brake_report;

   typedef int32_t _change_lane_command_type;
  _change_lane_command_type change_lane_command;

   typedef  ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator>  _trajectory_limit_command_type;
  _trajectory_limit_command_type trajectory_limit_command;

   typedef int32_t _park_command_type;
  _park_command_type park_command;

   typedef int32_t _drivingmode_report_type;
  _drivingmode_report_type drivingmode_report;





  typedef boost::shared_ptr< ::ros_interface::SecurityDecision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::SecurityDecision_<ContainerAllocator> const> ConstPtr;

}; // struct SecurityDecision_

typedef ::ros_interface::SecurityDecision_<std::allocator<void> > SecurityDecision;

typedef boost::shared_ptr< ::ros_interface::SecurityDecision > SecurityDecisionPtr;
typedef boost::shared_ptr< ::ros_interface::SecurityDecision const> SecurityDecisionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::SecurityDecision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::SecurityDecision_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::SecurityDecision_<ContainerAllocator1> & lhs, const ::ros_interface::SecurityDecision_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.warning_command == rhs.warning_command &&
    lhs.brake_report == rhs.brake_report &&
    lhs.change_lane_command == rhs.change_lane_command &&
    lhs.trajectory_limit_command == rhs.trajectory_limit_command &&
    lhs.park_command == rhs.park_command &&
    lhs.drivingmode_report == rhs.drivingmode_report;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::SecurityDecision_<ContainerAllocator1> & lhs, const ::ros_interface::SecurityDecision_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::SecurityDecision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::SecurityDecision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::SecurityDecision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::SecurityDecision_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::SecurityDecision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::SecurityDecision_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::SecurityDecision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af506ab87db1445b82ef49696ba48931";
  }

  static const char* value(const ::ros_interface::SecurityDecision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf506ab87db1445bULL;
  static const uint64_t static_value2 = 0x82ef49696ba48931ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::SecurityDecision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/SecurityDecision";
  }

  static const char* value(const ::ros_interface::SecurityDecision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::SecurityDecision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"WarningCommand   warning_command     # 告警指令\n"
"int32   brake_report     # 刹车报告\n"
"int32   change_lane_command     # 换道指令\n"
"TrajectoryLimitCommand   trajectory_limit_command     # 轨迹限制指令\n"
"int32   park_command     # 停车指令\n"
"int32   drivingmode_report     # 驾驶模式报告\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/WarningCommand\n"
"int32   sound_alarm     # 声音告警\n"
"int32   light_alarm     # 车灯告警\n"
"int32   media_alarm     # 媒体告警\n"
"int32   motion_alarm     # 震动告警\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryLimitCommand\n"
"bool   speed_limit_enable     #  \n"
"float64   speed_limit     # m/s\n"
"bool   kappa_limit_enable     #  \n"
"float64   kappa_limit     # deg/m\n"
;
  }

  static const char* value(const ::ros_interface::SecurityDecision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::SecurityDecision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.warning_command);
      stream.next(m.brake_report);
      stream.next(m.change_lane_command);
      stream.next(m.trajectory_limit_command);
      stream.next(m.park_command);
      stream.next(m.drivingmode_report);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SecurityDecision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::SecurityDecision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::SecurityDecision_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "warning_command: ";
    s << std::endl;
    Printer< ::ros_interface::WarningCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.warning_command);
    s << indent << "brake_report: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake_report);
    s << indent << "change_lane_command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.change_lane_command);
    s << indent << "trajectory_limit_command: ";
    s << std::endl;
    Printer< ::ros_interface::TrajectoryLimitCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory_limit_command);
    s << indent << "park_command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.park_command);
    s << indent << "drivingmode_report: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drivingmode_report);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_SECURITYDECISION_H
