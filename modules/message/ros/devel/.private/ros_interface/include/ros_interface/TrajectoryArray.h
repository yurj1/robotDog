// Generated by gencpp from file ros_interface/TrajectoryArray.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_TRAJECTORYARRAY_H
#define ROS_INTERFACE_MESSAGE_TRAJECTORYARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Path.h>
#include <ros_interface/Path.h>
#include <ros_interface/Trajectory.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct TrajectoryArray_
{
  typedef TrajectoryArray_<ContainerAllocator> Type;

  TrajectoryArray_()
    : header()
    , spline_s()
    , qp_smooth()
    , trajectory_list()  {
    }
  TrajectoryArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , spline_s(_alloc)
    , qp_smooth(_alloc)
    , trajectory_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::Path_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Path_<ContainerAllocator> >> _spline_s_type;
  _spline_s_type spline_s;

   typedef std::vector< ::ros_interface::Path_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Path_<ContainerAllocator> >> _qp_smooth_type;
  _qp_smooth_type qp_smooth;

   typedef std::vector< ::ros_interface::Trajectory_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Trajectory_<ContainerAllocator> >> _trajectory_list_type;
  _trajectory_list_type trajectory_list;





  typedef boost::shared_ptr< ::ros_interface::TrajectoryArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::TrajectoryArray_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryArray_

typedef ::ros_interface::TrajectoryArray_<std::allocator<void> > TrajectoryArray;

typedef boost::shared_ptr< ::ros_interface::TrajectoryArray > TrajectoryArrayPtr;
typedef boost::shared_ptr< ::ros_interface::TrajectoryArray const> TrajectoryArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::TrajectoryArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::TrajectoryArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::TrajectoryArray_<ContainerAllocator1> & lhs, const ::ros_interface::TrajectoryArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.spline_s == rhs.spline_s &&
    lhs.qp_smooth == rhs.qp_smooth &&
    lhs.trajectory_list == rhs.trajectory_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::TrajectoryArray_<ContainerAllocator1> & lhs, const ::ros_interface::TrajectoryArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrajectoryArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::TrajectoryArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrajectoryArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::TrajectoryArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrajectoryArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::TrajectoryArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::TrajectoryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33d5a1b58d846157b2f4c4b6792cafb5";
  }

  static const char* value(const ::ros_interface::TrajectoryArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33d5a1b58d846157ULL;
  static const uint64_t static_value2 = 0xb2f4c4b6792cafb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::TrajectoryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/TrajectoryArray";
  }

  static const char* value(const ::ros_interface::TrajectoryArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::TrajectoryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"Path[] spline_s # 样条拟合曲线\n"
"Path[] qp_smooth # qp参考线拟合\n"
"Trajectory[] trajectory_list # 轨迹簇\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Path\n"
"string   name     # 名称\n"
"PathPoint[] path_points # 路径点集\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PathPoint\n"
"float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Trajectory\n"
"string   name     # 轨迹名称\n"
"TrajectoryPoint[] trajectory_points # 轨迹点\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/TrajectoryPoint\n"
"PathPoint   path_point     # path point\n"
"float64   v     # linear velocity\n"
"float64   a     # linear acceleration\n"
"float64   relative_time     # relative time from beginning of the trajectory\n"
"float64   da     # longitudinal jerk\n"
"bool   is_steer_valid     # 转向是否有效\n"
"float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis\n"
"float64   rear_steer     # 后轮转角\n"
"int32   gear     # 档位\n"
;
  }

  static const char* value(const ::ros_interface::TrajectoryArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::TrajectoryArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.spline_s);
      stream.next(m.qp_smooth);
      stream.next(m.trajectory_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::TrajectoryArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::TrajectoryArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "spline_s[]" << std::endl;
    for (size_t i = 0; i < v.spline_s.size(); ++i)
    {
      s << indent << "  spline_s[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Path_<ContainerAllocator> >::stream(s, indent + "    ", v.spline_s[i]);
    }
    s << indent << "qp_smooth[]" << std::endl;
    for (size_t i = 0; i < v.qp_smooth.size(); ++i)
    {
      s << indent << "  qp_smooth[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Path_<ContainerAllocator> >::stream(s, indent + "    ", v.qp_smooth[i]);
    }
    s << indent << "trajectory_list[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_list.size(); ++i)
    {
      s << indent << "  trajectory_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Trajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_TRAJECTORYARRAY_H
