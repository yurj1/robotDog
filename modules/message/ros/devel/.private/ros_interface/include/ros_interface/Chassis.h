// Generated by gencpp from file ros_interface/Chassis.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_CHASSIS_H
#define ROS_INTERFACE_MESSAGE_CHASSIS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Chassis_
{
  typedef Chassis_<ContainerAllocator> Type;

  Chassis_()
    : header()
    , moving_status(0)
    , driving_mode(0)
    , steer_driving_mode(0)
    , steering_status(0)
    , front_steering_value(0.0)
    , rear_steering_value(0.0)
    , steering_torque_nm(0.0)
    , front_steering_rate_dps(0.0)
    , rear_steering_rate_dps(0.0)
    , accel_driving_mode(0)
    , accel_status(0)
    , accel_value(0.0)
    , brake_driving_mode(0)
    , brake_status(0)
    , brake_value(0.0)
    , backup_brake_driving_mode(0)
    , backup_brake_status(0)
    , backup_brake_value(0.0)
    , epb_driving_mode(0)
    , epb_status(0)
    , epb_level(0)
    , engine_status(0)
    , engine_rpm(0.0)
    , engine_torque(0.0)
    , speed_mps(0.0)
    , odometer_m(0.0)
    , fuel_range_m(0)
    , gear_driving_mode(0)
    , gear_status(0)
    , gear_location(0)
    , driver_seat_belt(0)
    , high_beam_status(0)
    , low_beam_status(0)
    , horn_status(0)
    , turn_lamp_status(0)
    , front_wiper_status(0)
    , rear_wiper_status(0)
    , position_lamp_status(0)
    , front_fog_lamp_status(0)
    , rear_fog_lamp_status(0)
    , brake_lamp_status(0)
    , alarm_lamp_status(0)
    , lf_door_status(0)
    , rf_door_status(0)
    , lr_door_status(0)
    , rr_door_status(0)
    , rearview_mirror_status(0)
    , trunk_status(0)
    , engine_bay_door_status(0)
    , wheel_direction_rr(0)
    , wheel_spd_rr(0.0)
    , wheel_direction_rl(0)
    , wheel_spd_rl(0.0)
    , wheel_direction_fr(0)
    , wheel_spd_fr(0.0)
    , wheel_direction_fl(0)
    , wheel_spd_fl(0.0)
    , is_tire_pressure_ok(0)
    , is_tire_pressure_lf_valid(0)
    , tire_pressure_lf(0.0)
    , is_tire_pressure_rf_valid(0)
    , tire_pressure_rf(0.0)
    , is_tire_pressure_lr_valid(0)
    , tire_pressure_lr(0.0)
    , is_tire_pressure_rr_valid(0)
    , tire_pressure_rr(0.0)
    , battery_power_percentage(0.0)
    , air_bag_status(0)
    , charging_gun_status(0)
    , vehicle_power_status(0)
    , chassis_error_code()  {
    }
  Chassis_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , moving_status(0)
    , driving_mode(0)
    , steer_driving_mode(0)
    , steering_status(0)
    , front_steering_value(0.0)
    , rear_steering_value(0.0)
    , steering_torque_nm(0.0)
    , front_steering_rate_dps(0.0)
    , rear_steering_rate_dps(0.0)
    , accel_driving_mode(0)
    , accel_status(0)
    , accel_value(0.0)
    , brake_driving_mode(0)
    , brake_status(0)
    , brake_value(0.0)
    , backup_brake_driving_mode(0)
    , backup_brake_status(0)
    , backup_brake_value(0.0)
    , epb_driving_mode(0)
    , epb_status(0)
    , epb_level(0)
    , engine_status(0)
    , engine_rpm(0.0)
    , engine_torque(0.0)
    , speed_mps(0.0)
    , odometer_m(0.0)
    , fuel_range_m(0)
    , gear_driving_mode(0)
    , gear_status(0)
    , gear_location(0)
    , driver_seat_belt(0)
    , high_beam_status(0)
    , low_beam_status(0)
    , horn_status(0)
    , turn_lamp_status(0)
    , front_wiper_status(0)
    , rear_wiper_status(0)
    , position_lamp_status(0)
    , front_fog_lamp_status(0)
    , rear_fog_lamp_status(0)
    , brake_lamp_status(0)
    , alarm_lamp_status(0)
    , lf_door_status(0)
    , rf_door_status(0)
    , lr_door_status(0)
    , rr_door_status(0)
    , rearview_mirror_status(0)
    , trunk_status(0)
    , engine_bay_door_status(0)
    , wheel_direction_rr(0)
    , wheel_spd_rr(0.0)
    , wheel_direction_rl(0)
    , wheel_spd_rl(0.0)
    , wheel_direction_fr(0)
    , wheel_spd_fr(0.0)
    , wheel_direction_fl(0)
    , wheel_spd_fl(0.0)
    , is_tire_pressure_ok(0)
    , is_tire_pressure_lf_valid(0)
    , tire_pressure_lf(0.0)
    , is_tire_pressure_rf_valid(0)
    , tire_pressure_rf(0.0)
    , is_tire_pressure_lr_valid(0)
    , tire_pressure_lr(0.0)
    , is_tire_pressure_rr_valid(0)
    , tire_pressure_rr(0.0)
    , battery_power_percentage(0.0)
    , air_bag_status(0)
    , charging_gun_status(0)
    , vehicle_power_status(0)
    , chassis_error_code(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _moving_status_type;
  _moving_status_type moving_status;

   typedef int32_t _driving_mode_type;
  _driving_mode_type driving_mode;

   typedef int32_t _steer_driving_mode_type;
  _steer_driving_mode_type steer_driving_mode;

   typedef int32_t _steering_status_type;
  _steering_status_type steering_status;

   typedef double _front_steering_value_type;
  _front_steering_value_type front_steering_value;

   typedef double _rear_steering_value_type;
  _rear_steering_value_type rear_steering_value;

   typedef double _steering_torque_nm_type;
  _steering_torque_nm_type steering_torque_nm;

   typedef double _front_steering_rate_dps_type;
  _front_steering_rate_dps_type front_steering_rate_dps;

   typedef double _rear_steering_rate_dps_type;
  _rear_steering_rate_dps_type rear_steering_rate_dps;

   typedef int32_t _accel_driving_mode_type;
  _accel_driving_mode_type accel_driving_mode;

   typedef int32_t _accel_status_type;
  _accel_status_type accel_status;

   typedef double _accel_value_type;
  _accel_value_type accel_value;

   typedef int32_t _brake_driving_mode_type;
  _brake_driving_mode_type brake_driving_mode;

   typedef int32_t _brake_status_type;
  _brake_status_type brake_status;

   typedef double _brake_value_type;
  _brake_value_type brake_value;

   typedef int32_t _backup_brake_driving_mode_type;
  _backup_brake_driving_mode_type backup_brake_driving_mode;

   typedef int32_t _backup_brake_status_type;
  _backup_brake_status_type backup_brake_status;

   typedef double _backup_brake_value_type;
  _backup_brake_value_type backup_brake_value;

   typedef int32_t _epb_driving_mode_type;
  _epb_driving_mode_type epb_driving_mode;

   typedef int32_t _epb_status_type;
  _epb_status_type epb_status;

   typedef int32_t _epb_level_type;
  _epb_level_type epb_level;

   typedef int32_t _engine_status_type;
  _engine_status_type engine_status;

   typedef double _engine_rpm_type;
  _engine_rpm_type engine_rpm;

   typedef double _engine_torque_type;
  _engine_torque_type engine_torque;

   typedef double _speed_mps_type;
  _speed_mps_type speed_mps;

   typedef double _odometer_m_type;
  _odometer_m_type odometer_m;

   typedef int32_t _fuel_range_m_type;
  _fuel_range_m_type fuel_range_m;

   typedef int32_t _gear_driving_mode_type;
  _gear_driving_mode_type gear_driving_mode;

   typedef int32_t _gear_status_type;
  _gear_status_type gear_status;

   typedef int32_t _gear_location_type;
  _gear_location_type gear_location;

   typedef int32_t _driver_seat_belt_type;
  _driver_seat_belt_type driver_seat_belt;

   typedef int32_t _high_beam_status_type;
  _high_beam_status_type high_beam_status;

   typedef int32_t _low_beam_status_type;
  _low_beam_status_type low_beam_status;

   typedef int32_t _horn_status_type;
  _horn_status_type horn_status;

   typedef int32_t _turn_lamp_status_type;
  _turn_lamp_status_type turn_lamp_status;

   typedef int32_t _front_wiper_status_type;
  _front_wiper_status_type front_wiper_status;

   typedef int32_t _rear_wiper_status_type;
  _rear_wiper_status_type rear_wiper_status;

   typedef int32_t _position_lamp_status_type;
  _position_lamp_status_type position_lamp_status;

   typedef int32_t _front_fog_lamp_status_type;
  _front_fog_lamp_status_type front_fog_lamp_status;

   typedef int32_t _rear_fog_lamp_status_type;
  _rear_fog_lamp_status_type rear_fog_lamp_status;

   typedef int32_t _brake_lamp_status_type;
  _brake_lamp_status_type brake_lamp_status;

   typedef int32_t _alarm_lamp_status_type;
  _alarm_lamp_status_type alarm_lamp_status;

   typedef int32_t _lf_door_status_type;
  _lf_door_status_type lf_door_status;

   typedef int32_t _rf_door_status_type;
  _rf_door_status_type rf_door_status;

   typedef int32_t _lr_door_status_type;
  _lr_door_status_type lr_door_status;

   typedef int32_t _rr_door_status_type;
  _rr_door_status_type rr_door_status;

   typedef int32_t _rearview_mirror_status_type;
  _rearview_mirror_status_type rearview_mirror_status;

   typedef int32_t _trunk_status_type;
  _trunk_status_type trunk_status;

   typedef int32_t _engine_bay_door_status_type;
  _engine_bay_door_status_type engine_bay_door_status;

   typedef int32_t _wheel_direction_rr_type;
  _wheel_direction_rr_type wheel_direction_rr;

   typedef double _wheel_spd_rr_type;
  _wheel_spd_rr_type wheel_spd_rr;

   typedef int32_t _wheel_direction_rl_type;
  _wheel_direction_rl_type wheel_direction_rl;

   typedef double _wheel_spd_rl_type;
  _wheel_spd_rl_type wheel_spd_rl;

   typedef int32_t _wheel_direction_fr_type;
  _wheel_direction_fr_type wheel_direction_fr;

   typedef double _wheel_spd_fr_type;
  _wheel_spd_fr_type wheel_spd_fr;

   typedef int32_t _wheel_direction_fl_type;
  _wheel_direction_fl_type wheel_direction_fl;

   typedef double _wheel_spd_fl_type;
  _wheel_spd_fl_type wheel_spd_fl;

   typedef int32_t _is_tire_pressure_ok_type;
  _is_tire_pressure_ok_type is_tire_pressure_ok;

   typedef int32_t _is_tire_pressure_lf_valid_type;
  _is_tire_pressure_lf_valid_type is_tire_pressure_lf_valid;

   typedef double _tire_pressure_lf_type;
  _tire_pressure_lf_type tire_pressure_lf;

   typedef int32_t _is_tire_pressure_rf_valid_type;
  _is_tire_pressure_rf_valid_type is_tire_pressure_rf_valid;

   typedef double _tire_pressure_rf_type;
  _tire_pressure_rf_type tire_pressure_rf;

   typedef int32_t _is_tire_pressure_lr_valid_type;
  _is_tire_pressure_lr_valid_type is_tire_pressure_lr_valid;

   typedef double _tire_pressure_lr_type;
  _tire_pressure_lr_type tire_pressure_lr;

   typedef int32_t _is_tire_pressure_rr_valid_type;
  _is_tire_pressure_rr_valid_type is_tire_pressure_rr_valid;

   typedef double _tire_pressure_rr_type;
  _tire_pressure_rr_type tire_pressure_rr;

   typedef double _battery_power_percentage_type;
  _battery_power_percentage_type battery_power_percentage;

   typedef int32_t _air_bag_status_type;
  _air_bag_status_type air_bag_status;

   typedef int32_t _charging_gun_status_type;
  _charging_gun_status_type charging_gun_status;

   typedef int32_t _vehicle_power_status_type;
  _vehicle_power_status_type vehicle_power_status;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _chassis_error_code_type;
  _chassis_error_code_type chassis_error_code;





  typedef boost::shared_ptr< ::ros_interface::Chassis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Chassis_<ContainerAllocator> const> ConstPtr;

}; // struct Chassis_

typedef ::ros_interface::Chassis_<std::allocator<void> > Chassis;

typedef boost::shared_ptr< ::ros_interface::Chassis > ChassisPtr;
typedef boost::shared_ptr< ::ros_interface::Chassis const> ChassisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Chassis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Chassis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Chassis_<ContainerAllocator1> & lhs, const ::ros_interface::Chassis_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.moving_status == rhs.moving_status &&
    lhs.driving_mode == rhs.driving_mode &&
    lhs.steer_driving_mode == rhs.steer_driving_mode &&
    lhs.steering_status == rhs.steering_status &&
    lhs.front_steering_value == rhs.front_steering_value &&
    lhs.rear_steering_value == rhs.rear_steering_value &&
    lhs.steering_torque_nm == rhs.steering_torque_nm &&
    lhs.front_steering_rate_dps == rhs.front_steering_rate_dps &&
    lhs.rear_steering_rate_dps == rhs.rear_steering_rate_dps &&
    lhs.accel_driving_mode == rhs.accel_driving_mode &&
    lhs.accel_status == rhs.accel_status &&
    lhs.accel_value == rhs.accel_value &&
    lhs.brake_driving_mode == rhs.brake_driving_mode &&
    lhs.brake_status == rhs.brake_status &&
    lhs.brake_value == rhs.brake_value &&
    lhs.backup_brake_driving_mode == rhs.backup_brake_driving_mode &&
    lhs.backup_brake_status == rhs.backup_brake_status &&
    lhs.backup_brake_value == rhs.backup_brake_value &&
    lhs.epb_driving_mode == rhs.epb_driving_mode &&
    lhs.epb_status == rhs.epb_status &&
    lhs.epb_level == rhs.epb_level &&
    lhs.engine_status == rhs.engine_status &&
    lhs.engine_rpm == rhs.engine_rpm &&
    lhs.engine_torque == rhs.engine_torque &&
    lhs.speed_mps == rhs.speed_mps &&
    lhs.odometer_m == rhs.odometer_m &&
    lhs.fuel_range_m == rhs.fuel_range_m &&
    lhs.gear_driving_mode == rhs.gear_driving_mode &&
    lhs.gear_status == rhs.gear_status &&
    lhs.gear_location == rhs.gear_location &&
    lhs.driver_seat_belt == rhs.driver_seat_belt &&
    lhs.high_beam_status == rhs.high_beam_status &&
    lhs.low_beam_status == rhs.low_beam_status &&
    lhs.horn_status == rhs.horn_status &&
    lhs.turn_lamp_status == rhs.turn_lamp_status &&
    lhs.front_wiper_status == rhs.front_wiper_status &&
    lhs.rear_wiper_status == rhs.rear_wiper_status &&
    lhs.position_lamp_status == rhs.position_lamp_status &&
    lhs.front_fog_lamp_status == rhs.front_fog_lamp_status &&
    lhs.rear_fog_lamp_status == rhs.rear_fog_lamp_status &&
    lhs.brake_lamp_status == rhs.brake_lamp_status &&
    lhs.alarm_lamp_status == rhs.alarm_lamp_status &&
    lhs.lf_door_status == rhs.lf_door_status &&
    lhs.rf_door_status == rhs.rf_door_status &&
    lhs.lr_door_status == rhs.lr_door_status &&
    lhs.rr_door_status == rhs.rr_door_status &&
    lhs.rearview_mirror_status == rhs.rearview_mirror_status &&
    lhs.trunk_status == rhs.trunk_status &&
    lhs.engine_bay_door_status == rhs.engine_bay_door_status &&
    lhs.wheel_direction_rr == rhs.wheel_direction_rr &&
    lhs.wheel_spd_rr == rhs.wheel_spd_rr &&
    lhs.wheel_direction_rl == rhs.wheel_direction_rl &&
    lhs.wheel_spd_rl == rhs.wheel_spd_rl &&
    lhs.wheel_direction_fr == rhs.wheel_direction_fr &&
    lhs.wheel_spd_fr == rhs.wheel_spd_fr &&
    lhs.wheel_direction_fl == rhs.wheel_direction_fl &&
    lhs.wheel_spd_fl == rhs.wheel_spd_fl &&
    lhs.is_tire_pressure_ok == rhs.is_tire_pressure_ok &&
    lhs.is_tire_pressure_lf_valid == rhs.is_tire_pressure_lf_valid &&
    lhs.tire_pressure_lf == rhs.tire_pressure_lf &&
    lhs.is_tire_pressure_rf_valid == rhs.is_tire_pressure_rf_valid &&
    lhs.tire_pressure_rf == rhs.tire_pressure_rf &&
    lhs.is_tire_pressure_lr_valid == rhs.is_tire_pressure_lr_valid &&
    lhs.tire_pressure_lr == rhs.tire_pressure_lr &&
    lhs.is_tire_pressure_rr_valid == rhs.is_tire_pressure_rr_valid &&
    lhs.tire_pressure_rr == rhs.tire_pressure_rr &&
    lhs.battery_power_percentage == rhs.battery_power_percentage &&
    lhs.air_bag_status == rhs.air_bag_status &&
    lhs.charging_gun_status == rhs.charging_gun_status &&
    lhs.vehicle_power_status == rhs.vehicle_power_status &&
    lhs.chassis_error_code == rhs.chassis_error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Chassis_<ContainerAllocator1> & lhs, const ::ros_interface::Chassis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Chassis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Chassis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Chassis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Chassis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Chassis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Chassis_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Chassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1317f867e7ec2fbfa7cc1f5b9d053a00";
  }

  static const char* value(const ::ros_interface::Chassis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1317f867e7ec2fbfULL;
  static const uint64_t static_value2 = 0xa7cc1f5b9d053a00ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Chassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Chassis";
  }

  static const char* value(const ::ros_interface::Chassis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Chassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"int32   moving_status     # 移动状态\n"
"int32   driving_mode     # 驾驶状态\n"
"int32   steer_driving_mode     # 线控转向驾驶模式\n"
"int32   steering_status     # 线控转向执行器状态\n"
"float64   front_steering_value     # 方向盘转角\n"
"float64   rear_steering_value     # 后轮转角\n"
"float64   steering_torque_nm     # 方向盘扭矩\n"
"float64   front_steering_rate_dps     # 方向盘转速\n"
"float64   rear_steering_rate_dps     # 方向盘转速\n"
"int32   accel_driving_mode     # 线控驱动驾驶模式\n"
"int32   accel_status     # 线控驱动状态\n"
"float64   accel_value     # 线控驱动值（油门值）\n"
"int32   brake_driving_mode     # 线控制动驾驶模式\n"
"int32   brake_status     # 线控制动状态\n"
"float64   brake_value     # 线控制动值（刹车值）\n"
"int32   backup_brake_driving_mode     # 备用线控制动驾驶模式\n"
"int32   backup_brake_status     # 备用线控制动状态\n"
"float64   backup_brake_value     # 备用线控制动值\n"
"int32   epb_driving_mode     # EPB驾驶模式\n"
"int32   epb_status     # EPB状态\n"
"int32   epb_level     # EPB档位\n"
"int32   engine_status     # 发动机状态\n"
"float64   engine_rpm     # 发动机转速\n"
"float64   engine_torque     # 发动机扭矩\n"
"float64   speed_mps     # 车速（m/s）\n"
"float64   odometer_m     # 里程(m)\n"
"int32   fuel_range_m     # 油表值\n"
"int32   gear_driving_mode     # 档位驾驶模式\n"
"int32   gear_status     # 档位状态\n"
"int32   gear_location     # 档位值\n"
"int32   driver_seat_belt     # 主驾驶位安全带状态\n"
"int32   high_beam_status     # 远光灯状态\n"
"int32   low_beam_status     # 近光灯状态\n"
"int32   horn_status     # 喇叭状态\n"
"int32   turn_lamp_status     # 转向灯状态\n"
"int32   front_wiper_status     # 前雨刮器状态\n"
"int32   rear_wiper_status     # 后雨刮器状态\n"
"int32   position_lamp_status     # 位置灯状态\n"
"int32   front_fog_lamp_status     # 前雾灯状态\n"
"int32   rear_fog_lamp_status     # 后雾灯状态\n"
"int32   brake_lamp_status     # 刹车灯状态\n"
"int32   alarm_lamp_status     # 报警灯状态\n"
"int32   lf_door_status     # 左前门状态\n"
"int32   rf_door_status     # 右前门状态\n"
"int32   lr_door_status     # 左后门状态\n"
"int32   rr_door_status     # 右后门状态\n"
"int32   rearview_mirror_status     # 后视镜状态\n"
"int32   trunk_status     # 后备箱盖状态\n"
"int32   engine_bay_door_status     # 发送机舱盖状态\n"
"int32   wheel_direction_rr     # 右后轮方向\n"
"float64   wheel_spd_rr     # 右后轮速\n"
"int32   wheel_direction_rl     # 左后轮方向\n"
"float64   wheel_spd_rl     # 左后轮值\n"
"int32   wheel_direction_fr     # 右前轮方向\n"
"float64   wheel_spd_fr     # 右前轮速\n"
"int32   wheel_direction_fl     # 左前轮方向\n"
"float64   wheel_spd_fl     # 左前轮速\n"
"int32   is_tire_pressure_ok     # 胎压是否正常\n"
"int32   is_tire_pressure_lf_valid     # 左前轮胎压是否有效\n"
"float64   tire_pressure_lf     # 左前轮胎压\n"
"int32   is_tire_pressure_rf_valid     # 右前轮胎压是否有效\n"
"float64   tire_pressure_rf     # 右前轮胎压\n"
"int32   is_tire_pressure_lr_valid     # 左后轮胎压是否有效\n"
"float64   tire_pressure_lr     # 左后轮胎压\n"
"int32   is_tire_pressure_rr_valid     # 右后轮胎压是否有效\n"
"float64   tire_pressure_rr     # 右后轮胎压\n"
"float64   battery_power_percentage     # 电池电量值\n"
"int32   air_bag_status     # 气囊状态\n"
"int32   charging_gun_status     # 充电枪状态\n"
"int32   vehicle_power_status     # 电量表状态\n"
"int32[] chassis_error_code # 底盘错误码\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_interface::Chassis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Chassis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.moving_status);
      stream.next(m.driving_mode);
      stream.next(m.steer_driving_mode);
      stream.next(m.steering_status);
      stream.next(m.front_steering_value);
      stream.next(m.rear_steering_value);
      stream.next(m.steering_torque_nm);
      stream.next(m.front_steering_rate_dps);
      stream.next(m.rear_steering_rate_dps);
      stream.next(m.accel_driving_mode);
      stream.next(m.accel_status);
      stream.next(m.accel_value);
      stream.next(m.brake_driving_mode);
      stream.next(m.brake_status);
      stream.next(m.brake_value);
      stream.next(m.backup_brake_driving_mode);
      stream.next(m.backup_brake_status);
      stream.next(m.backup_brake_value);
      stream.next(m.epb_driving_mode);
      stream.next(m.epb_status);
      stream.next(m.epb_level);
      stream.next(m.engine_status);
      stream.next(m.engine_rpm);
      stream.next(m.engine_torque);
      stream.next(m.speed_mps);
      stream.next(m.odometer_m);
      stream.next(m.fuel_range_m);
      stream.next(m.gear_driving_mode);
      stream.next(m.gear_status);
      stream.next(m.gear_location);
      stream.next(m.driver_seat_belt);
      stream.next(m.high_beam_status);
      stream.next(m.low_beam_status);
      stream.next(m.horn_status);
      stream.next(m.turn_lamp_status);
      stream.next(m.front_wiper_status);
      stream.next(m.rear_wiper_status);
      stream.next(m.position_lamp_status);
      stream.next(m.front_fog_lamp_status);
      stream.next(m.rear_fog_lamp_status);
      stream.next(m.brake_lamp_status);
      stream.next(m.alarm_lamp_status);
      stream.next(m.lf_door_status);
      stream.next(m.rf_door_status);
      stream.next(m.lr_door_status);
      stream.next(m.rr_door_status);
      stream.next(m.rearview_mirror_status);
      stream.next(m.trunk_status);
      stream.next(m.engine_bay_door_status);
      stream.next(m.wheel_direction_rr);
      stream.next(m.wheel_spd_rr);
      stream.next(m.wheel_direction_rl);
      stream.next(m.wheel_spd_rl);
      stream.next(m.wheel_direction_fr);
      stream.next(m.wheel_spd_fr);
      stream.next(m.wheel_direction_fl);
      stream.next(m.wheel_spd_fl);
      stream.next(m.is_tire_pressure_ok);
      stream.next(m.is_tire_pressure_lf_valid);
      stream.next(m.tire_pressure_lf);
      stream.next(m.is_tire_pressure_rf_valid);
      stream.next(m.tire_pressure_rf);
      stream.next(m.is_tire_pressure_lr_valid);
      stream.next(m.tire_pressure_lr);
      stream.next(m.is_tire_pressure_rr_valid);
      stream.next(m.tire_pressure_rr);
      stream.next(m.battery_power_percentage);
      stream.next(m.air_bag_status);
      stream.next(m.charging_gun_status);
      stream.next(m.vehicle_power_status);
      stream.next(m.chassis_error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Chassis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Chassis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Chassis_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "moving_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.moving_status);
    s << indent << "driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.driving_mode);
    s << indent << "steer_driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_driving_mode);
    s << indent << "steering_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steering_status);
    s << indent << "front_steering_value: ";
    Printer<double>::stream(s, indent + "  ", v.front_steering_value);
    s << indent << "rear_steering_value: ";
    Printer<double>::stream(s, indent + "  ", v.rear_steering_value);
    s << indent << "steering_torque_nm: ";
    Printer<double>::stream(s, indent + "  ", v.steering_torque_nm);
    s << indent << "front_steering_rate_dps: ";
    Printer<double>::stream(s, indent + "  ", v.front_steering_rate_dps);
    s << indent << "rear_steering_rate_dps: ";
    Printer<double>::stream(s, indent + "  ", v.rear_steering_rate_dps);
    s << indent << "accel_driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accel_driving_mode);
    s << indent << "accel_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accel_status);
    s << indent << "accel_value: ";
    Printer<double>::stream(s, indent + "  ", v.accel_value);
    s << indent << "brake_driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake_driving_mode);
    s << indent << "brake_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake_status);
    s << indent << "brake_value: ";
    Printer<double>::stream(s, indent + "  ", v.brake_value);
    s << indent << "backup_brake_driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.backup_brake_driving_mode);
    s << indent << "backup_brake_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.backup_brake_status);
    s << indent << "backup_brake_value: ";
    Printer<double>::stream(s, indent + "  ", v.backup_brake_value);
    s << indent << "epb_driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.epb_driving_mode);
    s << indent << "epb_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.epb_status);
    s << indent << "epb_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.epb_level);
    s << indent << "engine_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.engine_status);
    s << indent << "engine_rpm: ";
    Printer<double>::stream(s, indent + "  ", v.engine_rpm);
    s << indent << "engine_torque: ";
    Printer<double>::stream(s, indent + "  ", v.engine_torque);
    s << indent << "speed_mps: ";
    Printer<double>::stream(s, indent + "  ", v.speed_mps);
    s << indent << "odometer_m: ";
    Printer<double>::stream(s, indent + "  ", v.odometer_m);
    s << indent << "fuel_range_m: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fuel_range_m);
    s << indent << "gear_driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear_driving_mode);
    s << indent << "gear_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear_status);
    s << indent << "gear_location: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear_location);
    s << indent << "driver_seat_belt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.driver_seat_belt);
    s << indent << "high_beam_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.high_beam_status);
    s << indent << "low_beam_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.low_beam_status);
    s << indent << "horn_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.horn_status);
    s << indent << "turn_lamp_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turn_lamp_status);
    s << indent << "front_wiper_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.front_wiper_status);
    s << indent << "rear_wiper_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rear_wiper_status);
    s << indent << "position_lamp_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position_lamp_status);
    s << indent << "front_fog_lamp_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.front_fog_lamp_status);
    s << indent << "rear_fog_lamp_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rear_fog_lamp_status);
    s << indent << "brake_lamp_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake_lamp_status);
    s << indent << "alarm_lamp_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.alarm_lamp_status);
    s << indent << "lf_door_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lf_door_status);
    s << indent << "rf_door_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rf_door_status);
    s << indent << "lr_door_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lr_door_status);
    s << indent << "rr_door_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rr_door_status);
    s << indent << "rearview_mirror_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rearview_mirror_status);
    s << indent << "trunk_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trunk_status);
    s << indent << "engine_bay_door_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.engine_bay_door_status);
    s << indent << "wheel_direction_rr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheel_direction_rr);
    s << indent << "wheel_spd_rr: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_spd_rr);
    s << indent << "wheel_direction_rl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheel_direction_rl);
    s << indent << "wheel_spd_rl: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_spd_rl);
    s << indent << "wheel_direction_fr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheel_direction_fr);
    s << indent << "wheel_spd_fr: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_spd_fr);
    s << indent << "wheel_direction_fl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheel_direction_fl);
    s << indent << "wheel_spd_fl: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_spd_fl);
    s << indent << "is_tire_pressure_ok: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_tire_pressure_ok);
    s << indent << "is_tire_pressure_lf_valid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_tire_pressure_lf_valid);
    s << indent << "tire_pressure_lf: ";
    Printer<double>::stream(s, indent + "  ", v.tire_pressure_lf);
    s << indent << "is_tire_pressure_rf_valid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_tire_pressure_rf_valid);
    s << indent << "tire_pressure_rf: ";
    Printer<double>::stream(s, indent + "  ", v.tire_pressure_rf);
    s << indent << "is_tire_pressure_lr_valid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_tire_pressure_lr_valid);
    s << indent << "tire_pressure_lr: ";
    Printer<double>::stream(s, indent + "  ", v.tire_pressure_lr);
    s << indent << "is_tire_pressure_rr_valid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_tire_pressure_rr_valid);
    s << indent << "tire_pressure_rr: ";
    Printer<double>::stream(s, indent + "  ", v.tire_pressure_rr);
    s << indent << "battery_power_percentage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_power_percentage);
    s << indent << "air_bag_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.air_bag_status);
    s << indent << "charging_gun_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.charging_gun_status);
    s << indent << "vehicle_power_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vehicle_power_status);
    s << indent << "chassis_error_code[]" << std::endl;
    for (size_t i = 0; i < v.chassis_error_code.size(); ++i)
    {
      s << indent << "  chassis_error_code[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.chassis_error_code[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_CHASSIS_H
