// Generated by gencpp from file ros_interface/StopPoint.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_STOPPOINT_H
#define ROS_INTERFACE_MESSAGE_STOPPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct StopPoint_
{
  typedef StopPoint_<ContainerAllocator> Type;

  StopPoint_()
    : point()
    , theta(0.0)
    , type(0)
    , stop_distance(0.0)  {
    }
  StopPoint_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , theta(0.0)
    , type(0)
    , stop_distance(0.0)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef double _theta_type;
  _theta_type theta;

   typedef int8_t _type_type;
  _type_type type;

   typedef double _stop_distance_type;
  _stop_distance_type stop_distance;





  typedef boost::shared_ptr< ::ros_interface::StopPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::StopPoint_<ContainerAllocator> const> ConstPtr;

}; // struct StopPoint_

typedef ::ros_interface::StopPoint_<std::allocator<void> > StopPoint;

typedef boost::shared_ptr< ::ros_interface::StopPoint > StopPointPtr;
typedef boost::shared_ptr< ::ros_interface::StopPoint const> StopPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::StopPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::StopPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::StopPoint_<ContainerAllocator1> & lhs, const ::ros_interface::StopPoint_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.theta == rhs.theta &&
    lhs.type == rhs.type &&
    lhs.stop_distance == rhs.stop_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::StopPoint_<ContainerAllocator1> & lhs, const ::ros_interface::StopPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::StopPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::StopPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::StopPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::StopPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::StopPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::StopPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::StopPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f7f748188c196901f90cc702c2618c4";
  }

  static const char* value(const ::ros_interface::StopPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f7f748188c19690ULL;
  static const uint64_t static_value2 = 0x1f90cc702c2618c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::StopPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/StopPoint";
  }

  static const char* value(const ::ros_interface::StopPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::StopPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point3D   point     # 点xyz\n"
"float64   theta     # 方向（与东方向夹角，逆时针方向为正，单位为弧度）\n"
"int8   type     # STOP_TYPE_TERMINAL=0 //目的地终点 STOP_TYPE_JUNCTION=1 //路口停止线\n"
"float64   stop_distance     # 距停止点多少米停车\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::StopPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::StopPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.theta);
      stream.next(m.type);
      stream.next(m.stop_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StopPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::StopPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::StopPoint_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "stop_distance: ";
    Printer<double>::stream(s, indent + "  ", v.stop_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_STOPPOINT_H
