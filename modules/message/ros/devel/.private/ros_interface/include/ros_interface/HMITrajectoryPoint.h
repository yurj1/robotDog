// Generated by gencpp from file ros_interface/HMITrajectoryPoint.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_HMITRAJECTORYPOINT_H
#define ROS_INTERFACE_MESSAGE_HMITRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct HMITrajectoryPoint_
{
  typedef HMITrajectoryPoint_<ContainerAllocator> Type;

  HMITrajectoryPoint_()
    : point()
    , v(0.0)  {
    }
  HMITrajectoryPoint_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , v(0.0)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef double _v_type;
  _v_type v;





  typedef boost::shared_ptr< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct HMITrajectoryPoint_

typedef ::ros_interface::HMITrajectoryPoint_<std::allocator<void> > HMITrajectoryPoint;

typedef boost::shared_ptr< ::ros_interface::HMITrajectoryPoint > HMITrajectoryPointPtr;
typedef boost::shared_ptr< ::ros_interface::HMITrajectoryPoint const> HMITrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::HMITrajectoryPoint_<ContainerAllocator1> & lhs, const ::ros_interface::HMITrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.v == rhs.v;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::HMITrajectoryPoint_<ContainerAllocator1> & lhs, const ::ros_interface::HMITrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee1cc429c82f6cef953c1a1066bd1db2";
  }

  static const char* value(const ::ros_interface::HMITrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee1cc429c82f6cefULL;
  static const uint64_t static_value2 = 0x953c1a1066bd1db2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/HMITrajectoryPoint";
  }

  static const char* value(const ::ros_interface::HMITrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point3D   point     #  \n"
"float64   v     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::HMITrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.v);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMITrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::HMITrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::HMITrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_HMITRAJECTORYPOINT_H
