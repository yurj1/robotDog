// Generated by gencpp from file ros_interface/PerceptionObstacle.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PERCEPTIONOBSTACLE_H
#define ROS_INTERFACE_MESSAGE_PERCEPTIONOBSTACLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct PerceptionObstacle_
{
  typedef PerceptionObstacle_<ContainerAllocator> Type;

  PerceptionObstacle_()
    : id(0)
    , position()
    , theta(0.0)
    , velocity()
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , polygon_point()
    , tracking_time(0.0)
    , type(0)
    , lane_position(0)
    , confidence(0.0)
    , timestamp(0.0)
    , confidence_type(0)
    , drops()
    , acceleration()
    , anchor_point()
    , bounding_box()
    , sub_type(0)
    , height_above_ground(0.0)
    , position_covariance()
    , velocity_covariance()
    , acceleration_covariance()
    , light_status(0)  {
    }
  PerceptionObstacle_(const ContainerAllocator& _alloc)
    : id(0)
    , position(_alloc)
    , theta(0.0)
    , velocity(_alloc)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , polygon_point(_alloc)
    , tracking_time(0.0)
    , type(0)
    , lane_position(0)
    , confidence(0.0)
    , timestamp(0.0)
    , confidence_type(0)
    , drops(_alloc)
    , acceleration(_alloc)
    , anchor_point(_alloc)
    , bounding_box(_alloc)
    , sub_type(0)
    , height_above_ground(0.0)
    , position_covariance(_alloc)
    , velocity_covariance(_alloc)
    , acceleration_covariance(_alloc)
    , light_status(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _theta_type;
  _theta_type theta;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef std::vector< ::ros_interface::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point3D_<ContainerAllocator> >> _polygon_point_type;
  _polygon_point_type polygon_point;

   typedef double _tracking_time_type;
  _tracking_time_type tracking_time;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _lane_position_type;
  _lane_position_type lane_position;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _confidence_type_type;
  _confidence_type_type confidence_type;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _drops_type;
  _drops_type drops;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _anchor_point_type;
  _anchor_point_type anchor_point;

   typedef std::vector< ::ros_interface::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Point3D_<ContainerAllocator> >> _bounding_box_type;
  _bounding_box_type bounding_box;

   typedef int32_t _sub_type_type;
  _sub_type_type sub_type;

   typedef double _height_above_ground_type;
  _height_above_ground_type height_above_ground;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _position_covariance_type;
  _position_covariance_type position_covariance;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _velocity_covariance_type;
  _velocity_covariance_type velocity_covariance;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _acceleration_covariance_type;
  _acceleration_covariance_type acceleration_covariance;

   typedef uint8_t _light_status_type;
  _light_status_type light_status;





  typedef boost::shared_ptr< ::ros_interface::PerceptionObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::PerceptionObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct PerceptionObstacle_

typedef ::ros_interface::PerceptionObstacle_<std::allocator<void> > PerceptionObstacle;

typedef boost::shared_ptr< ::ros_interface::PerceptionObstacle > PerceptionObstaclePtr;
typedef boost::shared_ptr< ::ros_interface::PerceptionObstacle const> PerceptionObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::PerceptionObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::PerceptionObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::PerceptionObstacle_<ContainerAllocator1> & lhs, const ::ros_interface::PerceptionObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.theta == rhs.theta &&
    lhs.velocity == rhs.velocity &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.polygon_point == rhs.polygon_point &&
    lhs.tracking_time == rhs.tracking_time &&
    lhs.type == rhs.type &&
    lhs.lane_position == rhs.lane_position &&
    lhs.confidence == rhs.confidence &&
    lhs.timestamp == rhs.timestamp &&
    lhs.confidence_type == rhs.confidence_type &&
    lhs.drops == rhs.drops &&
    lhs.acceleration == rhs.acceleration &&
    lhs.anchor_point == rhs.anchor_point &&
    lhs.bounding_box == rhs.bounding_box &&
    lhs.sub_type == rhs.sub_type &&
    lhs.height_above_ground == rhs.height_above_ground &&
    lhs.position_covariance == rhs.position_covariance &&
    lhs.velocity_covariance == rhs.velocity_covariance &&
    lhs.acceleration_covariance == rhs.acceleration_covariance &&
    lhs.light_status == rhs.light_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::PerceptionObstacle_<ContainerAllocator1> & lhs, const ::ros_interface::PerceptionObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PerceptionObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PerceptionObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PerceptionObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PerceptionObstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PerceptionObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PerceptionObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::PerceptionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eec97df9ec7b9c83ab21ca50cb74bf7c";
  }

  static const char* value(const ::ros_interface::PerceptionObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeec97df9ec7b9c83ULL;
  static const uint64_t static_value2 = 0xab21ca50cb74bf7cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::PerceptionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/PerceptionObstacle";
  }

  static const char* value(const ::ros_interface::PerceptionObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::PerceptionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   id     #  \n"
"Point3D   position     #  \n"
"float64   theta     #  \n"
"Point3D   velocity     #  \n"
"float64   length     #  \n"
"float64   width     #  \n"
"float64   height     #  \n"
"Point3D[] polygon_point #  \n"
"float64   tracking_time     #  \n"
"int32   type     # 障碍物类型： 0-Unknown 1-Unknown_movable 2-Unknown_unmovable 3-Pedestrian 4-Bicycle   5-Vehicle\n"
"int32   lane_position     # 车道线位置 -2-NEXT_LEFT_LANE -1-LEFT_LANE 0-EGO_LANE 1-RIGHT_LANE 2-NEXT_RIGHT_LANE 3-OTHERS 4-UNKNOWN\n"
"float64   confidence     #  \n"
"float64   timestamp     #  \n"
"uint8   confidence_type     # 置信度类型                  0-CONFIDENCE_UNKNOWN, 1-CONFIDENCE_CN, 2-CONFIDENCE_RAD\n"
"Point3D   drops     #  \n"
"Point3D   acceleration     #  \n"
"Point3D   anchor_point     #  \n"
"Point3D[] bounding_box #  \n"
"int32   sub_type     #  \n"
"float64   height_above_ground     #  \n"
"float64[] position_covariance #  \n"
"float64[] velocity_covariance #  \n"
"float64[] acceleration_covariance #  \n"
"uint8   light_status     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::PerceptionObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::PerceptionObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.theta);
      stream.next(m.velocity);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.polygon_point);
      stream.next(m.tracking_time);
      stream.next(m.type);
      stream.next(m.lane_position);
      stream.next(m.confidence);
      stream.next(m.timestamp);
      stream.next(m.confidence_type);
      stream.next(m.drops);
      stream.next(m.acceleration);
      stream.next(m.anchor_point);
      stream.next(m.bounding_box);
      stream.next(m.sub_type);
      stream.next(m.height_above_ground);
      stream.next(m.position_covariance);
      stream.next(m.velocity_covariance);
      stream.next(m.acceleration_covariance);
      stream.next(m.light_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerceptionObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::PerceptionObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::PerceptionObstacle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "polygon_point[]" << std::endl;
    for (size_t i = 0; i < v.polygon_point.size(); ++i)
    {
      s << indent << "  polygon_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.polygon_point[i]);
    }
    s << indent << "tracking_time: ";
    Printer<double>::stream(s, indent + "  ", v.tracking_time);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "lane_position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_position);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "confidence_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confidence_type);
    s << indent << "drops: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.drops);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "anchor_point: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.anchor_point);
    s << indent << "bounding_box[]" << std::endl;
    for (size_t i = 0; i < v.bounding_box.size(); ++i)
    {
      s << indent << "  bounding_box[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.bounding_box[i]);
    }
    s << indent << "sub_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sub_type);
    s << indent << "height_above_ground: ";
    Printer<double>::stream(s, indent + "  ", v.height_above_ground);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_covariance[i]);
    }
    s << indent << "velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.velocity_covariance.size(); ++i)
    {
      s << indent << "  velocity_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity_covariance[i]);
    }
    s << indent << "acceleration_covariance[]" << std::endl;
    for (size_t i = 0; i < v.acceleration_covariance.size(); ++i)
    {
      s << indent << "  acceleration_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acceleration_covariance[i]);
    }
    s << indent << "light_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PERCEPTIONOBSTACLE_H
