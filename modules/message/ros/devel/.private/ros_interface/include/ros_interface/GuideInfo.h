// Generated by gencpp from file ros_interface/GuideInfo.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_GUIDEINFO_H
#define ROS_INTERFACE_MESSAGE_GUIDEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/GuideRoad.h>
#include <ros_interface/GuideRoad.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct GuideInfo_
{
  typedef GuideInfo_<ContainerAllocator> Type;

  GuideInfo_()
    : header()
    , next_dis(0.0)
    , current_road()
    , next_road()
    , round_status(0)
    , intersection_status(0)
    , roads_status(0)  {
    }
  GuideInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , next_dis(0.0)
    , current_road(_alloc)
    , next_road(_alloc)
    , round_status(0)
    , intersection_status(0)
    , roads_status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _next_dis_type;
  _next_dis_type next_dis;

   typedef  ::ros_interface::GuideRoad_<ContainerAllocator>  _current_road_type;
  _current_road_type current_road;

   typedef  ::ros_interface::GuideRoad_<ContainerAllocator>  _next_road_type;
  _next_road_type next_road;

   typedef int8_t _round_status_type;
  _round_status_type round_status;

   typedef int8_t _intersection_status_type;
  _intersection_status_type intersection_status;

   typedef int8_t _roads_status_type;
  _roads_status_type roads_status;





  typedef boost::shared_ptr< ::ros_interface::GuideInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::GuideInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GuideInfo_

typedef ::ros_interface::GuideInfo_<std::allocator<void> > GuideInfo;

typedef boost::shared_ptr< ::ros_interface::GuideInfo > GuideInfoPtr;
typedef boost::shared_ptr< ::ros_interface::GuideInfo const> GuideInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::GuideInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::GuideInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::GuideInfo_<ContainerAllocator1> & lhs, const ::ros_interface::GuideInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.next_dis == rhs.next_dis &&
    lhs.current_road == rhs.current_road &&
    lhs.next_road == rhs.next_road &&
    lhs.round_status == rhs.round_status &&
    lhs.intersection_status == rhs.intersection_status &&
    lhs.roads_status == rhs.roads_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::GuideInfo_<ContainerAllocator1> & lhs, const ::ros_interface::GuideInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::GuideInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::GuideInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::GuideInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::GuideInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::GuideInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::GuideInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::GuideInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa74d1653e11a6cb191e3ce919a1654f";
  }

  static const char* value(const ::ros_interface::GuideInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa74d1653e11a6cbULL;
  static const uint64_t static_value2 = 0x191e3ce919a1654fULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::GuideInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/GuideInfo";
  }

  static const char* value(const ::ros_interface::GuideInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::GuideInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     # 头部信息\n"
"float64   next_dis     # 下一条规划路线上道路的距离\n"
"GuideRoad   current_road     # 当前道路的引导信息\n"
"GuideRoad   next_road     # 下一条规划道路的引导信息\n"
"int8   round_status     # 环岛状态: 0：未知或非环岛状态 1：当前为非环岛道路并且规划路线即将驶入环岛主路 2：当前道路类型是环岛并且规划路线还是在环岛主路中行驶 3：当前道路类型是环岛并且规划路线即将驶出环岛主路\n"
"int8   intersection_status     # 交叉路口状态: 0：未知 1：非交叉路口状态 2：交叉路口通行状态\n"
"int8   roads_status     # 主辅路状态： 0：未知或非主辅路状态 1：当前道路类型是辅路下一条道路类型是主路  2：当前道路类型是主路下一条道路类型是辅路\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/GuideRoad\n"
"int64   road_id     # 道路的id\n"
"int8   road_type     # 道路的类型: 0：未知或一般道路  1：环岛 2：交叉路口 3：主路 4：辅路\n"
"int8   turn_type     # 规划路线上道路的转向信息 1：左转 2：直行 3：右转\n"
"float64   avg_curvature     # 道路的平均曲率\n"
"int32   curvature_size     # 道路中心线上点(曲率)数量\n"
"CurvatureInfo[] curvature # 道路曲率信息数组\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/CurvatureInfo\n"
"float64   offset     # 道路中心线上点位于该道路的位置（与道路起点的距离）\n"
"float64   value     # 道路中心线上点的曲率值\n"
;
  }

  static const char* value(const ::ros_interface::GuideInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::GuideInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.next_dis);
      stream.next(m.current_road);
      stream.next(m.next_road);
      stream.next(m.round_status);
      stream.next(m.intersection_status);
      stream.next(m.roads_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GuideInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::GuideInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::GuideInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "next_dis: ";
    Printer<double>::stream(s, indent + "  ", v.next_dis);
    s << indent << "current_road: ";
    s << std::endl;
    Printer< ::ros_interface::GuideRoad_<ContainerAllocator> >::stream(s, indent + "  ", v.current_road);
    s << indent << "next_road: ";
    s << std::endl;
    Printer< ::ros_interface::GuideRoad_<ContainerAllocator> >::stream(s, indent + "  ", v.next_road);
    s << indent << "round_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.round_status);
    s << indent << "intersection_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.intersection_status);
    s << indent << "roads_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.roads_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_GUIDEINFO_H
