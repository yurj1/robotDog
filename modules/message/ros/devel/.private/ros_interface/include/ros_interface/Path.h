// Generated by gencpp from file ros_interface/Path.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PATH_H
#define ROS_INTERFACE_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/PathPoint.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Path_
{
  typedef Path_<ContainerAllocator> Type;

  Path_()
    : name()
    , path_points()  {
    }
  Path_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , path_points(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector< ::ros_interface::PathPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::PathPoint_<ContainerAllocator> >> _path_points_type;
  _path_points_type path_points;





  typedef boost::shared_ptr< ::ros_interface::Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Path_<ContainerAllocator> const> ConstPtr;

}; // struct Path_

typedef ::ros_interface::Path_<std::allocator<void> > Path;

typedef boost::shared_ptr< ::ros_interface::Path > PathPtr;
typedef boost::shared_ptr< ::ros_interface::Path const> PathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Path_<ContainerAllocator1> & lhs, const ::ros_interface::Path_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.path_points == rhs.path_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Path_<ContainerAllocator1> & lhs, const ::ros_interface::Path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Path_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f99d72e6c28d6e3b6ea3740a6754ccec";
  }

  static const char* value(const ::ros_interface::Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf99d72e6c28d6e3bULL;
  static const uint64_t static_value2 = 0x6ea3740a6754ccecULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Path";
  }

  static const char* value(const ::ros_interface::Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string   name     # 名称\n"
"PathPoint[] path_points # 路径点集\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PathPoint\n"
"float64   x     # coordinates x\n"
"float64   y     # coordinates y\n"
"float64   z     # coordinates z\n"
"float64   theta     # direction on the x-y plane\n"
"float64   kappa     # curvature on the x-y planning\n"
"float64   s     # accumulated distance from beginning of the path\n"
"float64   dkappa     # derivative of kappa w.r.t s.\n"
"float64   ddkappa     # derivative of derivative of kappa w.r.t s.\n"
"float64   lane_id     # The lane ID where the path point is on\n"
"float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline\n"
"float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline\n"
;
  }

  static const char* value(const ::ros_interface::Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.path_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Path_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "path_points[]" << std::endl;
    for (size_t i = 0; i < v.path_points.size(); ++i)
    {
      s << indent << "  path_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::PathPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.path_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PATH_H
