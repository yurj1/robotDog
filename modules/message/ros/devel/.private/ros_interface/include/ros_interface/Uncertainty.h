// Generated by gencpp from file ros_interface/Uncertainty.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_UNCERTAINTY_H
#define ROS_INTERFACE_MESSAGE_UNCERTAINTY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Uncertainty_
{
  typedef Uncertainty_<ContainerAllocator> Type;

  Uncertainty_()
    : position_std_dev()
    , orientation_std_dev()
    , linear_velocity_std_dev()
    , linear_acceleration_std_dev()
    , angular_velocity_std_dev()  {
    }
  Uncertainty_(const ContainerAllocator& _alloc)
    : position_std_dev(_alloc)
    , orientation_std_dev(_alloc)
    , linear_velocity_std_dev(_alloc)
    , linear_acceleration_std_dev(_alloc)
    , angular_velocity_std_dev(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _position_std_dev_type;
  _position_std_dev_type position_std_dev;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _orientation_std_dev_type;
  _orientation_std_dev_type orientation_std_dev;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _linear_velocity_std_dev_type;
  _linear_velocity_std_dev_type linear_velocity_std_dev;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _linear_acceleration_std_dev_type;
  _linear_acceleration_std_dev_type linear_acceleration_std_dev;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _angular_velocity_std_dev_type;
  _angular_velocity_std_dev_type angular_velocity_std_dev;





  typedef boost::shared_ptr< ::ros_interface::Uncertainty_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Uncertainty_<ContainerAllocator> const> ConstPtr;

}; // struct Uncertainty_

typedef ::ros_interface::Uncertainty_<std::allocator<void> > Uncertainty;

typedef boost::shared_ptr< ::ros_interface::Uncertainty > UncertaintyPtr;
typedef boost::shared_ptr< ::ros_interface::Uncertainty const> UncertaintyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Uncertainty_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Uncertainty_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Uncertainty_<ContainerAllocator1> & lhs, const ::ros_interface::Uncertainty_<ContainerAllocator2> & rhs)
{
  return lhs.position_std_dev == rhs.position_std_dev &&
    lhs.orientation_std_dev == rhs.orientation_std_dev &&
    lhs.linear_velocity_std_dev == rhs.linear_velocity_std_dev &&
    lhs.linear_acceleration_std_dev == rhs.linear_acceleration_std_dev &&
    lhs.angular_velocity_std_dev == rhs.angular_velocity_std_dev;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Uncertainty_<ContainerAllocator1> & lhs, const ::ros_interface::Uncertainty_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Uncertainty_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Uncertainty_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Uncertainty_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Uncertainty_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Uncertainty_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Uncertainty_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Uncertainty_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a26c653df4736501b569f3e3f7250e8";
  }

  static const char* value(const ::ros_interface::Uncertainty_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a26c653df473650ULL;
  static const uint64_t static_value2 = 0x1b569f3e3f7250e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Uncertainty_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Uncertainty";
  }

  static const char* value(const ::ros_interface::Uncertainty_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Uncertainty_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point3D   position_std_dev     # Standard deviation of position, east/north/up in meters.\n"
"Point3D   orientation_std_dev     # Standard deviation of quaternion qx/qy/qz, unitless.\n"
"Point3D   linear_velocity_std_dev     # Standard deviation of linear velocity, east/north/up in meters per second.\n"
"Point3D   linear_acceleration_std_dev     # Standard deviation of linear acceleration, right/forward/up in meters per square second.\n"
"Point3D   angular_velocity_std_dev     # Standard deviation of angular velocity, right/forward/up in radians per second.\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
;
  }

  static const char* value(const ::ros_interface::Uncertainty_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Uncertainty_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_std_dev);
      stream.next(m.orientation_std_dev);
      stream.next(m.linear_velocity_std_dev);
      stream.next(m.linear_acceleration_std_dev);
      stream.next(m.angular_velocity_std_dev);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Uncertainty_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Uncertainty_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Uncertainty_<ContainerAllocator>& v)
  {
    s << indent << "position_std_dev: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.position_std_dev);
    s << indent << "orientation_std_dev: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation_std_dev);
    s << indent << "linear_velocity_std_dev: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity_std_dev);
    s << indent << "linear_acceleration_std_dev: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration_std_dev);
    s << indent << "angular_velocity_std_dev: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity_std_dev);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_UNCERTAINTY_H
