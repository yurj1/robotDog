// Generated by gencpp from file ros_interface/SotifMonitorResult.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_SOTIFMONITORRESULT_H
#define ROS_INTERFACE_MESSAGE_SOTIFMONITORRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Region.h>
#include <ros_interface/Grid.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct SotifMonitorResult_
{
  typedef SotifMonitorResult_<ContainerAllocator> Type;

  SotifMonitorResult_()
    : header()
    , region_value()
    , grid_map()  {
    }
  SotifMonitorResult_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , region_value(_alloc)
    , grid_map(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::Region_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Region_<ContainerAllocator> >> _region_value_type;
  _region_value_type region_value;

   typedef std::vector< ::ros_interface::Grid_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Grid_<ContainerAllocator> >> _grid_map_type;
  _grid_map_type grid_map;





  typedef boost::shared_ptr< ::ros_interface::SotifMonitorResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::SotifMonitorResult_<ContainerAllocator> const> ConstPtr;

}; // struct SotifMonitorResult_

typedef ::ros_interface::SotifMonitorResult_<std::allocator<void> > SotifMonitorResult;

typedef boost::shared_ptr< ::ros_interface::SotifMonitorResult > SotifMonitorResultPtr;
typedef boost::shared_ptr< ::ros_interface::SotifMonitorResult const> SotifMonitorResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::SotifMonitorResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::SotifMonitorResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::SotifMonitorResult_<ContainerAllocator1> & lhs, const ::ros_interface::SotifMonitorResult_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.region_value == rhs.region_value &&
    lhs.grid_map == rhs.grid_map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::SotifMonitorResult_<ContainerAllocator1> & lhs, const ::ros_interface::SotifMonitorResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::SotifMonitorResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::SotifMonitorResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::SotifMonitorResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::SotifMonitorResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::SotifMonitorResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::SotifMonitorResult_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::SotifMonitorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfcbcab73f775f6e6285221c4193ca0a";
  }

  static const char* value(const ::ros_interface::SotifMonitorResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfcbcab73f775f6eULL;
  static const uint64_t static_value2 = 0x6285221c4193ca0aULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::SotifMonitorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/SotifMonitorResult";
  }

  static const char* value(const ::ros_interface::SotifMonitorResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::SotifMonitorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"Region[] region_value # 区域态势\n"
"Grid[] grid_map # 栅格地图\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Region\n"
"int32   name_region     # 前后左右区域\n"
"float64   score     # 车辆前后左右的区域打分获得的分值(0-100表示逐步危险程度)\n"
"int32   rank_risk     # 危险程度(0-3四级划分，不同分级对应不同驾驶处理策略)\n"
"Point3D[] region_polygon # 世界坐标系下的区域多边形\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float64   x     # 位置坐标x\n"
"float64   y     # 位置坐标y\n"
"float64   z     # 位置坐标z\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Grid\n"
"float64   x     # 世界坐标系下的x\n"
"float64   y     # 世界坐标系下的y\n"
"SLPoint   sl_point     # Frenet坐标系下的x\n"
"float64   yaw     #  \n"
"float64   potential     # 势场值\n"
"int32   region_id     # 区域编号\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/SLPoint\n"
"float64   s     # 纵向位移\n"
"float64   l     # 横向位移\n"
;
  }

  static const char* value(const ::ros_interface::SotifMonitorResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::SotifMonitorResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.region_value);
      stream.next(m.grid_map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SotifMonitorResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::SotifMonitorResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::SotifMonitorResult_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "region_value[]" << std::endl;
    for (size_t i = 0; i < v.region_value.size(); ++i)
    {
      s << indent << "  region_value[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Region_<ContainerAllocator> >::stream(s, indent + "    ", v.region_value[i]);
    }
    s << indent << "grid_map[]" << std::endl;
    for (size_t i = 0; i < v.grid_map.size(); ++i)
    {
      s << indent << "  grid_map[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Grid_<ContainerAllocator> >::stream(s, indent + "    ", v.grid_map[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_SOTIFMONITORRESULT_H
