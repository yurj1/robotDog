# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/PredictionObstacles.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class PredictionObstacles(genpy.Message):
  _md5sum = "cece11669f9fb404fd25aca92c5416f2"
  _type = "ros_interface/PredictionObstacles"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # timestamp is included in header
PredictionObstacle[] prediction_obstacles # make prediction for multiple obstacles
int32   change_origin_flag     # 0:坐标系切换成功 1:坐标系切换中 2:坐标系切换故障
float64   start_timestamp     # start timestamp
float64   end_timestamp     # end timestamp
int32   self_intent     # 自动驾驶车辆意图  0-UNKNOWN, 1-STOP, 2-CRUISE, 3-CHANGE_LANE
int32   scenario     # 场景              0-UNKNOWN, 1000-CRUISE, 1001-CRUISE_URBAN 1002-CRUISE_HIGHWAY, 2000-JUNCTION  2001-JUNCTION_TRAFFIC_LIGHT 2002-JUNCTION_STOP_SIGN

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/PredictionObstacle
PerceptionObstacle   perception_obstacle     # perception info of obstacle
float64   timestamp     # GPS time in seconds
float64   predicted_period     # the length of the time for this prediction (e.g. 10s)
TrajectoryInPrediction[] trajectory # can have multiple trajectories per obstacle
ObstacleIntent   intent     # 估计障碍物的意图        0-UNKNOWN, 1-STOP, 2-STATIONARY, 3-移动 MOVING, 4-HANGE_LANE, 5-LOW_ACCELERATION, 6-HIGH_ACCELERATION, 7-LOW_DECELERATION, 8-HIGH_DECELERATION, 
ObstaclePriority   priority     # 障碍物优先级               1-CAUTION, 2-NORMAL, 3-IGNORE
ObstacleInteractiveTag   interactive_tag     #  
bool   is_static     # is obstacle static (default = false)

================================================================================
MSG: ros_interface/PerceptionObstacle
int32   id     #  
Point3D   position     #  
float64   theta     #  
Point3D   velocity     #  
float64   length     #  
float64   width     #  
float64   height     #  
Point3D[] polygon_point #  
float64   tracking_time     #  
int32   type     # 障碍物类型： 0-Unknown 1-Unknown_movable 2-Unknown_unmovable 3-Pedestrian 4-Bicycle   5-Vehicle
int32   lane_position     # 车道线位置 -2-NEXT_LEFT_LANE -1-LEFT_LANE 0-EGO_LANE 1-RIGHT_LANE 2-NEXT_RIGHT_LANE 3-OTHERS 4-UNKNOWN
float64   confidence     #  
float64   timestamp     #  
uint8   confidence_type     # 置信度类型                  0-CONFIDENCE_UNKNOWN, 1-CONFIDENCE_CN, 2-CONFIDENCE_RAD
Point3D   drops     #  
Point3D   acceleration     #  
Point3D   anchor_point     #  
Point3D[] bounding_box #  
int32   sub_type     #  
float64   height_above_ground     #  
float64[] position_covariance #  
float64[] velocity_covariance #  
float64[] acceleration_covariance #  
uint8   light_status     #  

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/TrajectoryInPrediction
float64   probability     # probability of this trajectory
TrajectoryPoint[] trajectory_points #  

================================================================================
MSG: ros_interface/TrajectoryPoint
PathPoint   path_point     # path point
float64   v     # linear velocity
float64   a     # linear acceleration
float64   relative_time     # relative time from beginning of the trajectory
float64   da     # longitudinal jerk
bool   is_steer_valid     # 转向是否有效
float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis
float64   rear_steer     # 后轮转角
int32   gear     # 档位

================================================================================
MSG: ros_interface/PathPoint
float64   x     # coordinates x
float64   y     # coordinates y
float64   z     # coordinates z
float64   theta     # direction on the x-y plane
float64   kappa     # curvature on the x-y planning
float64   s     # accumulated distance from beginning of the path
float64   dkappa     # derivative of kappa w.r.t s.
float64   ddkappa     # derivative of derivative of kappa w.r.t s.
float64   lane_id     # The lane ID where the path point is on
float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline
float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline

================================================================================
MSG: ros_interface/ObstacleIntent
int32   type     # 估计障碍物的意图        0-UNKNOWN, 1-STOP, 2-STATIONARY, 3-移动 MOVING, 4-HANGE_LANE, 5-LOW_ACCELERATION, 6-HIGH_ACCELERATION, 7-LOW_DECELERATION, 8-HIGH_DECELERATION, 

================================================================================
MSG: ros_interface/ObstaclePriority
int32   priority     # CAUTION = 1; NORMAL = 2; IGNORE = 3;

================================================================================
MSG: ros_interface/ObstacleInteractiveTag
int32   interactive_tag     #  
"""
  __slots__ = ['header','prediction_obstacles','change_origin_flag','start_timestamp','end_timestamp','self_intent','scenario']
  _slot_types = ['std_msgs/Header','ros_interface/PredictionObstacle[]','int32','float64','float64','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,prediction_obstacles,change_origin_flag,start_timestamp,end_timestamp,self_intent,scenario

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PredictionObstacles, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.prediction_obstacles is None:
        self.prediction_obstacles = []
      if self.change_origin_flag is None:
        self.change_origin_flag = 0
      if self.start_timestamp is None:
        self.start_timestamp = 0.
      if self.end_timestamp is None:
        self.end_timestamp = 0.
      if self.self_intent is None:
        self.self_intent = 0
      if self.scenario is None:
        self.scenario = 0
    else:
      self.header = std_msgs.msg.Header()
      self.prediction_obstacles = []
      self.change_origin_flag = 0
      self.start_timestamp = 0.
      self.end_timestamp = 0.
      self.self_intent = 0
      self.scenario = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.prediction_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.prediction_obstacles:
        _v1 = val1.perception_obstacle
        _x = _v1.id
        buff.write(_get_struct_i().pack(_x))
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v1.theta
        buff.write(_get_struct_d().pack(_x))
        _v3 = _v1.velocity
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.length, _x.width, _x.height))
        length = len(_v1.polygon_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.polygon_point:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v1
        buff.write(_get_struct_d2i2dB().pack(_x.tracking_time, _x.type, _x.lane_position, _x.confidence, _x.timestamp, _x.confidence_type))
        _v4 = _v1.drops
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = _v1.acceleration
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v1.anchor_point
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v1.bounding_box)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.bounding_box:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v1
        buff.write(_get_struct_id().pack(_x.sub_type, _x.height_above_ground))
        length = len(_v1.position_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.position_covariance))
        length = len(_v1.velocity_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.velocity_covariance))
        length = len(_v1.acceleration_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.acceleration_covariance))
        _x = _v1.light_status
        buff.write(_get_struct_B().pack(_x))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.timestamp, _x.predicted_period))
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          _x = val2.probability
          buff.write(_get_struct_d().pack(_x))
          length = len(val2.trajectory_points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.trajectory_points:
            _v7 = val3.path_point
            _x = _v7
            buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
            _x = val3
            buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
        _v8 = val1.intent
        _x = _v8.type
        buff.write(_get_struct_i().pack(_x))
        _v9 = val1.priority
        _x = _v9.priority
        buff.write(_get_struct_i().pack(_x))
        _v10 = val1.interactive_tag
        _x = _v10.interactive_tag
        buff.write(_get_struct_i().pack(_x))
        _x = val1.is_static
        buff.write(_get_struct_B().pack(_x))
      _x = self
      buff.write(_get_struct_i2d2i().pack(_x.change_origin_flag, _x.start_timestamp, _x.end_timestamp, _x.self_intent, _x.scenario))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.prediction_obstacles is None:
        self.prediction_obstacles = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prediction_obstacles = []
      for i in range(0, length):
        val1 = ros_interface.msg.PredictionObstacle()
        _v11 = val1.perception_obstacle
        start = end
        end += 4
        (_v11.id,) = _get_struct_i().unpack(str[start:end])
        _v12 = _v11.position
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (_v11.theta,) = _get_struct_d().unpack(str[start:end])
        _v13 = _v11.velocity
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v11
        start = end
        end += 24
        (_x.length, _x.width, _x.height,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v11.polygon_point = []
        for i in range(0, length):
          val3 = ros_interface.msg.Point3D()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v11.polygon_point.append(val3)
        _x = _v11
        start = end
        end += 33
        (_x.tracking_time, _x.type, _x.lane_position, _x.confidence, _x.timestamp, _x.confidence_type,) = _get_struct_d2i2dB().unpack(str[start:end])
        _v14 = _v11.drops
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v15 = _v11.acceleration
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = _v11.anchor_point
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v11.bounding_box = []
        for i in range(0, length):
          val3 = ros_interface.msg.Point3D()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v11.bounding_box.append(val3)
        _x = _v11
        start = end
        end += 12
        (_x.sub_type, _x.height_above_ground,) = _get_struct_id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v11.position_covariance = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v11.velocity_covariance = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v11.acceleration_covariance = s.unpack(str[start:end])
        start = end
        end += 1
        (_v11.light_status,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.timestamp, _x.predicted_period,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryInPrediction()
          start = end
          end += 8
          (val2.probability,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.trajectory_points = []
          for i in range(0, length):
            val3 = ros_interface.msg.TrajectoryPoint()
            _v17 = val3.path_point
            _x = _v17
            start = end
            end += 88
            (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
            _x = val3
            start = end
            end += 53
            (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
            val3.is_steer_valid = bool(val3.is_steer_valid)
            val2.trajectory_points.append(val3)
          val1.trajectory.append(val2)
        _v18 = val1.intent
        start = end
        end += 4
        (_v18.type,) = _get_struct_i().unpack(str[start:end])
        _v19 = val1.priority
        start = end
        end += 4
        (_v19.priority,) = _get_struct_i().unpack(str[start:end])
        _v20 = val1.interactive_tag
        start = end
        end += 4
        (_v20.interactive_tag,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 1
        (val1.is_static,) = _get_struct_B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        self.prediction_obstacles.append(val1)
      _x = self
      start = end
      end += 28
      (_x.change_origin_flag, _x.start_timestamp, _x.end_timestamp, _x.self_intent, _x.scenario,) = _get_struct_i2d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.prediction_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.prediction_obstacles:
        _v21 = val1.perception_obstacle
        _x = _v21.id
        buff.write(_get_struct_i().pack(_x))
        _v22 = _v21.position
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v21.theta
        buff.write(_get_struct_d().pack(_x))
        _v23 = _v21.velocity
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.length, _x.width, _x.height))
        length = len(_v21.polygon_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v21.polygon_point:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v21
        buff.write(_get_struct_d2i2dB().pack(_x.tracking_time, _x.type, _x.lane_position, _x.confidence, _x.timestamp, _x.confidence_type))
        _v24 = _v21.drops
        _x = _v24
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v25 = _v21.acceleration
        _x = _v25
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v26 = _v21.anchor_point
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v21.bounding_box)
        buff.write(_struct_I.pack(length))
        for val3 in _v21.bounding_box:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v21
        buff.write(_get_struct_id().pack(_x.sub_type, _x.height_above_ground))
        length = len(_v21.position_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v21.position_covariance.tostring())
        length = len(_v21.velocity_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v21.velocity_covariance.tostring())
        length = len(_v21.acceleration_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v21.acceleration_covariance.tostring())
        _x = _v21.light_status
        buff.write(_get_struct_B().pack(_x))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.timestamp, _x.predicted_period))
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          _x = val2.probability
          buff.write(_get_struct_d().pack(_x))
          length = len(val2.trajectory_points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.trajectory_points:
            _v27 = val3.path_point
            _x = _v27
            buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
            _x = val3
            buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
        _v28 = val1.intent
        _x = _v28.type
        buff.write(_get_struct_i().pack(_x))
        _v29 = val1.priority
        _x = _v29.priority
        buff.write(_get_struct_i().pack(_x))
        _v30 = val1.interactive_tag
        _x = _v30.interactive_tag
        buff.write(_get_struct_i().pack(_x))
        _x = val1.is_static
        buff.write(_get_struct_B().pack(_x))
      _x = self
      buff.write(_get_struct_i2d2i().pack(_x.change_origin_flag, _x.start_timestamp, _x.end_timestamp, _x.self_intent, _x.scenario))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.prediction_obstacles is None:
        self.prediction_obstacles = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prediction_obstacles = []
      for i in range(0, length):
        val1 = ros_interface.msg.PredictionObstacle()
        _v31 = val1.perception_obstacle
        start = end
        end += 4
        (_v31.id,) = _get_struct_i().unpack(str[start:end])
        _v32 = _v31.position
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (_v31.theta,) = _get_struct_d().unpack(str[start:end])
        _v33 = _v31.velocity
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v31
        start = end
        end += 24
        (_x.length, _x.width, _x.height,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v31.polygon_point = []
        for i in range(0, length):
          val3 = ros_interface.msg.Point3D()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v31.polygon_point.append(val3)
        _x = _v31
        start = end
        end += 33
        (_x.tracking_time, _x.type, _x.lane_position, _x.confidence, _x.timestamp, _x.confidence_type,) = _get_struct_d2i2dB().unpack(str[start:end])
        _v34 = _v31.drops
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v35 = _v31.acceleration
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = _v31.anchor_point
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v31.bounding_box = []
        for i in range(0, length):
          val3 = ros_interface.msg.Point3D()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v31.bounding_box.append(val3)
        _x = _v31
        start = end
        end += 12
        (_x.sub_type, _x.height_above_ground,) = _get_struct_id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v31.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v31.velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v31.acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 1
        (_v31.light_status,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.timestamp, _x.predicted_period,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryInPrediction()
          start = end
          end += 8
          (val2.probability,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.trajectory_points = []
          for i in range(0, length):
            val3 = ros_interface.msg.TrajectoryPoint()
            _v37 = val3.path_point
            _x = _v37
            start = end
            end += 88
            (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
            _x = val3
            start = end
            end += 53
            (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
            val3.is_steer_valid = bool(val3.is_steer_valid)
            val2.trajectory_points.append(val3)
          val1.trajectory.append(val2)
        _v38 = val1.intent
        start = end
        end += 4
        (_v38.type,) = _get_struct_i().unpack(str[start:end])
        _v39 = val1.priority
        start = end
        end += 4
        (_v39.priority,) = _get_struct_i().unpack(str[start:end])
        _v40 = val1.interactive_tag
        start = end
        end += 4
        (_v40.interactive_tag,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 1
        (val1.is_static,) = _get_struct_B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        self.prediction_obstacles.append(val1)
      _x = self
      start = end
      end += 28
      (_x.change_origin_flag, _x.start_timestamp, _x.end_timestamp, _x.self_intent, _x.scenario,) = _get_struct_i2d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4dB2di = None
def _get_struct_4dB2di():
    global _struct_4dB2di
    if _struct_4dB2di is None:
        _struct_4dB2di = struct.Struct("<4dB2di")
    return _struct_4dB2di
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d2i2dB = None
def _get_struct_d2i2dB():
    global _struct_d2i2dB
    if _struct_d2i2dB is None:
        _struct_d2i2dB = struct.Struct("<d2i2dB")
    return _struct_d2i2dB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2d2i = None
def _get_struct_i2d2i():
    global _struct_i2d2i
    if _struct_i2d2i is None:
        _struct_i2d2i = struct.Struct("<i2d2i")
    return _struct_i2d2i
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
