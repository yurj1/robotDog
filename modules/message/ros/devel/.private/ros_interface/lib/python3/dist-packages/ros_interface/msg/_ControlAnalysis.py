# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/ControlAnalysis.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ControlAnalysis(genpy.Message):
  _md5sum = "6457731febea5c324804cbbe27562bf5"
  _type = "ros_interface/ControlAnalysis"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
int32   driving_mode     # 驾驶模式
int32   driving_mode_fd     # 驾驶模式反馈
int32   gear_location_fd     # 档位反馈
int32   gear_location_cmd     # 档位命令
int32   epb_level_fd     # EPB状态反馈
int32   epb_level_cmd     # EPB命令
float64   speed_mps     # 车辆速度
float64   speed_reference     # 参考速度
float64   accel_value_fd     # 油门反馈
float64   accel_value_cmd     # 油门命令
float64   brake_value_fd     # 刹车反馈
float64   brake_value_cmd     # 刹车命令
float64   path_remain     # 剩余轨迹里程
bool   has_stop_point     # 是否有停车点
bool   is_full_stop     # 是否有停车轨迹
bool   is_stopped     # 是否停车
float64   lon_acc_jerk     # 纵向加加速度
float64   acceleration_cmd     # 加速度命令
float64   acceleration_cmd_closeloop     # 闭环加速度命令
float64   preview_acceleration_reference     # 预描参考加速度
float64   slope_offset_compensation     # 坡道补偿
float64   turning_offset_compensation     # 转向补偿
float64   speed_error_limited     # 速度差限值
float64   speed_error     # 速度差
float64   speed_offset     #  
float64   station_error_limited     # 位置误差限值
float64   station_error     # 位置误差
float64   lon_target_point_s     # 纵向控制目标点里程
int64   lon_calculate_time     # 纵向计算时间
int64   lon_calculate_time_max     # 纵向时间限值
float64   ref_curvature     # 参考曲率
float64   ref_heading     # 参考航向角
float64   current_heading     # 当前航向角
float64   heading_error     # 航向角误差
float64   heading_error_rate     # 航向角误差率
float64   lateral_error     # 横向误差
float64   lateral_error_rate     # 横向误差率
float64   lon_error     # 纵向误差
float64   front_steering_value_fd     # 前轮转向反馈
float64   front_steering_target     # 前轮目标转向
float64   front_steering_rate     # 前轮转向角速率
float64   front_steer_angle_feedforward     # 前轮前馈计算
float64   front_steer_angle_feedback     # 前轮反馈计算
float64   front_steer_angle_lateral_contribution     # 前轮横向误差贡献
float64   front_steer_angle_lateral_rate_contribution     # 前轮横向误差率贡献
float64   front_steer_angle_heading_contribution     # 前轮航向角误差贡献
float64   front_steer_angle_heading_rate_contribution     # 前轮航向角误差率贡献
float64   rear_steering_value_fd     # 后轮转向反馈
float64   rear_steering_target     # 后轮目标转向
float64   rear_steering_rate     # 后轮转向角速率
float64   rear_steer_angle_feedforward     # 后轮前馈计算
float64   rear_steer_angle_feedback     # 后轮反馈计算
float64   rear_steer_angle_lateral_contribution     # 后轮横向误差贡献
float64   rear_steer_angle_lateral_rate_contribution     # 后轮横向误差率贡献
float64   rear_steer_angle_heading_contribution     # 后轮航向角误差贡献
float64   rear_steer_angle_heading_rate_contribution     # 后轮航向角误差率贡献
float64   matrix_k_00     # k矩阵
float64   matrix_k_01     # k矩阵
float64   matrix_k_02     # k矩阵
float64   matrix_k_03     # k矩阵
float64   matrix_k_10     # k矩阵
float64   matrix_k_11     # k矩阵
float64   matrix_k_12     # k矩阵
float64   matrix_k_13     # k矩阵
float64   matrix_state_0     # 状态矩阵
float64   matrix_state_1     # 状态矩阵
float64   matrix_state_2     # 状态矩阵
float64   matrix_state_3     # 状态矩阵
float64   matrix_q_updated_0     # 权重矩阵
float64   matrix_q_updated_1     # 权重矩阵
float64   matrix_q_updated_2     # 权重矩阵
float64   matrix_q_updated_3     # 权重矩阵
float64   current_x     # 当前位置x
float64   current_y     # 当前位置y
float64   target_point_x     # 目标点x
float64   target_point_y     # 目标点y
float64   lat_target_point_s     # 横向目标点里程
int64   lqr_calculate_time     # LQR计算时间
int64   lqr_calculate_time_max     # LQR计算时间限值

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','driving_mode','driving_mode_fd','gear_location_fd','gear_location_cmd','epb_level_fd','epb_level_cmd','speed_mps','speed_reference','accel_value_fd','accel_value_cmd','brake_value_fd','brake_value_cmd','path_remain','has_stop_point','is_full_stop','is_stopped','lon_acc_jerk','acceleration_cmd','acceleration_cmd_closeloop','preview_acceleration_reference','slope_offset_compensation','turning_offset_compensation','speed_error_limited','speed_error','speed_offset','station_error_limited','station_error','lon_target_point_s','lon_calculate_time','lon_calculate_time_max','ref_curvature','ref_heading','current_heading','heading_error','heading_error_rate','lateral_error','lateral_error_rate','lon_error','front_steering_value_fd','front_steering_target','front_steering_rate','front_steer_angle_feedforward','front_steer_angle_feedback','front_steer_angle_lateral_contribution','front_steer_angle_lateral_rate_contribution','front_steer_angle_heading_contribution','front_steer_angle_heading_rate_contribution','rear_steering_value_fd','rear_steering_target','rear_steering_rate','rear_steer_angle_feedforward','rear_steer_angle_feedback','rear_steer_angle_lateral_contribution','rear_steer_angle_lateral_rate_contribution','rear_steer_angle_heading_contribution','rear_steer_angle_heading_rate_contribution','matrix_k_00','matrix_k_01','matrix_k_02','matrix_k_03','matrix_k_10','matrix_k_11','matrix_k_12','matrix_k_13','matrix_state_0','matrix_state_1','matrix_state_2','matrix_state_3','matrix_q_updated_0','matrix_q_updated_1','matrix_q_updated_2','matrix_q_updated_3','current_x','current_y','target_point_x','target_point_y','lat_target_point_s','lqr_calculate_time','lqr_calculate_time_max']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','float64','float64','float64','float64','float64','float64','float64','bool','bool','bool','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,driving_mode,driving_mode_fd,gear_location_fd,gear_location_cmd,epb_level_fd,epb_level_cmd,speed_mps,speed_reference,accel_value_fd,accel_value_cmd,brake_value_fd,brake_value_cmd,path_remain,has_stop_point,is_full_stop,is_stopped,lon_acc_jerk,acceleration_cmd,acceleration_cmd_closeloop,preview_acceleration_reference,slope_offset_compensation,turning_offset_compensation,speed_error_limited,speed_error,speed_offset,station_error_limited,station_error,lon_target_point_s,lon_calculate_time,lon_calculate_time_max,ref_curvature,ref_heading,current_heading,heading_error,heading_error_rate,lateral_error,lateral_error_rate,lon_error,front_steering_value_fd,front_steering_target,front_steering_rate,front_steer_angle_feedforward,front_steer_angle_feedback,front_steer_angle_lateral_contribution,front_steer_angle_lateral_rate_contribution,front_steer_angle_heading_contribution,front_steer_angle_heading_rate_contribution,rear_steering_value_fd,rear_steering_target,rear_steering_rate,rear_steer_angle_feedforward,rear_steer_angle_feedback,rear_steer_angle_lateral_contribution,rear_steer_angle_lateral_rate_contribution,rear_steer_angle_heading_contribution,rear_steer_angle_heading_rate_contribution,matrix_k_00,matrix_k_01,matrix_k_02,matrix_k_03,matrix_k_10,matrix_k_11,matrix_k_12,matrix_k_13,matrix_state_0,matrix_state_1,matrix_state_2,matrix_state_3,matrix_q_updated_0,matrix_q_updated_1,matrix_q_updated_2,matrix_q_updated_3,current_x,current_y,target_point_x,target_point_y,lat_target_point_s,lqr_calculate_time,lqr_calculate_time_max

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlAnalysis, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.driving_mode is None:
        self.driving_mode = 0
      if self.driving_mode_fd is None:
        self.driving_mode_fd = 0
      if self.gear_location_fd is None:
        self.gear_location_fd = 0
      if self.gear_location_cmd is None:
        self.gear_location_cmd = 0
      if self.epb_level_fd is None:
        self.epb_level_fd = 0
      if self.epb_level_cmd is None:
        self.epb_level_cmd = 0
      if self.speed_mps is None:
        self.speed_mps = 0.
      if self.speed_reference is None:
        self.speed_reference = 0.
      if self.accel_value_fd is None:
        self.accel_value_fd = 0.
      if self.accel_value_cmd is None:
        self.accel_value_cmd = 0.
      if self.brake_value_fd is None:
        self.brake_value_fd = 0.
      if self.brake_value_cmd is None:
        self.brake_value_cmd = 0.
      if self.path_remain is None:
        self.path_remain = 0.
      if self.has_stop_point is None:
        self.has_stop_point = False
      if self.is_full_stop is None:
        self.is_full_stop = False
      if self.is_stopped is None:
        self.is_stopped = False
      if self.lon_acc_jerk is None:
        self.lon_acc_jerk = 0.
      if self.acceleration_cmd is None:
        self.acceleration_cmd = 0.
      if self.acceleration_cmd_closeloop is None:
        self.acceleration_cmd_closeloop = 0.
      if self.preview_acceleration_reference is None:
        self.preview_acceleration_reference = 0.
      if self.slope_offset_compensation is None:
        self.slope_offset_compensation = 0.
      if self.turning_offset_compensation is None:
        self.turning_offset_compensation = 0.
      if self.speed_error_limited is None:
        self.speed_error_limited = 0.
      if self.speed_error is None:
        self.speed_error = 0.
      if self.speed_offset is None:
        self.speed_offset = 0.
      if self.station_error_limited is None:
        self.station_error_limited = 0.
      if self.station_error is None:
        self.station_error = 0.
      if self.lon_target_point_s is None:
        self.lon_target_point_s = 0.
      if self.lon_calculate_time is None:
        self.lon_calculate_time = 0
      if self.lon_calculate_time_max is None:
        self.lon_calculate_time_max = 0
      if self.ref_curvature is None:
        self.ref_curvature = 0.
      if self.ref_heading is None:
        self.ref_heading = 0.
      if self.current_heading is None:
        self.current_heading = 0.
      if self.heading_error is None:
        self.heading_error = 0.
      if self.heading_error_rate is None:
        self.heading_error_rate = 0.
      if self.lateral_error is None:
        self.lateral_error = 0.
      if self.lateral_error_rate is None:
        self.lateral_error_rate = 0.
      if self.lon_error is None:
        self.lon_error = 0.
      if self.front_steering_value_fd is None:
        self.front_steering_value_fd = 0.
      if self.front_steering_target is None:
        self.front_steering_target = 0.
      if self.front_steering_rate is None:
        self.front_steering_rate = 0.
      if self.front_steer_angle_feedforward is None:
        self.front_steer_angle_feedforward = 0.
      if self.front_steer_angle_feedback is None:
        self.front_steer_angle_feedback = 0.
      if self.front_steer_angle_lateral_contribution is None:
        self.front_steer_angle_lateral_contribution = 0.
      if self.front_steer_angle_lateral_rate_contribution is None:
        self.front_steer_angle_lateral_rate_contribution = 0.
      if self.front_steer_angle_heading_contribution is None:
        self.front_steer_angle_heading_contribution = 0.
      if self.front_steer_angle_heading_rate_contribution is None:
        self.front_steer_angle_heading_rate_contribution = 0.
      if self.rear_steering_value_fd is None:
        self.rear_steering_value_fd = 0.
      if self.rear_steering_target is None:
        self.rear_steering_target = 0.
      if self.rear_steering_rate is None:
        self.rear_steering_rate = 0.
      if self.rear_steer_angle_feedforward is None:
        self.rear_steer_angle_feedforward = 0.
      if self.rear_steer_angle_feedback is None:
        self.rear_steer_angle_feedback = 0.
      if self.rear_steer_angle_lateral_contribution is None:
        self.rear_steer_angle_lateral_contribution = 0.
      if self.rear_steer_angle_lateral_rate_contribution is None:
        self.rear_steer_angle_lateral_rate_contribution = 0.
      if self.rear_steer_angle_heading_contribution is None:
        self.rear_steer_angle_heading_contribution = 0.
      if self.rear_steer_angle_heading_rate_contribution is None:
        self.rear_steer_angle_heading_rate_contribution = 0.
      if self.matrix_k_00 is None:
        self.matrix_k_00 = 0.
      if self.matrix_k_01 is None:
        self.matrix_k_01 = 0.
      if self.matrix_k_02 is None:
        self.matrix_k_02 = 0.
      if self.matrix_k_03 is None:
        self.matrix_k_03 = 0.
      if self.matrix_k_10 is None:
        self.matrix_k_10 = 0.
      if self.matrix_k_11 is None:
        self.matrix_k_11 = 0.
      if self.matrix_k_12 is None:
        self.matrix_k_12 = 0.
      if self.matrix_k_13 is None:
        self.matrix_k_13 = 0.
      if self.matrix_state_0 is None:
        self.matrix_state_0 = 0.
      if self.matrix_state_1 is None:
        self.matrix_state_1 = 0.
      if self.matrix_state_2 is None:
        self.matrix_state_2 = 0.
      if self.matrix_state_3 is None:
        self.matrix_state_3 = 0.
      if self.matrix_q_updated_0 is None:
        self.matrix_q_updated_0 = 0.
      if self.matrix_q_updated_1 is None:
        self.matrix_q_updated_1 = 0.
      if self.matrix_q_updated_2 is None:
        self.matrix_q_updated_2 = 0.
      if self.matrix_q_updated_3 is None:
        self.matrix_q_updated_3 = 0.
      if self.current_x is None:
        self.current_x = 0.
      if self.current_y is None:
        self.current_y = 0.
      if self.target_point_x is None:
        self.target_point_x = 0.
      if self.target_point_y is None:
        self.target_point_y = 0.
      if self.lat_target_point_s is None:
        self.lat_target_point_s = 0.
      if self.lqr_calculate_time is None:
        self.lqr_calculate_time = 0
      if self.lqr_calculate_time_max is None:
        self.lqr_calculate_time_max = 0
    else:
      self.header = std_msgs.msg.Header()
      self.driving_mode = 0
      self.driving_mode_fd = 0
      self.gear_location_fd = 0
      self.gear_location_cmd = 0
      self.epb_level_fd = 0
      self.epb_level_cmd = 0
      self.speed_mps = 0.
      self.speed_reference = 0.
      self.accel_value_fd = 0.
      self.accel_value_cmd = 0.
      self.brake_value_fd = 0.
      self.brake_value_cmd = 0.
      self.path_remain = 0.
      self.has_stop_point = False
      self.is_full_stop = False
      self.is_stopped = False
      self.lon_acc_jerk = 0.
      self.acceleration_cmd = 0.
      self.acceleration_cmd_closeloop = 0.
      self.preview_acceleration_reference = 0.
      self.slope_offset_compensation = 0.
      self.turning_offset_compensation = 0.
      self.speed_error_limited = 0.
      self.speed_error = 0.
      self.speed_offset = 0.
      self.station_error_limited = 0.
      self.station_error = 0.
      self.lon_target_point_s = 0.
      self.lon_calculate_time = 0
      self.lon_calculate_time_max = 0
      self.ref_curvature = 0.
      self.ref_heading = 0.
      self.current_heading = 0.
      self.heading_error = 0.
      self.heading_error_rate = 0.
      self.lateral_error = 0.
      self.lateral_error_rate = 0.
      self.lon_error = 0.
      self.front_steering_value_fd = 0.
      self.front_steering_target = 0.
      self.front_steering_rate = 0.
      self.front_steer_angle_feedforward = 0.
      self.front_steer_angle_feedback = 0.
      self.front_steer_angle_lateral_contribution = 0.
      self.front_steer_angle_lateral_rate_contribution = 0.
      self.front_steer_angle_heading_contribution = 0.
      self.front_steer_angle_heading_rate_contribution = 0.
      self.rear_steering_value_fd = 0.
      self.rear_steering_target = 0.
      self.rear_steering_rate = 0.
      self.rear_steer_angle_feedforward = 0.
      self.rear_steer_angle_feedback = 0.
      self.rear_steer_angle_lateral_contribution = 0.
      self.rear_steer_angle_lateral_rate_contribution = 0.
      self.rear_steer_angle_heading_contribution = 0.
      self.rear_steer_angle_heading_rate_contribution = 0.
      self.matrix_k_00 = 0.
      self.matrix_k_01 = 0.
      self.matrix_k_02 = 0.
      self.matrix_k_03 = 0.
      self.matrix_k_10 = 0.
      self.matrix_k_11 = 0.
      self.matrix_k_12 = 0.
      self.matrix_k_13 = 0.
      self.matrix_state_0 = 0.
      self.matrix_state_1 = 0.
      self.matrix_state_2 = 0.
      self.matrix_state_3 = 0.
      self.matrix_q_updated_0 = 0.
      self.matrix_q_updated_1 = 0.
      self.matrix_q_updated_2 = 0.
      self.matrix_q_updated_3 = 0.
      self.current_x = 0.
      self.current_y = 0.
      self.target_point_x = 0.
      self.target_point_y = 0.
      self.lat_target_point_s = 0.
      self.lqr_calculate_time = 0
      self.lqr_calculate_time_max = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6i7d3B12d2q47d2q().pack(_x.driving_mode, _x.driving_mode_fd, _x.gear_location_fd, _x.gear_location_cmd, _x.epb_level_fd, _x.epb_level_cmd, _x.speed_mps, _x.speed_reference, _x.accel_value_fd, _x.accel_value_cmd, _x.brake_value_fd, _x.brake_value_cmd, _x.path_remain, _x.has_stop_point, _x.is_full_stop, _x.is_stopped, _x.lon_acc_jerk, _x.acceleration_cmd, _x.acceleration_cmd_closeloop, _x.preview_acceleration_reference, _x.slope_offset_compensation, _x.turning_offset_compensation, _x.speed_error_limited, _x.speed_error, _x.speed_offset, _x.station_error_limited, _x.station_error, _x.lon_target_point_s, _x.lon_calculate_time, _x.lon_calculate_time_max, _x.ref_curvature, _x.ref_heading, _x.current_heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error, _x.lateral_error_rate, _x.lon_error, _x.front_steering_value_fd, _x.front_steering_target, _x.front_steering_rate, _x.front_steer_angle_feedforward, _x.front_steer_angle_feedback, _x.front_steer_angle_lateral_contribution, _x.front_steer_angle_lateral_rate_contribution, _x.front_steer_angle_heading_contribution, _x.front_steer_angle_heading_rate_contribution, _x.rear_steering_value_fd, _x.rear_steering_target, _x.rear_steering_rate, _x.rear_steer_angle_feedforward, _x.rear_steer_angle_feedback, _x.rear_steer_angle_lateral_contribution, _x.rear_steer_angle_lateral_rate_contribution, _x.rear_steer_angle_heading_contribution, _x.rear_steer_angle_heading_rate_contribution, _x.matrix_k_00, _x.matrix_k_01, _x.matrix_k_02, _x.matrix_k_03, _x.matrix_k_10, _x.matrix_k_11, _x.matrix_k_12, _x.matrix_k_13, _x.matrix_state_0, _x.matrix_state_1, _x.matrix_state_2, _x.matrix_state_3, _x.matrix_q_updated_0, _x.matrix_q_updated_1, _x.matrix_q_updated_2, _x.matrix_q_updated_3, _x.current_x, _x.current_y, _x.target_point_x, _x.target_point_y, _x.lat_target_point_s, _x.lqr_calculate_time, _x.lqr_calculate_time_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 587
      (_x.driving_mode, _x.driving_mode_fd, _x.gear_location_fd, _x.gear_location_cmd, _x.epb_level_fd, _x.epb_level_cmd, _x.speed_mps, _x.speed_reference, _x.accel_value_fd, _x.accel_value_cmd, _x.brake_value_fd, _x.brake_value_cmd, _x.path_remain, _x.has_stop_point, _x.is_full_stop, _x.is_stopped, _x.lon_acc_jerk, _x.acceleration_cmd, _x.acceleration_cmd_closeloop, _x.preview_acceleration_reference, _x.slope_offset_compensation, _x.turning_offset_compensation, _x.speed_error_limited, _x.speed_error, _x.speed_offset, _x.station_error_limited, _x.station_error, _x.lon_target_point_s, _x.lon_calculate_time, _x.lon_calculate_time_max, _x.ref_curvature, _x.ref_heading, _x.current_heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error, _x.lateral_error_rate, _x.lon_error, _x.front_steering_value_fd, _x.front_steering_target, _x.front_steering_rate, _x.front_steer_angle_feedforward, _x.front_steer_angle_feedback, _x.front_steer_angle_lateral_contribution, _x.front_steer_angle_lateral_rate_contribution, _x.front_steer_angle_heading_contribution, _x.front_steer_angle_heading_rate_contribution, _x.rear_steering_value_fd, _x.rear_steering_target, _x.rear_steering_rate, _x.rear_steer_angle_feedforward, _x.rear_steer_angle_feedback, _x.rear_steer_angle_lateral_contribution, _x.rear_steer_angle_lateral_rate_contribution, _x.rear_steer_angle_heading_contribution, _x.rear_steer_angle_heading_rate_contribution, _x.matrix_k_00, _x.matrix_k_01, _x.matrix_k_02, _x.matrix_k_03, _x.matrix_k_10, _x.matrix_k_11, _x.matrix_k_12, _x.matrix_k_13, _x.matrix_state_0, _x.matrix_state_1, _x.matrix_state_2, _x.matrix_state_3, _x.matrix_q_updated_0, _x.matrix_q_updated_1, _x.matrix_q_updated_2, _x.matrix_q_updated_3, _x.current_x, _x.current_y, _x.target_point_x, _x.target_point_y, _x.lat_target_point_s, _x.lqr_calculate_time, _x.lqr_calculate_time_max,) = _get_struct_6i7d3B12d2q47d2q().unpack(str[start:end])
      self.has_stop_point = bool(self.has_stop_point)
      self.is_full_stop = bool(self.is_full_stop)
      self.is_stopped = bool(self.is_stopped)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6i7d3B12d2q47d2q().pack(_x.driving_mode, _x.driving_mode_fd, _x.gear_location_fd, _x.gear_location_cmd, _x.epb_level_fd, _x.epb_level_cmd, _x.speed_mps, _x.speed_reference, _x.accel_value_fd, _x.accel_value_cmd, _x.brake_value_fd, _x.brake_value_cmd, _x.path_remain, _x.has_stop_point, _x.is_full_stop, _x.is_stopped, _x.lon_acc_jerk, _x.acceleration_cmd, _x.acceleration_cmd_closeloop, _x.preview_acceleration_reference, _x.slope_offset_compensation, _x.turning_offset_compensation, _x.speed_error_limited, _x.speed_error, _x.speed_offset, _x.station_error_limited, _x.station_error, _x.lon_target_point_s, _x.lon_calculate_time, _x.lon_calculate_time_max, _x.ref_curvature, _x.ref_heading, _x.current_heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error, _x.lateral_error_rate, _x.lon_error, _x.front_steering_value_fd, _x.front_steering_target, _x.front_steering_rate, _x.front_steer_angle_feedforward, _x.front_steer_angle_feedback, _x.front_steer_angle_lateral_contribution, _x.front_steer_angle_lateral_rate_contribution, _x.front_steer_angle_heading_contribution, _x.front_steer_angle_heading_rate_contribution, _x.rear_steering_value_fd, _x.rear_steering_target, _x.rear_steering_rate, _x.rear_steer_angle_feedforward, _x.rear_steer_angle_feedback, _x.rear_steer_angle_lateral_contribution, _x.rear_steer_angle_lateral_rate_contribution, _x.rear_steer_angle_heading_contribution, _x.rear_steer_angle_heading_rate_contribution, _x.matrix_k_00, _x.matrix_k_01, _x.matrix_k_02, _x.matrix_k_03, _x.matrix_k_10, _x.matrix_k_11, _x.matrix_k_12, _x.matrix_k_13, _x.matrix_state_0, _x.matrix_state_1, _x.matrix_state_2, _x.matrix_state_3, _x.matrix_q_updated_0, _x.matrix_q_updated_1, _x.matrix_q_updated_2, _x.matrix_q_updated_3, _x.current_x, _x.current_y, _x.target_point_x, _x.target_point_y, _x.lat_target_point_s, _x.lqr_calculate_time, _x.lqr_calculate_time_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 587
      (_x.driving_mode, _x.driving_mode_fd, _x.gear_location_fd, _x.gear_location_cmd, _x.epb_level_fd, _x.epb_level_cmd, _x.speed_mps, _x.speed_reference, _x.accel_value_fd, _x.accel_value_cmd, _x.brake_value_fd, _x.brake_value_cmd, _x.path_remain, _x.has_stop_point, _x.is_full_stop, _x.is_stopped, _x.lon_acc_jerk, _x.acceleration_cmd, _x.acceleration_cmd_closeloop, _x.preview_acceleration_reference, _x.slope_offset_compensation, _x.turning_offset_compensation, _x.speed_error_limited, _x.speed_error, _x.speed_offset, _x.station_error_limited, _x.station_error, _x.lon_target_point_s, _x.lon_calculate_time, _x.lon_calculate_time_max, _x.ref_curvature, _x.ref_heading, _x.current_heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error, _x.lateral_error_rate, _x.lon_error, _x.front_steering_value_fd, _x.front_steering_target, _x.front_steering_rate, _x.front_steer_angle_feedforward, _x.front_steer_angle_feedback, _x.front_steer_angle_lateral_contribution, _x.front_steer_angle_lateral_rate_contribution, _x.front_steer_angle_heading_contribution, _x.front_steer_angle_heading_rate_contribution, _x.rear_steering_value_fd, _x.rear_steering_target, _x.rear_steering_rate, _x.rear_steer_angle_feedforward, _x.rear_steer_angle_feedback, _x.rear_steer_angle_lateral_contribution, _x.rear_steer_angle_lateral_rate_contribution, _x.rear_steer_angle_heading_contribution, _x.rear_steer_angle_heading_rate_contribution, _x.matrix_k_00, _x.matrix_k_01, _x.matrix_k_02, _x.matrix_k_03, _x.matrix_k_10, _x.matrix_k_11, _x.matrix_k_12, _x.matrix_k_13, _x.matrix_state_0, _x.matrix_state_1, _x.matrix_state_2, _x.matrix_state_3, _x.matrix_q_updated_0, _x.matrix_q_updated_1, _x.matrix_q_updated_2, _x.matrix_q_updated_3, _x.current_x, _x.current_y, _x.target_point_x, _x.target_point_y, _x.lat_target_point_s, _x.lqr_calculate_time, _x.lqr_calculate_time_max,) = _get_struct_6i7d3B12d2q47d2q().unpack(str[start:end])
      self.has_stop_point = bool(self.has_stop_point)
      self.is_full_stop = bool(self.is_full_stop)
      self.is_stopped = bool(self.is_stopped)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6i7d3B12d2q47d2q = None
def _get_struct_6i7d3B12d2q47d2q():
    global _struct_6i7d3B12d2q47d2q
    if _struct_6i7d3B12d2q47d2q is None:
        _struct_6i7d3B12d2q47d2q = struct.Struct("<6i7d3B12d2q47d2q")
    return _struct_6i7d3B12d2q47d2q
