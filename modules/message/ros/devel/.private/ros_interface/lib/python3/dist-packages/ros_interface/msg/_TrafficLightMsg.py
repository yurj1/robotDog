# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/TrafficLightMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class TrafficLightMsg(genpy.Message):
  _md5sum = "e6be2f3c99e26b2711d35cc48d38d8ea"
  _type = "ros_interface/TrafficLightMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # 消息头
TrafficLight[] traffic_light # 检出的交通灯数组
TrafficLightDebug   traffic_light_debug     # 交通灯数组调试
bool   contain_lights     # 是否包含交通灯
int32   camera_id     # CAMERA_FRONT_LONG = 0; CAMERA_FRONT_NARROW = 1; CAMERA_FRONT_SHORT = 2; CAMERA_FRONT_WIDE = 3;
bool   is_valid     # true: valid  false: invalid

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/TrafficLight
int32   color     # UNKNOWN = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;
uint32   id     # light id
int32   type     # STRAIGHT = 0; TURN_LEFT = 1; TURN_RIGHT = 2; STRAIGHT_TURN_LEFT = 3; STRAIGHT_TURN_RIGHT =4; CIRCULAR = 5; PEDESTRIAN = 6; CYCLIST = 7; UNKNOWN = 8;
float64   confidence     # 置信度confdence: [0-1]
ImageRect   light_rect     # 交通灯矩形框light rect
Point3D   position     # 交通灯位置position of light
float64   distance     # 距离distance between light and stop line
int32[] light_lanes # corresponding lanes of light
float64   tracking_time     # duration of a light since track
bool   blink     # true:
float64   blinking_time     # duration of a light blinking
float64   remaining_time     # V2X time of light
Time   create_time     # time of light detected

================================================================================
MSG: ros_interface/ImageRect
int32   x     # coordinate x of left-top point of image rect
int32   y     # coordinate y of left-top point of image rect
int32   width     # width of image rect
int32   height     # height of image rect

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/Time
uint32   sec     # 秒
uint32   nsec     # 纳秒

================================================================================
MSG: ros_interface/TrafficLightDebug
TrafficLightBox   cropbox     #  
TrafficLightBox[] box #  
int32   signal_num     #  
int32   valid_pos     #  
float64   ts_diff_pos     #  
float64   ts_diff_sys     #  
int32   project_error     #  
float64   distance_to_stop_line     #  
int32   camera_id     #  
TrafficLightBox[] crop_roi #  
TrafficLightBox[] projected_roi #  
TrafficLightBox[] rectified_roi #  
TrafficLightBox[] debug_roi #  

================================================================================
MSG: ros_interface/TrafficLightBox
int32   x     # 交通灯目标在图像上中心点横向方向像素位置
int32   y     # 交通灯目标在图像上中心点纵向方向像素位置
int32   width     # 交通灯目标在图像上宽度
int32   height     # 交通灯目标在图像上高度
int32   color     # UNKNOWN = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;
bool   selected     # 是否选择
string   camera_name     # 相机名称
"""
  __slots__ = ['header','traffic_light','traffic_light_debug','contain_lights','camera_id','is_valid']
  _slot_types = ['std_msgs/Header','ros_interface/TrafficLight[]','ros_interface/TrafficLightDebug','bool','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,traffic_light,traffic_light_debug,contain_lights,camera_id,is_valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficLightMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.traffic_light is None:
        self.traffic_light = []
      if self.traffic_light_debug is None:
        self.traffic_light_debug = ros_interface.msg.TrafficLightDebug()
      if self.contain_lights is None:
        self.contain_lights = False
      if self.camera_id is None:
        self.camera_id = 0
      if self.is_valid is None:
        self.is_valid = False
    else:
      self.header = std_msgs.msg.Header()
      self.traffic_light = []
      self.traffic_light_debug = ros_interface.msg.TrafficLightDebug()
      self.contain_lights = False
      self.camera_id = 0
      self.is_valid = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light:
        _x = val1
        buff.write(_get_struct_iIid().pack(_x.color, _x.id, _x.type, _x.confidence))
        _v1 = val1.light_rect
        _x = _v1
        buff.write(_get_struct_4i().pack(_x.x, _x.y, _x.width, _x.height))
        _v2 = val1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.light_lanes)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.light_lanes))
        _x = val1
        buff.write(_get_struct_dB2d().pack(_x.tracking_time, _x.blink, _x.blinking_time, _x.remaining_time))
        _v3 = val1.create_time
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
      _x = self
      buff.write(_get_struct_5iB().pack(_x.traffic_light_debug.cropbox.x, _x.traffic_light_debug.cropbox.y, _x.traffic_light_debug.cropbox.width, _x.traffic_light_debug.cropbox.height, _x.traffic_light_debug.cropbox.color, _x.traffic_light_debug.cropbox.selected))
      _x = self.traffic_light_debug.cropbox.camera_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light_debug.box)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.box:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i2didi().pack(_x.traffic_light_debug.signal_num, _x.traffic_light_debug.valid_pos, _x.traffic_light_debug.ts_diff_pos, _x.traffic_light_debug.ts_diff_sys, _x.traffic_light_debug.project_error, _x.traffic_light_debug.distance_to_stop_line, _x.traffic_light_debug.camera_id))
      length = len(self.traffic_light_debug.crop_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.crop_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light_debug.projected_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.projected_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light_debug.rectified_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.rectified_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light_debug.debug_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.debug_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BiB().pack(_x.contain_lights, _x.camera_id, _x.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.traffic_light is None:
        self.traffic_light = None
      if self.traffic_light_debug is None:
        self.traffic_light_debug = ros_interface.msg.TrafficLightDebug()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLight()
        _x = val1
        start = end
        end += 20
        (_x.color, _x.id, _x.type, _x.confidence,) = _get_struct_iIid().unpack(str[start:end])
        _v4 = val1.light_rect
        _x = _v4
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4i().unpack(str[start:end])
        _v5 = val1.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.light_lanes = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.tracking_time, _x.blink, _x.blinking_time, _x.remaining_time,) = _get_struct_dB2d().unpack(str[start:end])
        val1.blink = bool(val1.blink)
        _v6 = val1.create_time
        _x = _v6
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        self.traffic_light.append(val1)
      _x = self
      start = end
      end += 21
      (_x.traffic_light_debug.cropbox.x, _x.traffic_light_debug.cropbox.y, _x.traffic_light_debug.cropbox.width, _x.traffic_light_debug.cropbox.height, _x.traffic_light_debug.cropbox.color, _x.traffic_light_debug.cropbox.selected,) = _get_struct_5iB().unpack(str[start:end])
      self.traffic_light_debug.cropbox.selected = bool(self.traffic_light_debug.cropbox.selected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.traffic_light_debug.cropbox.camera_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.traffic_light_debug.cropbox.camera_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.box = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.box.append(val1)
      _x = self
      start = end
      end += 40
      (_x.traffic_light_debug.signal_num, _x.traffic_light_debug.valid_pos, _x.traffic_light_debug.ts_diff_pos, _x.traffic_light_debug.ts_diff_sys, _x.traffic_light_debug.project_error, _x.traffic_light_debug.distance_to_stop_line, _x.traffic_light_debug.camera_id,) = _get_struct_2i2didi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.crop_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.crop_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.projected_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.projected_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.rectified_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.rectified_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.debug_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.debug_roi.append(val1)
      _x = self
      start = end
      end += 6
      (_x.contain_lights, _x.camera_id, _x.is_valid,) = _get_struct_BiB().unpack(str[start:end])
      self.contain_lights = bool(self.contain_lights)
      self.is_valid = bool(self.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light:
        _x = val1
        buff.write(_get_struct_iIid().pack(_x.color, _x.id, _x.type, _x.confidence))
        _v7 = val1.light_rect
        _x = _v7
        buff.write(_get_struct_4i().pack(_x.x, _x.y, _x.width, _x.height))
        _v8 = val1.position
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.light_lanes)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.light_lanes.tostring())
        _x = val1
        buff.write(_get_struct_dB2d().pack(_x.tracking_time, _x.blink, _x.blinking_time, _x.remaining_time))
        _v9 = val1.create_time
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
      _x = self
      buff.write(_get_struct_5iB().pack(_x.traffic_light_debug.cropbox.x, _x.traffic_light_debug.cropbox.y, _x.traffic_light_debug.cropbox.width, _x.traffic_light_debug.cropbox.height, _x.traffic_light_debug.cropbox.color, _x.traffic_light_debug.cropbox.selected))
      _x = self.traffic_light_debug.cropbox.camera_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light_debug.box)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.box:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i2didi().pack(_x.traffic_light_debug.signal_num, _x.traffic_light_debug.valid_pos, _x.traffic_light_debug.ts_diff_pos, _x.traffic_light_debug.ts_diff_sys, _x.traffic_light_debug.project_error, _x.traffic_light_debug.distance_to_stop_line, _x.traffic_light_debug.camera_id))
      length = len(self.traffic_light_debug.crop_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.crop_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light_debug.projected_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.projected_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light_debug.rectified_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.rectified_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.traffic_light_debug.debug_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_light_debug.debug_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BiB().pack(_x.contain_lights, _x.camera_id, _x.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.traffic_light is None:
        self.traffic_light = None
      if self.traffic_light_debug is None:
        self.traffic_light_debug = ros_interface.msg.TrafficLightDebug()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLight()
        _x = val1
        start = end
        end += 20
        (_x.color, _x.id, _x.type, _x.confidence,) = _get_struct_iIid().unpack(str[start:end])
        _v10 = val1.light_rect
        _x = _v10
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4i().unpack(str[start:end])
        _v11 = val1.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.light_lanes = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        _x = val1
        start = end
        end += 25
        (_x.tracking_time, _x.blink, _x.blinking_time, _x.remaining_time,) = _get_struct_dB2d().unpack(str[start:end])
        val1.blink = bool(val1.blink)
        _v12 = val1.create_time
        _x = _v12
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        self.traffic_light.append(val1)
      _x = self
      start = end
      end += 21
      (_x.traffic_light_debug.cropbox.x, _x.traffic_light_debug.cropbox.y, _x.traffic_light_debug.cropbox.width, _x.traffic_light_debug.cropbox.height, _x.traffic_light_debug.cropbox.color, _x.traffic_light_debug.cropbox.selected,) = _get_struct_5iB().unpack(str[start:end])
      self.traffic_light_debug.cropbox.selected = bool(self.traffic_light_debug.cropbox.selected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.traffic_light_debug.cropbox.camera_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.traffic_light_debug.cropbox.camera_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.box = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.box.append(val1)
      _x = self
      start = end
      end += 40
      (_x.traffic_light_debug.signal_num, _x.traffic_light_debug.valid_pos, _x.traffic_light_debug.ts_diff_pos, _x.traffic_light_debug.ts_diff_sys, _x.traffic_light_debug.project_error, _x.traffic_light_debug.distance_to_stop_line, _x.traffic_light_debug.camera_id,) = _get_struct_2i2didi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.crop_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.crop_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.projected_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.projected_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.rectified_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.rectified_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_light_debug.debug_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.traffic_light_debug.debug_roi.append(val1)
      _x = self
      start = end
      end += 6
      (_x.contain_lights, _x.camera_id, _x.is_valid,) = _get_struct_BiB().unpack(str[start:end])
      self.contain_lights = bool(self.contain_lights)
      self.is_valid = bool(self.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i2didi = None
def _get_struct_2i2didi():
    global _struct_2i2didi
    if _struct_2i2didi is None:
        _struct_2i2didi = struct.Struct("<2i2didi")
    return _struct_2i2didi
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_5iB = None
def _get_struct_5iB():
    global _struct_5iB
    if _struct_5iB is None:
        _struct_5iB = struct.Struct("<5iB")
    return _struct_5iB
_struct_BiB = None
def _get_struct_BiB():
    global _struct_BiB
    if _struct_BiB is None:
        _struct_BiB = struct.Struct("<BiB")
    return _struct_BiB
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_dB2d = None
def _get_struct_dB2d():
    global _struct_dB2d
    if _struct_dB2d is None:
        _struct_dB2d = struct.Struct("<dB2d")
    return _struct_dB2d
_struct_iIid = None
def _get_struct_iIid():
    global _struct_iIid
    if _struct_iIid is None:
        _struct_iIid = struct.Struct("<iIid")
    return _struct_iIid
