# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/SecurityDecision.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class SecurityDecision(genpy.Message):
  _md5sum = "af506ab87db1445b82ef49696ba48931"
  _type = "ros_interface/SecurityDecision"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
WarningCommand   warning_command     # 告警指令
int32   brake_report     # 刹车报告
int32   change_lane_command     # 换道指令
TrajectoryLimitCommand   trajectory_limit_command     # 轨迹限制指令
int32   park_command     # 停车指令
int32   drivingmode_report     # 驾驶模式报告

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/WarningCommand
int32   sound_alarm     # 声音告警
int32   light_alarm     # 车灯告警
int32   media_alarm     # 媒体告警
int32   motion_alarm     # 震动告警

================================================================================
MSG: ros_interface/TrajectoryLimitCommand
bool   speed_limit_enable     #  
float64   speed_limit     # m/s
bool   kappa_limit_enable     #  
float64   kappa_limit     # deg/m
"""
  __slots__ = ['header','warning_command','brake_report','change_lane_command','trajectory_limit_command','park_command','drivingmode_report']
  _slot_types = ['std_msgs/Header','ros_interface/WarningCommand','int32','int32','ros_interface/TrajectoryLimitCommand','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,warning_command,brake_report,change_lane_command,trajectory_limit_command,park_command,drivingmode_report

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SecurityDecision, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.warning_command is None:
        self.warning_command = ros_interface.msg.WarningCommand()
      if self.brake_report is None:
        self.brake_report = 0
      if self.change_lane_command is None:
        self.change_lane_command = 0
      if self.trajectory_limit_command is None:
        self.trajectory_limit_command = ros_interface.msg.TrajectoryLimitCommand()
      if self.park_command is None:
        self.park_command = 0
      if self.drivingmode_report is None:
        self.drivingmode_report = 0
    else:
      self.header = std_msgs.msg.Header()
      self.warning_command = ros_interface.msg.WarningCommand()
      self.brake_report = 0
      self.change_lane_command = 0
      self.trajectory_limit_command = ros_interface.msg.TrajectoryLimitCommand()
      self.park_command = 0
      self.drivingmode_report = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6iBdBd2i().pack(_x.warning_command.sound_alarm, _x.warning_command.light_alarm, _x.warning_command.media_alarm, _x.warning_command.motion_alarm, _x.brake_report, _x.change_lane_command, _x.trajectory_limit_command.speed_limit_enable, _x.trajectory_limit_command.speed_limit, _x.trajectory_limit_command.kappa_limit_enable, _x.trajectory_limit_command.kappa_limit, _x.park_command, _x.drivingmode_report))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.warning_command is None:
        self.warning_command = ros_interface.msg.WarningCommand()
      if self.trajectory_limit_command is None:
        self.trajectory_limit_command = ros_interface.msg.TrajectoryLimitCommand()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.warning_command.sound_alarm, _x.warning_command.light_alarm, _x.warning_command.media_alarm, _x.warning_command.motion_alarm, _x.brake_report, _x.change_lane_command, _x.trajectory_limit_command.speed_limit_enable, _x.trajectory_limit_command.speed_limit, _x.trajectory_limit_command.kappa_limit_enable, _x.trajectory_limit_command.kappa_limit, _x.park_command, _x.drivingmode_report,) = _get_struct_6iBdBd2i().unpack(str[start:end])
      self.trajectory_limit_command.speed_limit_enable = bool(self.trajectory_limit_command.speed_limit_enable)
      self.trajectory_limit_command.kappa_limit_enable = bool(self.trajectory_limit_command.kappa_limit_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6iBdBd2i().pack(_x.warning_command.sound_alarm, _x.warning_command.light_alarm, _x.warning_command.media_alarm, _x.warning_command.motion_alarm, _x.brake_report, _x.change_lane_command, _x.trajectory_limit_command.speed_limit_enable, _x.trajectory_limit_command.speed_limit, _x.trajectory_limit_command.kappa_limit_enable, _x.trajectory_limit_command.kappa_limit, _x.park_command, _x.drivingmode_report))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.warning_command is None:
        self.warning_command = ros_interface.msg.WarningCommand()
      if self.trajectory_limit_command is None:
        self.trajectory_limit_command = ros_interface.msg.TrajectoryLimitCommand()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.warning_command.sound_alarm, _x.warning_command.light_alarm, _x.warning_command.media_alarm, _x.warning_command.motion_alarm, _x.brake_report, _x.change_lane_command, _x.trajectory_limit_command.speed_limit_enable, _x.trajectory_limit_command.speed_limit, _x.trajectory_limit_command.kappa_limit_enable, _x.trajectory_limit_command.kappa_limit, _x.park_command, _x.drivingmode_report,) = _get_struct_6iBdBd2i().unpack(str[start:end])
      self.trajectory_limit_command.speed_limit_enable = bool(self.trajectory_limit_command.speed_limit_enable)
      self.trajectory_limit_command.kappa_limit_enable = bool(self.trajectory_limit_command.kappa_limit_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6iBdBd2i = None
def _get_struct_6iBdBd2i():
    global _struct_6iBdBd2i
    if _struct_6iBdBd2i is None:
        _struct_6iBdBd2i = struct.Struct("<6iBdBd2i")
    return _struct_6iBdBd2i
