# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/ObstacleList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class ObstacleList(genpy.Message):
  _md5sum = "557209d27fc972d8822c67ecf57858ce"
  _type = "ros_interface/ObstacleList"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # 消息头
int32   sensor_id     # 安装的传感器id(camera,lidar,radar) ' 相机id: 0-front_center相机 1-front_left相机 2-front_right相机 3-left_front相机 4-left_back右后相机 5-right_front相机 6-right_back相机 7-back相机'  8-相机融合
Obstacle[] obstacle # 检测出的障碍物数组
int32   error_code     # 错误码（default = OK）
bool   is_valid     # 障碍物数据是否合法
int32   change_origin_flag     # 坐标切换状态（0-坐标系切换成功 1-坐标系切换中 2-坐标系切换故障）

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/Obstacle
Time   timestamp     # 时间戳
int32   id     # 障碍物id
float64   existence_prob     # 障碍物存在的概率
Time   create_time     # 障碍物被识别的时间戳
Time   last_updated_time     # 障碍物上一次更新的时间
Point3D   center_pos_vehicle     # 车辆坐标系下障碍物的中心位置
Point3D   center_pos_abs     # 世界坐标系下障碍物的中心位置
float64   theta_vehicle     # 车辆坐标系下障碍物的朝向
float64   theta_abs     # 世界坐标系下障碍物的朝向
Point3D   velocity_vehicle     # 车辆坐标系下障碍物的速度
Point3D   velocity_abs     # 世界坐标系下障碍物的速度
float64   length     # 障碍物长度
float64   width     # 障碍物宽度
float64   height     # 障碍物高度
ImageKeyPoint[] image_key_points # 图像坐标系下障碍物多边形
Point3D[] polygon_point_abs # 世界坐标系下障碍物多边形
Point3D[] polygon_point_vehicle # 车辆坐标系下障碍物多边形
float64   tracking_time     # 障碍物被追踪的时间
int32   type     # 障碍物类别： UNKNOWN = 0; UNKNOWN_MOVABLE = 1; UNKNOWN_UNMOVABLE = 2; PEDESTRIAN = 3; BICYCLE = 4; VEHICLE = 5;
float64   confidence     # 障碍物类别置信度
int32   confidence_type     # 障碍物置信度类别： CONFIDENCE_UNKNOWN = 0; CONFIDENCE_CNN = 1; CONFIDENCE_RADAR = 2;
Point3D[] drops # 障碍物轨迹点
Point3D   acceleration_vehicle     # 车辆坐标系下障碍物的加速度
Point3D   acceleration_abs     # 世界坐标系下障碍物的加速度
Point2D   anchor_point_image     # 障碍物尾框中心点(图像坐标系)
Point3D   anchor_point_vehicle     # 障碍物尾框中心点(车辆坐标系)
Point3D   anchor_point_abs     # 障碍物尾框中心点(世界坐标系)
BBox2D   bbox2d     # 障碍物图像框
BBox2D   bbox2d_rear     # 障碍物图像尾框
int32   sub_type     # 障碍物类别： ST_UNKNOWN = 0; ST_UNKNOWN_MOVABLE = 1; ST_UNKNOWN_UNMOVABLE = 2; ST_CAR = 3; ST_VAN = 4; ST_TRUCK = 5; ST_BUS = 6; ST_CYCLIST = 7; ST_MOTORCYCLIST = 8; ST_TRICYCLIST = 9; ST_PEDESTRIAN = 10; ST_TRAFFICCONE = 11; ST_PILLAR = 12; ST_SPEED_BUMP = 13;
float64   height_above_ground     # 障碍物近地点到地面的高度
float64[] position_abs_covariance # 世界坐标系下障碍物中心位置的协方差矩阵
float64[] velocity_abs_covariance # 世界坐标系下障碍物速度的协方差矩阵
float64[] acceleration_abs_covariance # 世界坐标系下障碍物加速度的协方差矩阵
float64   theta_abs_covariance     # 世界坐标系下障碍物朝向的协方差矩阵
float64[] position_vehicle_covariance # 车辆坐标系下障碍物中心位置的协方差矩阵
float64[] velocity_vehicle_covariance # 车辆坐标系下障碍物速度的协方差矩阵
float64[] acceleration_vehicle_covariance # 车辆坐标系下障碍物加速度的协方差矩阵
float64   theta_vehicle_covariance     # 车辆坐标系下障碍物朝向的协方差矩阵
SensorCalibrator   sensor_calibrator     # 传感器标定参数
uint8   cipv_flag     # 障碍物状态标志（0-CIPV 1-CIPS 2-LPIHP 3-RPIHP 4-NONE）
int32   lane_position     # 车道线位置 -2-NEXT_LEFT_LANE -1-LEFT_LANE 0-EGO_LANE 1-RIGHT_LANE 2-NEXT_RIGHT_LANE 3-OTHERS 4-UNKNOWN
float64   pihp_percentage     # 临车道车辆压线比例
int32   blinker_flag     # 障碍物车辆信号灯状态： 0-OFF 1-LEFT_TURN_VISIBLE 2-LEFT_TURN_ON 3-RIGHT_TURN_VISIBLE 4-RIGHT_TURN_ON 5-BRAKE_VISIBLE 6-BRAKE_ON 7-UNKNOWN
int32   fusion_type     # 融合障碍物类型 0-CAMERA 1-RADAR 2-LIDAR 3-ULTRASONIC 4-FUSED 5-UNKNOWN

================================================================================
MSG: ros_interface/Time
uint32   sec     # 秒
uint32   nsec     # 纳秒

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/ImageKeyPoint
float64   x     # 车位图像关键点x坐标
float64   y     # 车位图像关键点y坐标
float64   confidence     # 置信度

================================================================================
MSG: ros_interface/Point2D
float64   x     # 位置坐标x
float64   y     # 位置坐标y

================================================================================
MSG: ros_interface/BBox2D
int16   xmin     # 图像框左上角的x坐标
int16   ymin     # 图像框左上角的y坐标
int16   xmax     # 图像框右下角的x坐标
int16   ymax     # 图像框右下角的y坐标

================================================================================
MSG: ros_interface/SensorCalibrator
Point3D   pose     # 传感器安装位置(相对于后轴中心点)
Point3D   angle     # 传感器安装角度(车体坐标系)
"""
  __slots__ = ['header','sensor_id','obstacle','error_code','is_valid','change_origin_flag']
  _slot_types = ['std_msgs/Header','int32','ros_interface/Obstacle[]','int32','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sensor_id,obstacle,error_code,is_valid,change_origin_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.obstacle is None:
        self.obstacle = []
      if self.error_code is None:
        self.error_code = 0
      if self.is_valid is None:
        self.is_valid = False
      if self.change_origin_flag is None:
        self.change_origin_flag = 0
    else:
      self.header = std_msgs.msg.Header()
      self.sensor_id = 0
      self.obstacle = []
      self.error_code = 0
      self.is_valid = False
      self.change_origin_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sensor_id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle:
        _v1 = val1.timestamp
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
        _x = val1
        buff.write(_get_struct_id().pack(_x.id, _x.existence_prob))
        _v2 = val1.create_time
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
        _v3 = val1.last_updated_time
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
        _v4 = val1.center_pos_vehicle
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.center_pos_abs
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.theta_vehicle, _x.theta_abs))
        _v6 = val1.velocity_vehicle
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.velocity_abs
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.length, _x.width, _x.height))
        length = len(val1.image_key_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.image_key_points:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.confidence))
        length = len(val1.polygon_point_abs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.polygon_point_abs:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.polygon_point_vehicle)
        buff.write(_struct_I.pack(length))
        for val2 in val1.polygon_point_vehicle:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_didi().pack(_x.tracking_time, _x.type, _x.confidence, _x.confidence_type))
        length = len(val1.drops)
        buff.write(_struct_I.pack(length))
        for val2 in val1.drops:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.acceleration_vehicle
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.acceleration_abs
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.anchor_point_image
        _x = _v10
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v11 = val1.anchor_point_vehicle
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.anchor_point_abs
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = val1.bbox2d
        _x = _v13
        buff.write(_get_struct_4h().pack(_x.xmin, _x.ymin, _x.xmax, _x.ymax))
        _v14 = val1.bbox2d_rear
        _x = _v14
        buff.write(_get_struct_4h().pack(_x.xmin, _x.ymin, _x.xmax, _x.ymax))
        _x = val1
        buff.write(_get_struct_id().pack(_x.sub_type, _x.height_above_ground))
        length = len(val1.position_abs_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.position_abs_covariance))
        length = len(val1.velocity_abs_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.velocity_abs_covariance))
        length = len(val1.acceleration_abs_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.acceleration_abs_covariance))
        _x = val1.theta_abs_covariance
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.position_vehicle_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.position_vehicle_covariance))
        length = len(val1.velocity_vehicle_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.velocity_vehicle_covariance))
        length = len(val1.acceleration_vehicle_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.acceleration_vehicle_covariance))
        _x = val1.theta_vehicle_covariance
        buff.write(_get_struct_d().pack(_x))
        _v15 = val1.sensor_calibrator
        _v16 = _v15.pose
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v17 = _v15.angle
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_Bid2i().pack(_x.cipv_flag, _x.lane_position, _x.pihp_percentage, _x.blinker_flag, _x.fusion_type))
      _x = self
      buff.write(_get_struct_iBi().pack(_x.error_code, _x.is_valid, _x.change_origin_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obstacle is None:
        self.obstacle = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.sensor_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle = []
      for i in range(0, length):
        val1 = ros_interface.msg.Obstacle()
        _v18 = val1.timestamp
        _x = _v18
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.id, _x.existence_prob,) = _get_struct_id().unpack(str[start:end])
        _v19 = val1.create_time
        _x = _v19
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        _v20 = val1.last_updated_time
        _x = _v20
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        _v21 = val1.center_pos_vehicle
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v22 = val1.center_pos_abs
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.theta_vehicle, _x.theta_abs,) = _get_struct_2d().unpack(str[start:end])
        _v23 = val1.velocity_vehicle
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = val1.velocity_abs
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.length, _x.width, _x.height,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.image_key_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.ImageKeyPoint()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.confidence,) = _get_struct_3d().unpack(str[start:end])
          val1.image_key_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.polygon_point_abs = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.polygon_point_abs.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.polygon_point_vehicle = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.polygon_point_vehicle.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.tracking_time, _x.type, _x.confidence, _x.confidence_type,) = _get_struct_didi().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.drops = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.drops.append(val2)
        _v25 = val1.acceleration_vehicle
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v26 = val1.acceleration_abs
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = val1.anchor_point_image
        _x = _v27
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v28 = val1.anchor_point_vehicle
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v29 = val1.anchor_point_abs
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v30 = val1.bbox2d
        _x = _v30
        start = end
        end += 8
        (_x.xmin, _x.ymin, _x.xmax, _x.ymax,) = _get_struct_4h().unpack(str[start:end])
        _v31 = val1.bbox2d_rear
        _x = _v31
        start = end
        end += 8
        (_x.xmin, _x.ymin, _x.xmax, _x.ymax,) = _get_struct_4h().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.sub_type, _x.height_above_ground,) = _get_struct_id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.position_abs_covariance = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocity_abs_covariance = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.acceleration_abs_covariance = s.unpack(str[start:end])
        start = end
        end += 8
        (val1.theta_abs_covariance,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.position_vehicle_covariance = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocity_vehicle_covariance = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.acceleration_vehicle_covariance = s.unpack(str[start:end])
        start = end
        end += 8
        (val1.theta_vehicle_covariance,) = _get_struct_d().unpack(str[start:end])
        _v32 = val1.sensor_calibrator
        _v33 = _v32.pose
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v34 = _v32.angle
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 21
        (_x.cipv_flag, _x.lane_position, _x.pihp_percentage, _x.blinker_flag, _x.fusion_type,) = _get_struct_Bid2i().unpack(str[start:end])
        self.obstacle.append(val1)
      _x = self
      start = end
      end += 9
      (_x.error_code, _x.is_valid, _x.change_origin_flag,) = _get_struct_iBi().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sensor_id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle:
        _v35 = val1.timestamp
        _x = _v35
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
        _x = val1
        buff.write(_get_struct_id().pack(_x.id, _x.existence_prob))
        _v36 = val1.create_time
        _x = _v36
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
        _v37 = val1.last_updated_time
        _x = _v37
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
        _v38 = val1.center_pos_vehicle
        _x = _v38
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v39 = val1.center_pos_abs
        _x = _v39
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.theta_vehicle, _x.theta_abs))
        _v40 = val1.velocity_vehicle
        _x = _v40
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v41 = val1.velocity_abs
        _x = _v41
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.length, _x.width, _x.height))
        length = len(val1.image_key_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.image_key_points:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.confidence))
        length = len(val1.polygon_point_abs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.polygon_point_abs:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.polygon_point_vehicle)
        buff.write(_struct_I.pack(length))
        for val2 in val1.polygon_point_vehicle:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_didi().pack(_x.tracking_time, _x.type, _x.confidence, _x.confidence_type))
        length = len(val1.drops)
        buff.write(_struct_I.pack(length))
        for val2 in val1.drops:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v42 = val1.acceleration_vehicle
        _x = _v42
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v43 = val1.acceleration_abs
        _x = _v43
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v44 = val1.anchor_point_image
        _x = _v44
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v45 = val1.anchor_point_vehicle
        _x = _v45
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v46 = val1.anchor_point_abs
        _x = _v46
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v47 = val1.bbox2d
        _x = _v47
        buff.write(_get_struct_4h().pack(_x.xmin, _x.ymin, _x.xmax, _x.ymax))
        _v48 = val1.bbox2d_rear
        _x = _v48
        buff.write(_get_struct_4h().pack(_x.xmin, _x.ymin, _x.xmax, _x.ymax))
        _x = val1
        buff.write(_get_struct_id().pack(_x.sub_type, _x.height_above_ground))
        length = len(val1.position_abs_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.position_abs_covariance.tostring())
        length = len(val1.velocity_abs_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocity_abs_covariance.tostring())
        length = len(val1.acceleration_abs_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.acceleration_abs_covariance.tostring())
        _x = val1.theta_abs_covariance
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.position_vehicle_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.position_vehicle_covariance.tostring())
        length = len(val1.velocity_vehicle_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocity_vehicle_covariance.tostring())
        length = len(val1.acceleration_vehicle_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.acceleration_vehicle_covariance.tostring())
        _x = val1.theta_vehicle_covariance
        buff.write(_get_struct_d().pack(_x))
        _v49 = val1.sensor_calibrator
        _v50 = _v49.pose
        _x = _v50
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v51 = _v49.angle
        _x = _v51
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_Bid2i().pack(_x.cipv_flag, _x.lane_position, _x.pihp_percentage, _x.blinker_flag, _x.fusion_type))
      _x = self
      buff.write(_get_struct_iBi().pack(_x.error_code, _x.is_valid, _x.change_origin_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obstacle is None:
        self.obstacle = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.sensor_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle = []
      for i in range(0, length):
        val1 = ros_interface.msg.Obstacle()
        _v52 = val1.timestamp
        _x = _v52
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.id, _x.existence_prob,) = _get_struct_id().unpack(str[start:end])
        _v53 = val1.create_time
        _x = _v53
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        _v54 = val1.last_updated_time
        _x = _v54
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        _v55 = val1.center_pos_vehicle
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = val1.center_pos_abs
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.theta_vehicle, _x.theta_abs,) = _get_struct_2d().unpack(str[start:end])
        _v57 = val1.velocity_vehicle
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v58 = val1.velocity_abs
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.length, _x.width, _x.height,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.image_key_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.ImageKeyPoint()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.confidence,) = _get_struct_3d().unpack(str[start:end])
          val1.image_key_points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.polygon_point_abs = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.polygon_point_abs.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.polygon_point_vehicle = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.polygon_point_vehicle.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.tracking_time, _x.type, _x.confidence, _x.confidence_type,) = _get_struct_didi().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.drops = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.drops.append(val2)
        _v59 = val1.acceleration_vehicle
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v60 = val1.acceleration_abs
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v61 = val1.anchor_point_image
        _x = _v61
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v62 = val1.anchor_point_vehicle
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v63 = val1.anchor_point_abs
        _x = _v63
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v64 = val1.bbox2d
        _x = _v64
        start = end
        end += 8
        (_x.xmin, _x.ymin, _x.xmax, _x.ymax,) = _get_struct_4h().unpack(str[start:end])
        _v65 = val1.bbox2d_rear
        _x = _v65
        start = end
        end += 8
        (_x.xmin, _x.ymin, _x.xmax, _x.ymax,) = _get_struct_4h().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.sub_type, _x.height_above_ground,) = _get_struct_id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.position_abs_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocity_abs_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.acceleration_abs_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (val1.theta_abs_covariance,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.position_vehicle_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocity_vehicle_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.acceleration_vehicle_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (val1.theta_vehicle_covariance,) = _get_struct_d().unpack(str[start:end])
        _v66 = val1.sensor_calibrator
        _v67 = _v66.pose
        _x = _v67
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v68 = _v66.angle
        _x = _v68
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 21
        (_x.cipv_flag, _x.lane_position, _x.pihp_percentage, _x.blinker_flag, _x.fusion_type,) = _get_struct_Bid2i().unpack(str[start:end])
        self.obstacle.append(val1)
      _x = self
      start = end
      end += 9
      (_x.error_code, _x.is_valid, _x.change_origin_flag,) = _get_struct_iBi().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4h = None
def _get_struct_4h():
    global _struct_4h
    if _struct_4h is None:
        _struct_4h = struct.Struct("<4h")
    return _struct_4h
_struct_Bid2i = None
def _get_struct_Bid2i():
    global _struct_Bid2i
    if _struct_Bid2i is None:
        _struct_Bid2i = struct.Struct("<Bid2i")
    return _struct_Bid2i
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_didi = None
def _get_struct_didi():
    global _struct_didi
    if _struct_didi is None:
        _struct_didi = struct.Struct("<didi")
    return _struct_didi
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iBi = None
def _get_struct_iBi():
    global _struct_iBi
    if _struct_iBi is None:
        _struct_iBi = struct.Struct("<iBi")
    return _struct_iBi
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
