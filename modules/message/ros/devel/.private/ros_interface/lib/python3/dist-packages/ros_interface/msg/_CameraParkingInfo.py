# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/CameraParkingInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class CameraParkingInfo(genpy.Message):
  _md5sum = "857f775ab536a49a085ea8594ec9e570"
  _type = "ros_interface/CameraParkingInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # timestamp is  included in header
int32   parking_space_id     # 停车位id
int32   parking_type     # PARKING_TYPE=0//无效泊车 PARKING_TYPE=1//垂直泊车 PARKING_TYPE=2//水平泊车 PARKING_TYPE=3//倾斜泊车
bool   is_parking_enable     # PARKING_ENABLE=0//不可泊入 PARKING_ENABLE=1//可泊入
float64   confidence     # 停车位置信度
Point3D   center_point_of_parking     # 车辆坐标系的停车位中心点
float64   theta     # 车辆坐标系下停车位的朝向
float64   width     # 停车位宽
float64   length     # 停车位长
float64   yaw_offset     # 停车位角度偏移量（倾斜车位），倾斜车位与道路边线夹角
ImageKeyPoint[] parking_points_in_image # 图像坐标系下停车位关键点，顺时针方向

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/ImageKeyPoint
float64   x     # 车位图像关键点x坐标
float64   y     # 车位图像关键点y坐标
float64   confidence     # 置信度
"""
  __slots__ = ['header','parking_space_id','parking_type','is_parking_enable','confidence','center_point_of_parking','theta','width','length','yaw_offset','parking_points_in_image']
  _slot_types = ['std_msgs/Header','int32','int32','bool','float64','ros_interface/Point3D','float64','float64','float64','float64','ros_interface/ImageKeyPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,parking_space_id,parking_type,is_parking_enable,confidence,center_point_of_parking,theta,width,length,yaw_offset,parking_points_in_image

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraParkingInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parking_space_id is None:
        self.parking_space_id = 0
      if self.parking_type is None:
        self.parking_type = 0
      if self.is_parking_enable is None:
        self.is_parking_enable = False
      if self.confidence is None:
        self.confidence = 0.
      if self.center_point_of_parking is None:
        self.center_point_of_parking = ros_interface.msg.Point3D()
      if self.theta is None:
        self.theta = 0.
      if self.width is None:
        self.width = 0.
      if self.length is None:
        self.length = 0.
      if self.yaw_offset is None:
        self.yaw_offset = 0.
      if self.parking_points_in_image is None:
        self.parking_points_in_image = []
    else:
      self.header = std_msgs.msg.Header()
      self.parking_space_id = 0
      self.parking_type = 0
      self.is_parking_enable = False
      self.confidence = 0.
      self.center_point_of_parking = ros_interface.msg.Point3D()
      self.theta = 0.
      self.width = 0.
      self.length = 0.
      self.yaw_offset = 0.
      self.parking_points_in_image = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2iB8d().pack(_x.parking_space_id, _x.parking_type, _x.is_parking_enable, _x.confidence, _x.center_point_of_parking.x, _x.center_point_of_parking.y, _x.center_point_of_parking.z, _x.theta, _x.width, _x.length, _x.yaw_offset))
      length = len(self.parking_points_in_image)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_points_in_image:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.center_point_of_parking is None:
        self.center_point_of_parking = ros_interface.msg.Point3D()
      if self.parking_points_in_image is None:
        self.parking_points_in_image = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 73
      (_x.parking_space_id, _x.parking_type, _x.is_parking_enable, _x.confidence, _x.center_point_of_parking.x, _x.center_point_of_parking.y, _x.center_point_of_parking.z, _x.theta, _x.width, _x.length, _x.yaw_offset,) = _get_struct_2iB8d().unpack(str[start:end])
      self.is_parking_enable = bool(self.is_parking_enable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_points_in_image = []
      for i in range(0, length):
        val1 = ros_interface.msg.ImageKeyPoint()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.confidence,) = _get_struct_3d().unpack(str[start:end])
        self.parking_points_in_image.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2iB8d().pack(_x.parking_space_id, _x.parking_type, _x.is_parking_enable, _x.confidence, _x.center_point_of_parking.x, _x.center_point_of_parking.y, _x.center_point_of_parking.z, _x.theta, _x.width, _x.length, _x.yaw_offset))
      length = len(self.parking_points_in_image)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_points_in_image:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.center_point_of_parking is None:
        self.center_point_of_parking = ros_interface.msg.Point3D()
      if self.parking_points_in_image is None:
        self.parking_points_in_image = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 73
      (_x.parking_space_id, _x.parking_type, _x.is_parking_enable, _x.confidence, _x.center_point_of_parking.x, _x.center_point_of_parking.y, _x.center_point_of_parking.z, _x.theta, _x.width, _x.length, _x.yaw_offset,) = _get_struct_2iB8d().unpack(str[start:end])
      self.is_parking_enable = bool(self.is_parking_enable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_points_in_image = []
      for i in range(0, length):
        val1 = ros_interface.msg.ImageKeyPoint()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.confidence,) = _get_struct_3d().unpack(str[start:end])
        self.parking_points_in_image.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iB8d = None
def _get_struct_2iB8d():
    global _struct_2iB8d
    if _struct_2iB8d is None:
        _struct_2iB8d = struct.Struct("<2iB8d")
    return _struct_2iB8d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
