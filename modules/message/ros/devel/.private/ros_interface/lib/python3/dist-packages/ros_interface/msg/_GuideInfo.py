# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/GuideInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class GuideInfo(genpy.Message):
  _md5sum = "aa74d1653e11a6cb191e3ce919a1654f"
  _type = "ros_interface/GuideInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # 头部信息
float64   next_dis     # 下一条规划路线上道路的距离
GuideRoad   current_road     # 当前道路的引导信息
GuideRoad   next_road     # 下一条规划道路的引导信息
int8   round_status     # 环岛状态: 0：未知或非环岛状态 1：当前为非环岛道路并且规划路线即将驶入环岛主路 2：当前道路类型是环岛并且规划路线还是在环岛主路中行驶 3：当前道路类型是环岛并且规划路线即将驶出环岛主路
int8   intersection_status     # 交叉路口状态: 0：未知 1：非交叉路口状态 2：交叉路口通行状态
int8   roads_status     # 主辅路状态： 0：未知或非主辅路状态 1：当前道路类型是辅路下一条道路类型是主路  2：当前道路类型是主路下一条道路类型是辅路

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/GuideRoad
int64   road_id     # 道路的id
int8   road_type     # 道路的类型: 0：未知或一般道路  1：环岛 2：交叉路口 3：主路 4：辅路
int8   turn_type     # 规划路线上道路的转向信息 1：左转 2：直行 3：右转
float64   avg_curvature     # 道路的平均曲率
int32   curvature_size     # 道路中心线上点(曲率)数量
CurvatureInfo[] curvature # 道路曲率信息数组

================================================================================
MSG: ros_interface/CurvatureInfo
float64   offset     # 道路中心线上点位于该道路的位置（与道路起点的距离）
float64   value     # 道路中心线上点的曲率值
"""
  __slots__ = ['header','next_dis','current_road','next_road','round_status','intersection_status','roads_status']
  _slot_types = ['std_msgs/Header','float64','ros_interface/GuideRoad','ros_interface/GuideRoad','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,next_dis,current_road,next_road,round_status,intersection_status,roads_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GuideInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.next_dis is None:
        self.next_dis = 0.
      if self.current_road is None:
        self.current_road = ros_interface.msg.GuideRoad()
      if self.next_road is None:
        self.next_road = ros_interface.msg.GuideRoad()
      if self.round_status is None:
        self.round_status = 0
      if self.intersection_status is None:
        self.intersection_status = 0
      if self.roads_status is None:
        self.roads_status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.next_dis = 0.
      self.current_road = ros_interface.msg.GuideRoad()
      self.next_road = ros_interface.msg.GuideRoad()
      self.round_status = 0
      self.intersection_status = 0
      self.roads_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dq2bdi().pack(_x.next_dis, _x.current_road.road_id, _x.current_road.road_type, _x.current_road.turn_type, _x.current_road.avg_curvature, _x.current_road.curvature_size))
      length = len(self.current_road.curvature)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_road.curvature:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.offset, _x.value))
      _x = self
      buff.write(_get_struct_q2bdi().pack(_x.next_road.road_id, _x.next_road.road_type, _x.next_road.turn_type, _x.next_road.avg_curvature, _x.next_road.curvature_size))
      length = len(self.next_road.curvature)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_road.curvature:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.offset, _x.value))
      _x = self
      buff.write(_get_struct_3b().pack(_x.round_status, _x.intersection_status, _x.roads_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.current_road is None:
        self.current_road = ros_interface.msg.GuideRoad()
      if self.next_road is None:
        self.next_road = ros_interface.msg.GuideRoad()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.next_dis, _x.current_road.road_id, _x.current_road.road_type, _x.current_road.turn_type, _x.current_road.avg_curvature, _x.current_road.curvature_size,) = _get_struct_dq2bdi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_road.curvature = []
      for i in range(0, length):
        val1 = ros_interface.msg.CurvatureInfo()
        _x = val1
        start = end
        end += 16
        (_x.offset, _x.value,) = _get_struct_2d().unpack(str[start:end])
        self.current_road.curvature.append(val1)
      _x = self
      start = end
      end += 22
      (_x.next_road.road_id, _x.next_road.road_type, _x.next_road.turn_type, _x.next_road.avg_curvature, _x.next_road.curvature_size,) = _get_struct_q2bdi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_road.curvature = []
      for i in range(0, length):
        val1 = ros_interface.msg.CurvatureInfo()
        _x = val1
        start = end
        end += 16
        (_x.offset, _x.value,) = _get_struct_2d().unpack(str[start:end])
        self.next_road.curvature.append(val1)
      _x = self
      start = end
      end += 3
      (_x.round_status, _x.intersection_status, _x.roads_status,) = _get_struct_3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dq2bdi().pack(_x.next_dis, _x.current_road.road_id, _x.current_road.road_type, _x.current_road.turn_type, _x.current_road.avg_curvature, _x.current_road.curvature_size))
      length = len(self.current_road.curvature)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_road.curvature:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.offset, _x.value))
      _x = self
      buff.write(_get_struct_q2bdi().pack(_x.next_road.road_id, _x.next_road.road_type, _x.next_road.turn_type, _x.next_road.avg_curvature, _x.next_road.curvature_size))
      length = len(self.next_road.curvature)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_road.curvature:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.offset, _x.value))
      _x = self
      buff.write(_get_struct_3b().pack(_x.round_status, _x.intersection_status, _x.roads_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.current_road is None:
        self.current_road = ros_interface.msg.GuideRoad()
      if self.next_road is None:
        self.next_road = ros_interface.msg.GuideRoad()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.next_dis, _x.current_road.road_id, _x.current_road.road_type, _x.current_road.turn_type, _x.current_road.avg_curvature, _x.current_road.curvature_size,) = _get_struct_dq2bdi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_road.curvature = []
      for i in range(0, length):
        val1 = ros_interface.msg.CurvatureInfo()
        _x = val1
        start = end
        end += 16
        (_x.offset, _x.value,) = _get_struct_2d().unpack(str[start:end])
        self.current_road.curvature.append(val1)
      _x = self
      start = end
      end += 22
      (_x.next_road.road_id, _x.next_road.road_type, _x.next_road.turn_type, _x.next_road.avg_curvature, _x.next_road.curvature_size,) = _get_struct_q2bdi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_road.curvature = []
      for i in range(0, length):
        val1 = ros_interface.msg.CurvatureInfo()
        _x = val1
        start = end
        end += 16
        (_x.offset, _x.value,) = _get_struct_2d().unpack(str[start:end])
        self.next_road.curvature.append(val1)
      _x = self
      start = end
      end += 3
      (_x.round_status, _x.intersection_status, _x.roads_status,) = _get_struct_3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3b = None
def _get_struct_3b():
    global _struct_3b
    if _struct_3b is None:
        _struct_3b = struct.Struct("<3b")
    return _struct_3b
_struct_dq2bdi = None
def _get_struct_dq2bdi():
    global _struct_dq2bdi
    if _struct_dq2bdi is None:
        _struct_dq2bdi = struct.Struct("<dq2bdi")
    return _struct_dq2bdi
_struct_q2bdi = None
def _get_struct_q2bdi():
    global _struct_q2bdi
    if _struct_q2bdi is None:
        _struct_q2bdi = struct.Struct("<q2bdi")
    return _struct_q2bdi
