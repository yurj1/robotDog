# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/LaneList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class LaneList(genpy.Message):
  _md5sum = "48b68a31434316e84d258accd4457bd2"
  _type = "ros_interface/LaneList"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # 消息头
int32   sensor_id     # 安装的传感器id(camera,lidar,radar) ' 相机id: 0-front_center相机 1-front_left相机 2-front_right相机 3-left_front相机 4-left_back右后相机 5-right_front相机 6-right_back相机 7-back相机'  8-相机融合
int8   error_code     # 错误码： ERROR_NONE = 0; ERROR_UNKNOWN = 1;
uint8   sensor_status     # 传感器状态： NORMAL=0； ABNORMAL=1；
int32   change_origin_flag     # 坐标切换状态（0-坐标系切换成功 1-坐标系切换中 2-坐标系切换故障）
bool   is_valid     # 车道线数据是否合法
SensorCalibrator   sensor_calibrator     # 传感器标定参数
LaneLine[] camera_laneline # 车道线检测结果数组
HolisticPathPrediction   hpp     # 行驶预测线
RoadMark[] road_marks # 路面标识

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/SensorCalibrator
Point3D   pose     # 传感器安装位置(相对于后轴中心点)
Point3D   angle     # 传感器安装角度(车体坐标系)

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/LaneLine
int32   lane_type     #  车道线类型：   SOLID = 0;   DASHED = 1;   ROAD_DELIMITER = 2;   NONE = 3;   UNKNOWN = 4;
int32   lane_color     #  车道线颜色：   WHITE = 0;   YELLOW = 1;   OTHERS = 2;   UNKNOWN = 3;
int32   pos_type     # 车道线位置类别：    BOLLARD_LEFT = -5;   FOURTH_LEFT = -4;   THIRD_LEFT = -3;   ADJACENT_LEFT = -2;  //!< lane marking on the left side next to ego lane   EGO_LEFT = -1;       //!< left lane marking of the ego lane   EGO_RIGHT = 1;       //!< right lane marking of the ego lane   ADJACENT_RIGHT = 2;  //!< lane marking on the right side next to ego lane   THIRD_RIGHT = 3;   FOURTH_RIGHT = 4;   BOLLARD_RIGHT = 5;   OTHER = 6;    //!< other types of lane   UNKNOWN = 7;  //!< background
LaneLineCubicCurve   curve_vehicle     # 车辆坐标系车道线三次曲线系数
LaneLineCubicCurve   curve_image     # 图像坐标系车道线三次曲线系数
LaneLineCubicCurve   curve_abs     # 世界坐标系车道线三次曲线系数
Point3D[] pts_vehicle # 车辆坐标系车道线点集
Point2D[] pts_image # 图像坐标系车道线点集
Point3D[] pts_abs # 世界坐标系车道线点集
EndPoints   image_end_point     # 车道线上顶点与下顶点
Point2D[] pts_key # 车道线关键点数组
uint8   hd_lane_id     # 高精车道线id
float64   confidence     # 车道线置信度
int32   lane_quality     #   车道线质量：   VERY_LOW = 0;   LOW = 1;   HIGH = 2;   VERY_HIGH = 3;
int32   fused_lane_type     #   融合车道线类别：   CAMERA = 0;   HD = 1;   FUSED = 2;   UNKNOWN = 3;   if value is 1, lane_quality = 3
float64[] homography_mat # 透视变换矩阵
float64[] homography_mat_inv # 透视变换逆矩阵
int32   lane_coordinate_type     #   坐标系类别：   FRAME = 0;   IMAGE = 1;   CAMERA = 2;   VEHICLE = 3;   ABSOLUTE = 4;
int32   use_type     #   使用类别：   REAL = 0;   VIRTUAL = 1;
Time   create_time     # 车道线被识别的时间戳

================================================================================
MSG: ros_interface/LaneLineCubicCurve
float64   start_x     # 车道线起始位置
float64   end_x     # 车道线结束位置
float64   a     # 三次曲线系数
float64   b     #  
float64   c     #  
float64   d     #  

================================================================================
MSG: ros_interface/Point2D
float64   x     # 位置坐标x
float64   y     # 位置坐标y

================================================================================
MSG: ros_interface/EndPoints
Point2D   start     # 车道线上顶点
Point2D   end     # 车道线下顶点

================================================================================
MSG: ros_interface/Time
uint32   sec     # 秒
uint32   nsec     # 纳秒

================================================================================
MSG: ros_interface/HolisticPathPrediction
LaneLineCubicCurve   hpp     # 行驶路径预测： 1、针对没有车道线等特殊路段如：收费站附近、进出匝道附近、 维修区域附近，可以虚拟出可行驶路径预测； 2、针对车辆遮挡的区域，可以虚拟出可行驶路径预测；
int32   planning_source     # 规划路径来源:  0 - invalid,  1 - 双侧车道线,  2 - 左侧车道线,  3 - 右侧车道线, 4 - 左侧路沿，  5 - 右侧路沿， 6 - 前车轨迹，  7 - freespace, 8 - 本车轨迹预测
float64   ego_lane_width     # 自车道宽度
float64   confidence     # 置信度[0 - 1]

================================================================================
MSG: ros_interface/RoadMark
float64   longitude_dist     # 相对于车身坐标系原点的纵向距离,单位m
float64   lateral_dist     # 相对于车身坐标系原点的横向距离,单位m
float64   x     # 质心坐标x
float64   y     # 质心坐标y
float64   z     # 质心坐标z
float64   confidence     # 置信度[0 - 1]
int32   type     # 标识类型 1 - 停止线 2 - 斑马线 3 - 禁停区 4 - 直行箭头 5 - 左转箭头 6 - 右转箭头 7 - 直行+左转 8 - 直行+右转 9 - 直行+左转+右转 10 - 掉头 11 - 左掉头 12 - 菱形(前方有人行横道) 13 - 倒三角 (减速让行) 14 - 地面文字
"""
  __slots__ = ['header','sensor_id','error_code','sensor_status','change_origin_flag','is_valid','sensor_calibrator','camera_laneline','hpp','road_marks']
  _slot_types = ['std_msgs/Header','int32','int8','uint8','int32','bool','ros_interface/SensorCalibrator','ros_interface/LaneLine[]','ros_interface/HolisticPathPrediction','ros_interface/RoadMark[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sensor_id,error_code,sensor_status,change_origin_flag,is_valid,sensor_calibrator,camera_laneline,hpp,road_marks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.error_code is None:
        self.error_code = 0
      if self.sensor_status is None:
        self.sensor_status = 0
      if self.change_origin_flag is None:
        self.change_origin_flag = 0
      if self.is_valid is None:
        self.is_valid = False
      if self.sensor_calibrator is None:
        self.sensor_calibrator = ros_interface.msg.SensorCalibrator()
      if self.camera_laneline is None:
        self.camera_laneline = []
      if self.hpp is None:
        self.hpp = ros_interface.msg.HolisticPathPrediction()
      if self.road_marks is None:
        self.road_marks = []
    else:
      self.header = std_msgs.msg.Header()
      self.sensor_id = 0
      self.error_code = 0
      self.sensor_status = 0
      self.change_origin_flag = 0
      self.is_valid = False
      self.sensor_calibrator = ros_interface.msg.SensorCalibrator()
      self.camera_laneline = []
      self.hpp = ros_interface.msg.HolisticPathPrediction()
      self.road_marks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ibBiB6d().pack(_x.sensor_id, _x.error_code, _x.sensor_status, _x.change_origin_flag, _x.is_valid, _x.sensor_calibrator.pose.x, _x.sensor_calibrator.pose.y, _x.sensor_calibrator.pose.z, _x.sensor_calibrator.angle.x, _x.sensor_calibrator.angle.y, _x.sensor_calibrator.angle.z))
      length = len(self.camera_laneline)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_laneline:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.lane_type, _x.lane_color, _x.pos_type))
        _v1 = val1.curve_vehicle
        _x = _v1
        buff.write(_get_struct_6d().pack(_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d))
        _v2 = val1.curve_image
        _x = _v2
        buff.write(_get_struct_6d().pack(_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d))
        _v3 = val1.curve_abs
        _x = _v3
        buff.write(_get_struct_6d().pack(_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d))
        length = len(val1.pts_vehicle)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_vehicle:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.pts_image)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_image:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
        length = len(val1.pts_abs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_abs:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.image_end_point
        _v5 = _v4.start
        _x = _v5
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v6 = _v4.end
        _x = _v6
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        length = len(val1.pts_key)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_key:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_Bd2i().pack(_x.hd_lane_id, _x.confidence, _x.lane_quality, _x.fused_lane_type))
        length = len(val1.homography_mat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.homography_mat))
        length = len(val1.homography_mat_inv)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.homography_mat_inv))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.lane_coordinate_type, _x.use_type))
        _v7 = val1.create_time
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
      _x = self
      buff.write(_get_struct_6di2d().pack(_x.hpp.hpp.start_x, _x.hpp.hpp.end_x, _x.hpp.hpp.a, _x.hpp.hpp.b, _x.hpp.hpp.c, _x.hpp.hpp.d, _x.hpp.planning_source, _x.hpp.ego_lane_width, _x.hpp.confidence))
      length = len(self.road_marks)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_marks:
        _x = val1
        buff.write(_get_struct_6di().pack(_x.longitude_dist, _x.lateral_dist, _x.x, _x.y, _x.z, _x.confidence, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_calibrator is None:
        self.sensor_calibrator = ros_interface.msg.SensorCalibrator()
      if self.camera_laneline is None:
        self.camera_laneline = None
      if self.hpp is None:
        self.hpp = ros_interface.msg.HolisticPathPrediction()
      if self.road_marks is None:
        self.road_marks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 59
      (_x.sensor_id, _x.error_code, _x.sensor_status, _x.change_origin_flag, _x.is_valid, _x.sensor_calibrator.pose.x, _x.sensor_calibrator.pose.y, _x.sensor_calibrator.pose.z, _x.sensor_calibrator.angle.x, _x.sensor_calibrator.angle.y, _x.sensor_calibrator.angle.z,) = _get_struct_ibBiB6d().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_laneline = []
      for i in range(0, length):
        val1 = ros_interface.msg.LaneLine()
        _x = val1
        start = end
        end += 12
        (_x.lane_type, _x.lane_color, _x.pos_type,) = _get_struct_3i().unpack(str[start:end])
        _v8 = val1.curve_vehicle
        _x = _v8
        start = end
        end += 48
        (_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d,) = _get_struct_6d().unpack(str[start:end])
        _v9 = val1.curve_image
        _x = _v9
        start = end
        end += 48
        (_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d,) = _get_struct_6d().unpack(str[start:end])
        _v10 = val1.curve_abs
        _x = _v10
        start = end
        end += 48
        (_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d,) = _get_struct_6d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_vehicle = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.pts_vehicle.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_image = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.pts_image.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_abs = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.pts_abs.append(val2)
        _v11 = val1.image_end_point
        _v12 = _v11.start
        _x = _v12
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v13 = _v11.end
        _x = _v13
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_key = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.pts_key.append(val2)
        _x = val1
        start = end
        end += 17
        (_x.hd_lane_id, _x.confidence, _x.lane_quality, _x.fused_lane_type,) = _get_struct_Bd2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.homography_mat = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.homography_mat_inv = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.lane_coordinate_type, _x.use_type,) = _get_struct_2i().unpack(str[start:end])
        _v14 = val1.create_time
        _x = _v14
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        self.camera_laneline.append(val1)
      _x = self
      start = end
      end += 68
      (_x.hpp.hpp.start_x, _x.hpp.hpp.end_x, _x.hpp.hpp.a, _x.hpp.hpp.b, _x.hpp.hpp.c, _x.hpp.hpp.d, _x.hpp.planning_source, _x.hpp.ego_lane_width, _x.hpp.confidence,) = _get_struct_6di2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_marks = []
      for i in range(0, length):
        val1 = ros_interface.msg.RoadMark()
        _x = val1
        start = end
        end += 52
        (_x.longitude_dist, _x.lateral_dist, _x.x, _x.y, _x.z, _x.confidence, _x.type,) = _get_struct_6di().unpack(str[start:end])
        self.road_marks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ibBiB6d().pack(_x.sensor_id, _x.error_code, _x.sensor_status, _x.change_origin_flag, _x.is_valid, _x.sensor_calibrator.pose.x, _x.sensor_calibrator.pose.y, _x.sensor_calibrator.pose.z, _x.sensor_calibrator.angle.x, _x.sensor_calibrator.angle.y, _x.sensor_calibrator.angle.z))
      length = len(self.camera_laneline)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_laneline:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.lane_type, _x.lane_color, _x.pos_type))
        _v15 = val1.curve_vehicle
        _x = _v15
        buff.write(_get_struct_6d().pack(_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d))
        _v16 = val1.curve_image
        _x = _v16
        buff.write(_get_struct_6d().pack(_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d))
        _v17 = val1.curve_abs
        _x = _v17
        buff.write(_get_struct_6d().pack(_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d))
        length = len(val1.pts_vehicle)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_vehicle:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.pts_image)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_image:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
        length = len(val1.pts_abs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_abs:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = val1.image_end_point
        _v19 = _v18.start
        _x = _v19
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v20 = _v18.end
        _x = _v20
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        length = len(val1.pts_key)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_key:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_Bd2i().pack(_x.hd_lane_id, _x.confidence, _x.lane_quality, _x.fused_lane_type))
        length = len(val1.homography_mat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.homography_mat.tostring())
        length = len(val1.homography_mat_inv)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.homography_mat_inv.tostring())
        _x = val1
        buff.write(_get_struct_2i().pack(_x.lane_coordinate_type, _x.use_type))
        _v21 = val1.create_time
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.sec, _x.nsec))
      _x = self
      buff.write(_get_struct_6di2d().pack(_x.hpp.hpp.start_x, _x.hpp.hpp.end_x, _x.hpp.hpp.a, _x.hpp.hpp.b, _x.hpp.hpp.c, _x.hpp.hpp.d, _x.hpp.planning_source, _x.hpp.ego_lane_width, _x.hpp.confidence))
      length = len(self.road_marks)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_marks:
        _x = val1
        buff.write(_get_struct_6di().pack(_x.longitude_dist, _x.lateral_dist, _x.x, _x.y, _x.z, _x.confidence, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_calibrator is None:
        self.sensor_calibrator = ros_interface.msg.SensorCalibrator()
      if self.camera_laneline is None:
        self.camera_laneline = None
      if self.hpp is None:
        self.hpp = ros_interface.msg.HolisticPathPrediction()
      if self.road_marks is None:
        self.road_marks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 59
      (_x.sensor_id, _x.error_code, _x.sensor_status, _x.change_origin_flag, _x.is_valid, _x.sensor_calibrator.pose.x, _x.sensor_calibrator.pose.y, _x.sensor_calibrator.pose.z, _x.sensor_calibrator.angle.x, _x.sensor_calibrator.angle.y, _x.sensor_calibrator.angle.z,) = _get_struct_ibBiB6d().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_laneline = []
      for i in range(0, length):
        val1 = ros_interface.msg.LaneLine()
        _x = val1
        start = end
        end += 12
        (_x.lane_type, _x.lane_color, _x.pos_type,) = _get_struct_3i().unpack(str[start:end])
        _v22 = val1.curve_vehicle
        _x = _v22
        start = end
        end += 48
        (_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d,) = _get_struct_6d().unpack(str[start:end])
        _v23 = val1.curve_image
        _x = _v23
        start = end
        end += 48
        (_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d,) = _get_struct_6d().unpack(str[start:end])
        _v24 = val1.curve_abs
        _x = _v24
        start = end
        end += 48
        (_x.start_x, _x.end_x, _x.a, _x.b, _x.c, _x.d,) = _get_struct_6d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_vehicle = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.pts_vehicle.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_image = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.pts_image.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_abs = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.pts_abs.append(val2)
        _v25 = val1.image_end_point
        _v26 = _v25.start
        _x = _v26
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v27 = _v25.end
        _x = _v27
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_key = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.pts_key.append(val2)
        _x = val1
        start = end
        end += 17
        (_x.hd_lane_id, _x.confidence, _x.lane_quality, _x.fused_lane_type,) = _get_struct_Bd2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.homography_mat = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.homography_mat_inv = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 8
        (_x.lane_coordinate_type, _x.use_type,) = _get_struct_2i().unpack(str[start:end])
        _v28 = val1.create_time
        _x = _v28
        start = end
        end += 8
        (_x.sec, _x.nsec,) = _get_struct_2I().unpack(str[start:end])
        self.camera_laneline.append(val1)
      _x = self
      start = end
      end += 68
      (_x.hpp.hpp.start_x, _x.hpp.hpp.end_x, _x.hpp.hpp.a, _x.hpp.hpp.b, _x.hpp.hpp.c, _x.hpp.hpp.d, _x.hpp.planning_source, _x.hpp.ego_lane_width, _x.hpp.confidence,) = _get_struct_6di2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_marks = []
      for i in range(0, length):
        val1 = ros_interface.msg.RoadMark()
        _x = val1
        start = end
        end += 52
        (_x.longitude_dist, _x.lateral_dist, _x.x, _x.y, _x.z, _x.confidence, _x.type,) = _get_struct_6di().unpack(str[start:end])
        self.road_marks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_6di = None
def _get_struct_6di():
    global _struct_6di
    if _struct_6di is None:
        _struct_6di = struct.Struct("<6di")
    return _struct_6di
_struct_6di2d = None
def _get_struct_6di2d():
    global _struct_6di2d
    if _struct_6di2d is None:
        _struct_6di2d = struct.Struct("<6di2d")
    return _struct_6di2d
_struct_Bd2i = None
def _get_struct_Bd2i():
    global _struct_Bd2i
    if _struct_Bd2i is None:
        _struct_Bd2i = struct.Struct("<Bd2i")
    return _struct_Bd2i
_struct_ibBiB6d = None
def _get_struct_ibBiB6d():
    global _struct_ibBiB6d
    if _struct_ibBiB6d is None:
        _struct_ibBiB6d = struct.Struct("<ibBiB6d")
    return _struct_ibBiB6d
