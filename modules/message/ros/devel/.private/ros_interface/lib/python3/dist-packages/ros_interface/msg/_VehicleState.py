# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/VehicleState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class VehicleState(genpy.Message):
  _md5sum = "08d2c2b080782b21d4ad592ab6471a80"
  _type = "ros_interface/VehicleState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
float64   x     #  
float64   y     #  
float64   z     #  
float64   timestamp     #  
float64   roll     #  
float64   pitch     #  
float64   yaw     #  
float64   heading     #  
float64   kappa     #  
float64   linear_velocity     #  
float64   angular_velocity     #  
float64   linear_acceleration     #  
int32   gear     #  
int32   driving_mode     #  
Pose   pose     #  
float64   front_steering_value     #  
float64   rear_steering_value     #  

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/Pose
PointENU   position     # Position of the vehicle reference point (VRP) in the map reference frame.   The VRP is the center of rear axle.
Quaternion   orientation     # A quaternion that represents the rotation from the IMU coordinate (Right/Forward/Up) to the world coordinate (East/North/Up).
Point3D   linear_velocity     # Linear velocity of the VRP in the map reference frame.East/north/up in meters per second.
Point3D   linear_acceleration     # Linear acceleration of the VRP in the map reference frame. East/north/up in meters per square second.
Point3D   angular_velocity     # Angular velocity of the vehicle in the map reference frame.Around east/north/up axes in radians per second.
float64   heading     # The heading is zero when the car is facing East and positive when facing North
Point3D   linear_acceleration_vrf     # Linear acceleration of the VRP in the vehicle reference frame.Right/forward/up in meters per square second.
Point3D   angular_velocity_vrf     # Angular velocity of the VRP in the vehicle reference frame. Around right/forward/up axes in radians per second.
Point3D   euler_angles     # // Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.   // in world coordinate (East/North/Up)   // The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.   // The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.   // The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.   // The direction of rotation follows the right-hand rule.

================================================================================
MSG: ros_interface/PointENU
float64   x     # East from the origin, in meters.
float64   y     # North from the origin, in meters.
float64   z     # Up from the WGS-84 ellipsoid, in meters.

================================================================================
MSG: ros_interface/Quaternion
float64   qx     # 四维空间x
float64   qy     # 四维空间y
float64   qz     # 四维空间z
float64   qw     # 四维空间w

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z
"""
  __slots__ = ['header','x','y','z','timestamp','roll','pitch','yaw','heading','kappa','linear_velocity','angular_velocity','linear_acceleration','gear','driving_mode','pose','front_steering_value','rear_steering_value']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','int32','ros_interface/Pose','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,x,y,z,timestamp,roll,pitch,yaw,heading,kappa,linear_velocity,angular_velocity,linear_acceleration,gear,driving_mode,pose,front_steering_value,rear_steering_value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.timestamp is None:
        self.timestamp = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.heading is None:
        self.heading = 0.
      if self.kappa is None:
        self.kappa = 0.
      if self.linear_velocity is None:
        self.linear_velocity = 0.
      if self.angular_velocity is None:
        self.angular_velocity = 0.
      if self.linear_acceleration is None:
        self.linear_acceleration = 0.
      if self.gear is None:
        self.gear = 0
      if self.driving_mode is None:
        self.driving_mode = 0
      if self.pose is None:
        self.pose = ros_interface.msg.Pose()
      if self.front_steering_value is None:
        self.front_steering_value = 0.
      if self.rear_steering_value is None:
        self.rear_steering_value = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.timestamp = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.heading = 0.
      self.kappa = 0.
      self.linear_velocity = 0.
      self.angular_velocity = 0.
      self.linear_acceleration = 0.
      self.gear = 0
      self.driving_mode = 0
      self.pose = ros_interface.msg.Pose()
      self.front_steering_value = 0.
      self.rear_steering_value = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12d2i28d().pack(_x.x, _x.y, _x.z, _x.timestamp, _x.roll, _x.pitch, _x.yaw, _x.heading, _x.kappa, _x.linear_velocity, _x.angular_velocity, _x.linear_acceleration, _x.gear, _x.driving_mode, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.qx, _x.pose.orientation.qy, _x.pose.orientation.qz, _x.pose.orientation.qw, _x.pose.linear_velocity.x, _x.pose.linear_velocity.y, _x.pose.linear_velocity.z, _x.pose.linear_acceleration.x, _x.pose.linear_acceleration.y, _x.pose.linear_acceleration.z, _x.pose.angular_velocity.x, _x.pose.angular_velocity.y, _x.pose.angular_velocity.z, _x.pose.heading, _x.pose.linear_acceleration_vrf.x, _x.pose.linear_acceleration_vrf.y, _x.pose.linear_acceleration_vrf.z, _x.pose.angular_velocity_vrf.x, _x.pose.angular_velocity_vrf.y, _x.pose.angular_velocity_vrf.z, _x.pose.euler_angles.x, _x.pose.euler_angles.y, _x.pose.euler_angles.z, _x.front_steering_value, _x.rear_steering_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = ros_interface.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 328
      (_x.x, _x.y, _x.z, _x.timestamp, _x.roll, _x.pitch, _x.yaw, _x.heading, _x.kappa, _x.linear_velocity, _x.angular_velocity, _x.linear_acceleration, _x.gear, _x.driving_mode, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.qx, _x.pose.orientation.qy, _x.pose.orientation.qz, _x.pose.orientation.qw, _x.pose.linear_velocity.x, _x.pose.linear_velocity.y, _x.pose.linear_velocity.z, _x.pose.linear_acceleration.x, _x.pose.linear_acceleration.y, _x.pose.linear_acceleration.z, _x.pose.angular_velocity.x, _x.pose.angular_velocity.y, _x.pose.angular_velocity.z, _x.pose.heading, _x.pose.linear_acceleration_vrf.x, _x.pose.linear_acceleration_vrf.y, _x.pose.linear_acceleration_vrf.z, _x.pose.angular_velocity_vrf.x, _x.pose.angular_velocity_vrf.y, _x.pose.angular_velocity_vrf.z, _x.pose.euler_angles.x, _x.pose.euler_angles.y, _x.pose.euler_angles.z, _x.front_steering_value, _x.rear_steering_value,) = _get_struct_12d2i28d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12d2i28d().pack(_x.x, _x.y, _x.z, _x.timestamp, _x.roll, _x.pitch, _x.yaw, _x.heading, _x.kappa, _x.linear_velocity, _x.angular_velocity, _x.linear_acceleration, _x.gear, _x.driving_mode, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.qx, _x.pose.orientation.qy, _x.pose.orientation.qz, _x.pose.orientation.qw, _x.pose.linear_velocity.x, _x.pose.linear_velocity.y, _x.pose.linear_velocity.z, _x.pose.linear_acceleration.x, _x.pose.linear_acceleration.y, _x.pose.linear_acceleration.z, _x.pose.angular_velocity.x, _x.pose.angular_velocity.y, _x.pose.angular_velocity.z, _x.pose.heading, _x.pose.linear_acceleration_vrf.x, _x.pose.linear_acceleration_vrf.y, _x.pose.linear_acceleration_vrf.z, _x.pose.angular_velocity_vrf.x, _x.pose.angular_velocity_vrf.y, _x.pose.angular_velocity_vrf.z, _x.pose.euler_angles.x, _x.pose.euler_angles.y, _x.pose.euler_angles.z, _x.front_steering_value, _x.rear_steering_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = ros_interface.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 328
      (_x.x, _x.y, _x.z, _x.timestamp, _x.roll, _x.pitch, _x.yaw, _x.heading, _x.kappa, _x.linear_velocity, _x.angular_velocity, _x.linear_acceleration, _x.gear, _x.driving_mode, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.qx, _x.pose.orientation.qy, _x.pose.orientation.qz, _x.pose.orientation.qw, _x.pose.linear_velocity.x, _x.pose.linear_velocity.y, _x.pose.linear_velocity.z, _x.pose.linear_acceleration.x, _x.pose.linear_acceleration.y, _x.pose.linear_acceleration.z, _x.pose.angular_velocity.x, _x.pose.angular_velocity.y, _x.pose.angular_velocity.z, _x.pose.heading, _x.pose.linear_acceleration_vrf.x, _x.pose.linear_acceleration_vrf.y, _x.pose.linear_acceleration_vrf.z, _x.pose.angular_velocity_vrf.x, _x.pose.angular_velocity_vrf.y, _x.pose.angular_velocity_vrf.z, _x.pose.euler_angles.x, _x.pose.euler_angles.y, _x.pose.euler_angles.z, _x.front_steering_value, _x.rear_steering_value,) = _get_struct_12d2i28d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d2i28d = None
def _get_struct_12d2i28d():
    global _struct_12d2i28d
    if _struct_12d2i28d is None:
        _struct_12d2i28d = struct.Struct("<12d2i28d")
    return _struct_12d2i28d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
