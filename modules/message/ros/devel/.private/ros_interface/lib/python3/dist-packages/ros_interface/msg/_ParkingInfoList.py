# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/ParkingInfoList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class ParkingInfoList(genpy.Message):
  _md5sum = "9d25f84ed55f89eeeaac5e9769b9c663"
  _type = "ros_interface/ParkingInfoList"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # 消息头
ParkingInfo[] parking_info # 检测出的停车位数组
int32   error_code     # 错误码（default = OK）
bool   is_valid     # 车位数据是否合法
bool   parking_out_enable     # 是否能泊出
int32   parking_out_direction     # 泊出方向
int32   parking_out_id     # 当前自车所在车位ID

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/ParkingInfo
Header   header     # timestamp is included in header
int32   parking_space_id     # 停车位id
int32   parking_type     # PARKING_TYPE=0//无效泊车 PARKING_TYPE=1//水平泊车 PARKING_TYPE=2//垂直泊车 PARKING_TYPE=3//倾斜泊车
int32   parking_status     # PARKING_ENABLE=0//可泊 PARKING_DISENABLE=1//不可泊 PARKING_NONOPTIONAL=2//不可选
float64   confidence     # 车位置信度
Point3D   center_point_of_parking     # 世界坐标系下停车位中心点
float64   theta     # 世界坐标系下的夹角（单位rad），车位出口与正东方向夹角
float64   width     # 停车位宽（单位m）
float64   length     # 停车位长单位m）
float64   yaw_offset     # 停车位角度偏移量（倾斜车位），倾斜车位与道路边线夹角,(单位m）
Polygon3D   polygon     # 世界坐标系下的车位多边形
int32   sensor_id     # 车位数据来自相机id 0-front_center相机 1-front_left相机 2-front_right相机 3-left_front相机 4-left_back右后相机 5-right_front相机 6-right_back相机 7-back相机 8-相机融合
bool   is_lane_width_valid     # 车道宽度是否有效
float64   lane_width     # 泊车可用(双)车道宽度
ParkingStopper[] parking_stoppers # 车位内部的限位器数组
int32   parking_direction_type     #   DIR_INVALID = 0,   LEFT = 1,   UP = 2,   RIGHT = 3,   DOWN = 4,
int32   left_occupied_status     # 0-unknown 未知，1-empty 空闲，2-occupied 被占用
int32   right_occupied_status     # 0-unknown 未知，1-empty 空闲，2-occupied 被占用
int32   parking_source_type     # 0-线车位， 1-空间车位， 2-融合车位

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/Polygon3D
int32   coordinate_system     # 坐标系
Point3D[] points # 三维点集

================================================================================
MSG: ros_interface/ParkingStopper
Header   header     # timestamp is  included in header
Point3D   center_point_vehicle     # 车辆坐标系下限位器中心点坐标
Point3D   center_point_abs     # 绝对坐标系下限位器中心点坐标
Point3D[] stopper_points_vehicle # 车辆坐标系下限位器关键点
Point3D[] stopper_points_abs # 绝对坐标系下限位器关键点
"""
  __slots__ = ['header','parking_info','error_code','is_valid','parking_out_enable','parking_out_direction','parking_out_id']
  _slot_types = ['std_msgs/Header','ros_interface/ParkingInfo[]','int32','bool','bool','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,parking_info,error_code,is_valid,parking_out_enable,parking_out_direction,parking_out_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParkingInfoList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parking_info is None:
        self.parking_info = []
      if self.error_code is None:
        self.error_code = 0
      if self.is_valid is None:
        self.is_valid = False
      if self.parking_out_enable is None:
        self.parking_out_enable = False
      if self.parking_out_direction is None:
        self.parking_out_direction = 0
      if self.parking_out_id is None:
        self.parking_out_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.parking_info = []
      self.error_code = 0
      self.is_valid = False
      self.parking_out_enable = False
      self.parking_out_direction = 0
      self.parking_out_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.parking_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_info:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3id().pack(_x.parking_space_id, _x.parking_type, _x.parking_status, _x.confidence))
        _v3 = val1.center_point_of_parking
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.theta, _x.width, _x.length, _x.yaw_offset))
        _v4 = val1.polygon
        _x = _v4.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(_v4.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v4.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_iBd().pack(_x.sensor_id, _x.is_lane_width_valid, _x.lane_width))
        length = len(val1.parking_stoppers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.parking_stoppers:
          _v5 = val2.header
          _x = _v5.seq
          buff.write(_get_struct_I().pack(_x))
          _v6 = _v5.stamp
          _x = _v6
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v5.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v7 = val2.center_point_vehicle
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v8 = val2.center_point_abs
          _x = _v8
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val2.stopper_points_vehicle)
          buff.write(_struct_I.pack(length))
          for val3 in val2.stopper_points_vehicle:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val2.stopper_points_abs)
          buff.write(_struct_I.pack(length))
          for val3 in val2.stopper_points_abs:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_4i().pack(_x.parking_direction_type, _x.left_occupied_status, _x.right_occupied_status, _x.parking_source_type))
      _x = self
      buff.write(_get_struct_i2B2i().pack(_x.error_code, _x.is_valid, _x.parking_out_enable, _x.parking_out_direction, _x.parking_out_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parking_info is None:
        self.parking_info = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_info = []
      for i in range(0, length):
        val1 = ros_interface.msg.ParkingInfo()
        _v9 = val1.header
        start = end
        end += 4
        (_v9.seq,) = _get_struct_I().unpack(str[start:end])
        _v10 = _v9.stamp
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v9.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v9.frame_id = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.parking_space_id, _x.parking_type, _x.parking_status, _x.confidence,) = _get_struct_3id().unpack(str[start:end])
        _v11 = val1.center_point_of_parking
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.theta, _x.width, _x.length, _x.yaw_offset,) = _get_struct_4d().unpack(str[start:end])
        _v12 = val1.polygon
        start = end
        end += 4
        (_v12.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v12.points = []
        for i in range(0, length):
          val3 = ros_interface.msg.Point3D()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v12.points.append(val3)
        _x = val1
        start = end
        end += 13
        (_x.sensor_id, _x.is_lane_width_valid, _x.lane_width,) = _get_struct_iBd().unpack(str[start:end])
        val1.is_lane_width_valid = bool(val1.is_lane_width_valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.parking_stoppers = []
        for i in range(0, length):
          val2 = ros_interface.msg.ParkingStopper()
          _v13 = val2.header
          start = end
          end += 4
          (_v13.seq,) = _get_struct_I().unpack(str[start:end])
          _v14 = _v13.stamp
          _x = _v14
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v13.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v13.frame_id = str[start:end]
          _v15 = val2.center_point_vehicle
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v16 = val2.center_point_abs
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.stopper_points_vehicle = []
          for i in range(0, length):
            val3 = ros_interface.msg.Point3D()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.stopper_points_vehicle.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.stopper_points_abs = []
          for i in range(0, length):
            val3 = ros_interface.msg.Point3D()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.stopper_points_abs.append(val3)
          val1.parking_stoppers.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.parking_direction_type, _x.left_occupied_status, _x.right_occupied_status, _x.parking_source_type,) = _get_struct_4i().unpack(str[start:end])
        self.parking_info.append(val1)
      _x = self
      start = end
      end += 14
      (_x.error_code, _x.is_valid, _x.parking_out_enable, _x.parking_out_direction, _x.parking_out_id,) = _get_struct_i2B2i().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      self.parking_out_enable = bool(self.parking_out_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.parking_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_info:
        _v17 = val1.header
        _x = _v17.seq
        buff.write(_get_struct_I().pack(_x))
        _v18 = _v17.stamp
        _x = _v18
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v17.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3id().pack(_x.parking_space_id, _x.parking_type, _x.parking_status, _x.confidence))
        _v19 = val1.center_point_of_parking
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.theta, _x.width, _x.length, _x.yaw_offset))
        _v20 = val1.polygon
        _x = _v20.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(_v20.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v20.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_iBd().pack(_x.sensor_id, _x.is_lane_width_valid, _x.lane_width))
        length = len(val1.parking_stoppers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.parking_stoppers:
          _v21 = val2.header
          _x = _v21.seq
          buff.write(_get_struct_I().pack(_x))
          _v22 = _v21.stamp
          _x = _v22
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v21.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v23 = val2.center_point_vehicle
          _x = _v23
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v24 = val2.center_point_abs
          _x = _v24
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val2.stopper_points_vehicle)
          buff.write(_struct_I.pack(length))
          for val3 in val2.stopper_points_vehicle:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val2.stopper_points_abs)
          buff.write(_struct_I.pack(length))
          for val3 in val2.stopper_points_abs:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_4i().pack(_x.parking_direction_type, _x.left_occupied_status, _x.right_occupied_status, _x.parking_source_type))
      _x = self
      buff.write(_get_struct_i2B2i().pack(_x.error_code, _x.is_valid, _x.parking_out_enable, _x.parking_out_direction, _x.parking_out_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parking_info is None:
        self.parking_info = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_info = []
      for i in range(0, length):
        val1 = ros_interface.msg.ParkingInfo()
        _v25 = val1.header
        start = end
        end += 4
        (_v25.seq,) = _get_struct_I().unpack(str[start:end])
        _v26 = _v25.stamp
        _x = _v26
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v25.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v25.frame_id = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.parking_space_id, _x.parking_type, _x.parking_status, _x.confidence,) = _get_struct_3id().unpack(str[start:end])
        _v27 = val1.center_point_of_parking
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.theta, _x.width, _x.length, _x.yaw_offset,) = _get_struct_4d().unpack(str[start:end])
        _v28 = val1.polygon
        start = end
        end += 4
        (_v28.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v28.points = []
        for i in range(0, length):
          val3 = ros_interface.msg.Point3D()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v28.points.append(val3)
        _x = val1
        start = end
        end += 13
        (_x.sensor_id, _x.is_lane_width_valid, _x.lane_width,) = _get_struct_iBd().unpack(str[start:end])
        val1.is_lane_width_valid = bool(val1.is_lane_width_valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.parking_stoppers = []
        for i in range(0, length):
          val2 = ros_interface.msg.ParkingStopper()
          _v29 = val2.header
          start = end
          end += 4
          (_v29.seq,) = _get_struct_I().unpack(str[start:end])
          _v30 = _v29.stamp
          _x = _v30
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v29.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v29.frame_id = str[start:end]
          _v31 = val2.center_point_vehicle
          _x = _v31
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v32 = val2.center_point_abs
          _x = _v32
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.stopper_points_vehicle = []
          for i in range(0, length):
            val3 = ros_interface.msg.Point3D()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.stopper_points_vehicle.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.stopper_points_abs = []
          for i in range(0, length):
            val3 = ros_interface.msg.Point3D()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.stopper_points_abs.append(val3)
          val1.parking_stoppers.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.parking_direction_type, _x.left_occupied_status, _x.right_occupied_status, _x.parking_source_type,) = _get_struct_4i().unpack(str[start:end])
        self.parking_info.append(val1)
      _x = self
      start = end
      end += 14
      (_x.error_code, _x.is_valid, _x.parking_out_enable, _x.parking_out_direction, _x.parking_out_id,) = _get_struct_i2B2i().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      self.parking_out_enable = bool(self.parking_out_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3id = None
def _get_struct_3id():
    global _struct_3id
    if _struct_3id is None:
        _struct_3id = struct.Struct("<3id")
    return _struct_3id
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2B2i = None
def _get_struct_i2B2i():
    global _struct_i2B2i
    if _struct_i2B2i is None:
        _struct_i2B2i = struct.Struct("<i2B2i")
    return _struct_i2B2i
_struct_iBd = None
def _get_struct_iBd():
    global _struct_iBd
    if _struct_iBd is None:
        _struct_iBd = struct.Struct("<iBd")
    return _struct_iBd
