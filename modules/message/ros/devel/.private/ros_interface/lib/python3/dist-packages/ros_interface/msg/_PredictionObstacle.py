# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/PredictionObstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class PredictionObstacle(genpy.Message):
  _md5sum = "57b9e49b9055de569a665462768dbd6a"
  _type = "ros_interface/PredictionObstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """PerceptionObstacle   perception_obstacle     # perception info of obstacle
float64   timestamp     # GPS time in seconds
float64   predicted_period     # the length of the time for this prediction (e.g. 10s)
TrajectoryInPrediction[] trajectory # can have multiple trajectories per obstacle
ObstacleIntent   intent     # 估计障碍物的意图        0-UNKNOWN, 1-STOP, 2-STATIONARY, 3-移动 MOVING, 4-HANGE_LANE, 5-LOW_ACCELERATION, 6-HIGH_ACCELERATION, 7-LOW_DECELERATION, 8-HIGH_DECELERATION, 
ObstaclePriority   priority     # 障碍物优先级               1-CAUTION, 2-NORMAL, 3-IGNORE
ObstacleInteractiveTag   interactive_tag     #  
bool   is_static     # is obstacle static (default = false)

================================================================================
MSG: ros_interface/PerceptionObstacle
int32   id     #  
Point3D   position     #  
float64   theta     #  
Point3D   velocity     #  
float64   length     #  
float64   width     #  
float64   height     #  
Point3D[] polygon_point #  
float64   tracking_time     #  
int32   type     # 障碍物类型： 0-Unknown 1-Unknown_movable 2-Unknown_unmovable 3-Pedestrian 4-Bicycle   5-Vehicle
int32   lane_position     # 车道线位置 -2-NEXT_LEFT_LANE -1-LEFT_LANE 0-EGO_LANE 1-RIGHT_LANE 2-NEXT_RIGHT_LANE 3-OTHERS 4-UNKNOWN
float64   confidence     #  
float64   timestamp     #  
uint8   confidence_type     # 置信度类型                  0-CONFIDENCE_UNKNOWN, 1-CONFIDENCE_CN, 2-CONFIDENCE_RAD
Point3D   drops     #  
Point3D   acceleration     #  
Point3D   anchor_point     #  
Point3D[] bounding_box #  
int32   sub_type     #  
float64   height_above_ground     #  
float64[] position_covariance #  
float64[] velocity_covariance #  
float64[] acceleration_covariance #  
uint8   light_status     #  

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/TrajectoryInPrediction
float64   probability     # probability of this trajectory
TrajectoryPoint[] trajectory_points #  

================================================================================
MSG: ros_interface/TrajectoryPoint
PathPoint   path_point     # path point
float64   v     # linear velocity
float64   a     # linear acceleration
float64   relative_time     # relative time from beginning of the trajectory
float64   da     # longitudinal jerk
bool   is_steer_valid     # 转向是否有效
float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis
float64   rear_steer     # 后轮转角
int32   gear     # 档位

================================================================================
MSG: ros_interface/PathPoint
float64   x     # coordinates x
float64   y     # coordinates y
float64   z     # coordinates z
float64   theta     # direction on the x-y plane
float64   kappa     # curvature on the x-y planning
float64   s     # accumulated distance from beginning of the path
float64   dkappa     # derivative of kappa w.r.t s.
float64   ddkappa     # derivative of derivative of kappa w.r.t s.
float64   lane_id     # The lane ID where the path point is on
float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline
float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline

================================================================================
MSG: ros_interface/ObstacleIntent
int32   type     # 估计障碍物的意图        0-UNKNOWN, 1-STOP, 2-STATIONARY, 3-移动 MOVING, 4-HANGE_LANE, 5-LOW_ACCELERATION, 6-HIGH_ACCELERATION, 7-LOW_DECELERATION, 8-HIGH_DECELERATION, 

================================================================================
MSG: ros_interface/ObstaclePriority
int32   priority     # CAUTION = 1; NORMAL = 2; IGNORE = 3;

================================================================================
MSG: ros_interface/ObstacleInteractiveTag
int32   interactive_tag     #  
"""
  __slots__ = ['perception_obstacle','timestamp','predicted_period','trajectory','intent','priority','interactive_tag','is_static']
  _slot_types = ['ros_interface/PerceptionObstacle','float64','float64','ros_interface/TrajectoryInPrediction[]','ros_interface/ObstacleIntent','ros_interface/ObstaclePriority','ros_interface/ObstacleInteractiveTag','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       perception_obstacle,timestamp,predicted_period,trajectory,intent,priority,interactive_tag,is_static

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PredictionObstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.perception_obstacle is None:
        self.perception_obstacle = ros_interface.msg.PerceptionObstacle()
      if self.timestamp is None:
        self.timestamp = 0.
      if self.predicted_period is None:
        self.predicted_period = 0.
      if self.trajectory is None:
        self.trajectory = []
      if self.intent is None:
        self.intent = ros_interface.msg.ObstacleIntent()
      if self.priority is None:
        self.priority = ros_interface.msg.ObstaclePriority()
      if self.interactive_tag is None:
        self.interactive_tag = ros_interface.msg.ObstacleInteractiveTag()
      if self.is_static is None:
        self.is_static = False
    else:
      self.perception_obstacle = ros_interface.msg.PerceptionObstacle()
      self.timestamp = 0.
      self.predicted_period = 0.
      self.trajectory = []
      self.intent = ros_interface.msg.ObstacleIntent()
      self.priority = ros_interface.msg.ObstaclePriority()
      self.interactive_tag = ros_interface.msg.ObstacleInteractiveTag()
      self.is_static = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i10d().pack(_x.perception_obstacle.id, _x.perception_obstacle.position.x, _x.perception_obstacle.position.y, _x.perception_obstacle.position.z, _x.perception_obstacle.theta, _x.perception_obstacle.velocity.x, _x.perception_obstacle.velocity.y, _x.perception_obstacle.velocity.z, _x.perception_obstacle.length, _x.perception_obstacle.width, _x.perception_obstacle.height))
      length = len(self.perception_obstacle.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.perception_obstacle.polygon_point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_d2i2dB9d().pack(_x.perception_obstacle.tracking_time, _x.perception_obstacle.type, _x.perception_obstacle.lane_position, _x.perception_obstacle.confidence, _x.perception_obstacle.timestamp, _x.perception_obstacle.confidence_type, _x.perception_obstacle.drops.x, _x.perception_obstacle.drops.y, _x.perception_obstacle.drops.z, _x.perception_obstacle.acceleration.x, _x.perception_obstacle.acceleration.y, _x.perception_obstacle.acceleration.z, _x.perception_obstacle.anchor_point.x, _x.perception_obstacle.anchor_point.y, _x.perception_obstacle.anchor_point.z))
      length = len(self.perception_obstacle.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.perception_obstacle.bounding_box:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_id().pack(_x.perception_obstacle.sub_type, _x.perception_obstacle.height_above_ground))
      length = len(self.perception_obstacle.position_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.perception_obstacle.position_covariance))
      length = len(self.perception_obstacle.velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.perception_obstacle.velocity_covariance))
      length = len(self.perception_obstacle.acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.perception_obstacle.acceleration_covariance))
      _x = self
      buff.write(_get_struct_B2d().pack(_x.perception_obstacle.light_status, _x.timestamp, _x.predicted_period))
      length = len(self.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory:
        _x = val1.probability
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_points:
          _v1 = val2.path_point
          _x = _v1
          buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
          _x = val2
          buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self
      buff.write(_get_struct_3iB().pack(_x.intent.type, _x.priority.priority, _x.interactive_tag.interactive_tag, _x.is_static))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.perception_obstacle is None:
        self.perception_obstacle = ros_interface.msg.PerceptionObstacle()
      if self.trajectory is None:
        self.trajectory = None
      if self.intent is None:
        self.intent = ros_interface.msg.ObstacleIntent()
      if self.priority is None:
        self.priority = ros_interface.msg.ObstaclePriority()
      if self.interactive_tag is None:
        self.interactive_tag = ros_interface.msg.ObstacleInteractiveTag()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.perception_obstacle.id, _x.perception_obstacle.position.x, _x.perception_obstacle.position.y, _x.perception_obstacle.position.z, _x.perception_obstacle.theta, _x.perception_obstacle.velocity.x, _x.perception_obstacle.velocity.y, _x.perception_obstacle.velocity.z, _x.perception_obstacle.length, _x.perception_obstacle.width, _x.perception_obstacle.height,) = _get_struct_i10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.perception_obstacle.polygon_point = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.perception_obstacle.polygon_point.append(val1)
      _x = self
      start = end
      end += 105
      (_x.perception_obstacle.tracking_time, _x.perception_obstacle.type, _x.perception_obstacle.lane_position, _x.perception_obstacle.confidence, _x.perception_obstacle.timestamp, _x.perception_obstacle.confidence_type, _x.perception_obstacle.drops.x, _x.perception_obstacle.drops.y, _x.perception_obstacle.drops.z, _x.perception_obstacle.acceleration.x, _x.perception_obstacle.acceleration.y, _x.perception_obstacle.acceleration.z, _x.perception_obstacle.anchor_point.x, _x.perception_obstacle.anchor_point.y, _x.perception_obstacle.anchor_point.z,) = _get_struct_d2i2dB9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.perception_obstacle.bounding_box = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.perception_obstacle.bounding_box.append(val1)
      _x = self
      start = end
      end += 12
      (_x.perception_obstacle.sub_type, _x.perception_obstacle.height_above_ground,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.perception_obstacle.position_covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.perception_obstacle.velocity_covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.perception_obstacle.acceleration_covariance = s.unpack(str[start:end])
      _x = self
      start = end
      end += 17
      (_x.perception_obstacle.light_status, _x.timestamp, _x.predicted_period,) = _get_struct_B2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryInPrediction()
        start = end
        end += 8
        (val1.probability,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryPoint()
          _v2 = val2.path_point
          _x = _v2
          start = end
          end += 88
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
          _x = val2
          start = end
          end += 53
          (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
          val2.is_steer_valid = bool(val2.is_steer_valid)
          val1.trajectory_points.append(val2)
        self.trajectory.append(val1)
      _x = self
      start = end
      end += 13
      (_x.intent.type, _x.priority.priority, _x.interactive_tag.interactive_tag, _x.is_static,) = _get_struct_3iB().unpack(str[start:end])
      self.is_static = bool(self.is_static)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i10d().pack(_x.perception_obstacle.id, _x.perception_obstacle.position.x, _x.perception_obstacle.position.y, _x.perception_obstacle.position.z, _x.perception_obstacle.theta, _x.perception_obstacle.velocity.x, _x.perception_obstacle.velocity.y, _x.perception_obstacle.velocity.z, _x.perception_obstacle.length, _x.perception_obstacle.width, _x.perception_obstacle.height))
      length = len(self.perception_obstacle.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.perception_obstacle.polygon_point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_d2i2dB9d().pack(_x.perception_obstacle.tracking_time, _x.perception_obstacle.type, _x.perception_obstacle.lane_position, _x.perception_obstacle.confidence, _x.perception_obstacle.timestamp, _x.perception_obstacle.confidence_type, _x.perception_obstacle.drops.x, _x.perception_obstacle.drops.y, _x.perception_obstacle.drops.z, _x.perception_obstacle.acceleration.x, _x.perception_obstacle.acceleration.y, _x.perception_obstacle.acceleration.z, _x.perception_obstacle.anchor_point.x, _x.perception_obstacle.anchor_point.y, _x.perception_obstacle.anchor_point.z))
      length = len(self.perception_obstacle.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.perception_obstacle.bounding_box:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_id().pack(_x.perception_obstacle.sub_type, _x.perception_obstacle.height_above_ground))
      length = len(self.perception_obstacle.position_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.perception_obstacle.position_covariance.tostring())
      length = len(self.perception_obstacle.velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.perception_obstacle.velocity_covariance.tostring())
      length = len(self.perception_obstacle.acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.perception_obstacle.acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_B2d().pack(_x.perception_obstacle.light_status, _x.timestamp, _x.predicted_period))
      length = len(self.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory:
        _x = val1.probability
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_points:
          _v3 = val2.path_point
          _x = _v3
          buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
          _x = val2
          buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self
      buff.write(_get_struct_3iB().pack(_x.intent.type, _x.priority.priority, _x.interactive_tag.interactive_tag, _x.is_static))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.perception_obstacle is None:
        self.perception_obstacle = ros_interface.msg.PerceptionObstacle()
      if self.trajectory is None:
        self.trajectory = None
      if self.intent is None:
        self.intent = ros_interface.msg.ObstacleIntent()
      if self.priority is None:
        self.priority = ros_interface.msg.ObstaclePriority()
      if self.interactive_tag is None:
        self.interactive_tag = ros_interface.msg.ObstacleInteractiveTag()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.perception_obstacle.id, _x.perception_obstacle.position.x, _x.perception_obstacle.position.y, _x.perception_obstacle.position.z, _x.perception_obstacle.theta, _x.perception_obstacle.velocity.x, _x.perception_obstacle.velocity.y, _x.perception_obstacle.velocity.z, _x.perception_obstacle.length, _x.perception_obstacle.width, _x.perception_obstacle.height,) = _get_struct_i10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.perception_obstacle.polygon_point = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.perception_obstacle.polygon_point.append(val1)
      _x = self
      start = end
      end += 105
      (_x.perception_obstacle.tracking_time, _x.perception_obstacle.type, _x.perception_obstacle.lane_position, _x.perception_obstacle.confidence, _x.perception_obstacle.timestamp, _x.perception_obstacle.confidence_type, _x.perception_obstacle.drops.x, _x.perception_obstacle.drops.y, _x.perception_obstacle.drops.z, _x.perception_obstacle.acceleration.x, _x.perception_obstacle.acceleration.y, _x.perception_obstacle.acceleration.z, _x.perception_obstacle.anchor_point.x, _x.perception_obstacle.anchor_point.y, _x.perception_obstacle.anchor_point.z,) = _get_struct_d2i2dB9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.perception_obstacle.bounding_box = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.perception_obstacle.bounding_box.append(val1)
      _x = self
      start = end
      end += 12
      (_x.perception_obstacle.sub_type, _x.perception_obstacle.height_above_ground,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.perception_obstacle.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.perception_obstacle.velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.perception_obstacle.acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 17
      (_x.perception_obstacle.light_status, _x.timestamp, _x.predicted_period,) = _get_struct_B2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryInPrediction()
        start = end
        end += 8
        (val1.probability,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryPoint()
          _v4 = val2.path_point
          _x = _v4
          start = end
          end += 88
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
          _x = val2
          start = end
          end += 53
          (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
          val2.is_steer_valid = bool(val2.is_steer_valid)
          val1.trajectory_points.append(val2)
        self.trajectory.append(val1)
      _x = self
      start = end
      end += 13
      (_x.intent.type, _x.priority.priority, _x.interactive_tag.interactive_tag, _x.is_static,) = _get_struct_3iB().unpack(str[start:end])
      self.is_static = bool(self.is_static)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3iB = None
def _get_struct_3iB():
    global _struct_3iB
    if _struct_3iB is None:
        _struct_3iB = struct.Struct("<3iB")
    return _struct_3iB
_struct_4dB2di = None
def _get_struct_4dB2di():
    global _struct_4dB2di
    if _struct_4dB2di is None:
        _struct_4dB2di = struct.Struct("<4dB2di")
    return _struct_4dB2di
_struct_B2d = None
def _get_struct_B2d():
    global _struct_B2d
    if _struct_B2d is None:
        _struct_B2d = struct.Struct("<B2d")
    return _struct_B2d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d2i2dB9d = None
def _get_struct_d2i2dB9d():
    global _struct_d2i2dB9d
    if _struct_d2i2dB9d is None:
        _struct_d2i2dB9d = struct.Struct("<d2i2dB9d")
    return _struct_d2i2dB9d
_struct_i10d = None
def _get_struct_i10d():
    global _struct_i10d
    if _struct_i10d is None:
        _struct_i10d = struct.Struct("<i10d")
    return _struct_i10d
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
