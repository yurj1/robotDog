# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/WheelInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class WheelInfo(genpy.Message):
  _md5sum = "89a45d7281d30b62ae7cbb5f0d17e21a"
  _type = "ros_interface/WheelInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
int32   moving_status     # 0=UNKNOWN_VEHICLE_STATE  1=STATIONARY  2=MOVING_FORWARD  3=MOVING_BACKWARD
int32   steer_driving_mode     # 0=COMPLETE_MANUAL  1=COMPLETE_AUTO_DRIVE  4=EMERGENCY_MODE
float64   steering_value     # Real steering location
float64   steering_torque_nm     # Applied steering torque in [Nm]
float64   steering_rate_dps     # degree/s
float64   speed_mps     # Vehicle Speed in meters per second
bool   veh_spd_vld     # 车速有效性
int32   gear     # 档位
bool   gear_vld     # 档位有效性
int32   wheel_direction_rr     # 0=FORWARD 1=BACKWARD 2=STANDSTILL 3=INVALID
float64   wheel_spd_rr     # Actual speed of the right rear wheel
int32   wheel_direction_rl     # 0=FORWARD 1=BACKWARD 2=STANDSTILL 3=INVALID
float64   wheel_spd_rl     # Actual speed of the left rear wheel
int32   wheel_direction_fr     # 0=FORWARD 1=BACKWARD 2=STANDSTILL 3=INVALID
float64   wheel_spd_fr     # Actual speed of the right front wheel
int32   wheel_direction_fl     # 0=FORWARD 1=BACKWARD 2=STANDSTILL 3=INVALID
float64   wheel_spd_fl     # Actual speed of the left front wheel
float64   yaw_rate     # Yaw rate[degree/s] [-163.84|163.835]
int32   wss_fl_edges_sum     # 左前轮边缘和
int32   wss_fr_edges_sum     # 右前轮边缘和
int32   wss_rl_edges_sum     # 左后轮边缘和
int32   wss_rr_edges_sum     # 右后轮边缘和
bool   wss_fl_edges_sum_vld     # 左前轮边缘和有效位（0：无效 1：有效）
bool   wss_fr_edges_sum_vld     # 右前轮边缘和有效位（0：无效 1：有效）
bool   wss_rl_edges_sum_vld     # 左后轮边缘和有效位（0：无效 1：有效）
bool   wss_rr_edges_sum_vld     # 右后轮边缘和有效位（0：无效 1：有效）
float64   veh_lat_accel     # 车辆横向加速度
float64   veh_lgt_accel     # 车辆纵向加速度
bool   veh_lat_accel_vld     # 车辆横向加速度有效性
bool   veh_lgt_accel_vld     # 车辆纵向加速度有效性

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','moving_status','steer_driving_mode','steering_value','steering_torque_nm','steering_rate_dps','speed_mps','veh_spd_vld','gear','gear_vld','wheel_direction_rr','wheel_spd_rr','wheel_direction_rl','wheel_spd_rl','wheel_direction_fr','wheel_spd_fr','wheel_direction_fl','wheel_spd_fl','yaw_rate','wss_fl_edges_sum','wss_fr_edges_sum','wss_rl_edges_sum','wss_rr_edges_sum','wss_fl_edges_sum_vld','wss_fr_edges_sum_vld','wss_rl_edges_sum_vld','wss_rr_edges_sum_vld','veh_lat_accel','veh_lgt_accel','veh_lat_accel_vld','veh_lgt_accel_vld']
  _slot_types = ['std_msgs/Header','int32','int32','float64','float64','float64','float64','bool','int32','bool','int32','float64','int32','float64','int32','float64','int32','float64','float64','int32','int32','int32','int32','bool','bool','bool','bool','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,moving_status,steer_driving_mode,steering_value,steering_torque_nm,steering_rate_dps,speed_mps,veh_spd_vld,gear,gear_vld,wheel_direction_rr,wheel_spd_rr,wheel_direction_rl,wheel_spd_rl,wheel_direction_fr,wheel_spd_fr,wheel_direction_fl,wheel_spd_fl,yaw_rate,wss_fl_edges_sum,wss_fr_edges_sum,wss_rl_edges_sum,wss_rr_edges_sum,wss_fl_edges_sum_vld,wss_fr_edges_sum_vld,wss_rl_edges_sum_vld,wss_rr_edges_sum_vld,veh_lat_accel,veh_lgt_accel,veh_lat_accel_vld,veh_lgt_accel_vld

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WheelInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.moving_status is None:
        self.moving_status = 0
      if self.steer_driving_mode is None:
        self.steer_driving_mode = 0
      if self.steering_value is None:
        self.steering_value = 0.
      if self.steering_torque_nm is None:
        self.steering_torque_nm = 0.
      if self.steering_rate_dps is None:
        self.steering_rate_dps = 0.
      if self.speed_mps is None:
        self.speed_mps = 0.
      if self.veh_spd_vld is None:
        self.veh_spd_vld = False
      if self.gear is None:
        self.gear = 0
      if self.gear_vld is None:
        self.gear_vld = False
      if self.wheel_direction_rr is None:
        self.wheel_direction_rr = 0
      if self.wheel_spd_rr is None:
        self.wheel_spd_rr = 0.
      if self.wheel_direction_rl is None:
        self.wheel_direction_rl = 0
      if self.wheel_spd_rl is None:
        self.wheel_spd_rl = 0.
      if self.wheel_direction_fr is None:
        self.wheel_direction_fr = 0
      if self.wheel_spd_fr is None:
        self.wheel_spd_fr = 0.
      if self.wheel_direction_fl is None:
        self.wheel_direction_fl = 0
      if self.wheel_spd_fl is None:
        self.wheel_spd_fl = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
      if self.wss_fl_edges_sum is None:
        self.wss_fl_edges_sum = 0
      if self.wss_fr_edges_sum is None:
        self.wss_fr_edges_sum = 0
      if self.wss_rl_edges_sum is None:
        self.wss_rl_edges_sum = 0
      if self.wss_rr_edges_sum is None:
        self.wss_rr_edges_sum = 0
      if self.wss_fl_edges_sum_vld is None:
        self.wss_fl_edges_sum_vld = False
      if self.wss_fr_edges_sum_vld is None:
        self.wss_fr_edges_sum_vld = False
      if self.wss_rl_edges_sum_vld is None:
        self.wss_rl_edges_sum_vld = False
      if self.wss_rr_edges_sum_vld is None:
        self.wss_rr_edges_sum_vld = False
      if self.veh_lat_accel is None:
        self.veh_lat_accel = 0.
      if self.veh_lgt_accel is None:
        self.veh_lgt_accel = 0.
      if self.veh_lat_accel_vld is None:
        self.veh_lat_accel_vld = False
      if self.veh_lgt_accel_vld is None:
        self.veh_lgt_accel_vld = False
    else:
      self.header = std_msgs.msg.Header()
      self.moving_status = 0
      self.steer_driving_mode = 0
      self.steering_value = 0.
      self.steering_torque_nm = 0.
      self.steering_rate_dps = 0.
      self.speed_mps = 0.
      self.veh_spd_vld = False
      self.gear = 0
      self.gear_vld = False
      self.wheel_direction_rr = 0
      self.wheel_spd_rr = 0.
      self.wheel_direction_rl = 0
      self.wheel_spd_rl = 0.
      self.wheel_direction_fr = 0
      self.wheel_spd_fr = 0.
      self.wheel_direction_fl = 0
      self.wheel_spd_fl = 0.
      self.yaw_rate = 0.
      self.wss_fl_edges_sum = 0
      self.wss_fr_edges_sum = 0
      self.wss_rl_edges_sum = 0
      self.wss_rr_edges_sum = 0
      self.wss_fl_edges_sum_vld = False
      self.wss_fr_edges_sum_vld = False
      self.wss_rl_edges_sum_vld = False
      self.wss_rr_edges_sum_vld = False
      self.veh_lat_accel = 0.
      self.veh_lgt_accel = 0.
      self.veh_lat_accel_vld = False
      self.veh_lgt_accel_vld = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i4dBiBidididi2d4i4B2d2B().pack(_x.moving_status, _x.steer_driving_mode, _x.steering_value, _x.steering_torque_nm, _x.steering_rate_dps, _x.speed_mps, _x.veh_spd_vld, _x.gear, _x.gear_vld, _x.wheel_direction_rr, _x.wheel_spd_rr, _x.wheel_direction_rl, _x.wheel_spd_rl, _x.wheel_direction_fr, _x.wheel_spd_fr, _x.wheel_direction_fl, _x.wheel_spd_fl, _x.yaw_rate, _x.wss_fl_edges_sum, _x.wss_fr_edges_sum, _x.wss_rl_edges_sum, _x.wss_rr_edges_sum, _x.wss_fl_edges_sum_vld, _x.wss_fr_edges_sum_vld, _x.wss_rl_edges_sum_vld, _x.wss_rr_edges_sum_vld, _x.veh_lat_accel, _x.veh_lgt_accel, _x.veh_lat_accel_vld, _x.veh_lgt_accel_vld))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 140
      (_x.moving_status, _x.steer_driving_mode, _x.steering_value, _x.steering_torque_nm, _x.steering_rate_dps, _x.speed_mps, _x.veh_spd_vld, _x.gear, _x.gear_vld, _x.wheel_direction_rr, _x.wheel_spd_rr, _x.wheel_direction_rl, _x.wheel_spd_rl, _x.wheel_direction_fr, _x.wheel_spd_fr, _x.wheel_direction_fl, _x.wheel_spd_fl, _x.yaw_rate, _x.wss_fl_edges_sum, _x.wss_fr_edges_sum, _x.wss_rl_edges_sum, _x.wss_rr_edges_sum, _x.wss_fl_edges_sum_vld, _x.wss_fr_edges_sum_vld, _x.wss_rl_edges_sum_vld, _x.wss_rr_edges_sum_vld, _x.veh_lat_accel, _x.veh_lgt_accel, _x.veh_lat_accel_vld, _x.veh_lgt_accel_vld,) = _get_struct_2i4dBiBidididi2d4i4B2d2B().unpack(str[start:end])
      self.veh_spd_vld = bool(self.veh_spd_vld)
      self.gear_vld = bool(self.gear_vld)
      self.wss_fl_edges_sum_vld = bool(self.wss_fl_edges_sum_vld)
      self.wss_fr_edges_sum_vld = bool(self.wss_fr_edges_sum_vld)
      self.wss_rl_edges_sum_vld = bool(self.wss_rl_edges_sum_vld)
      self.wss_rr_edges_sum_vld = bool(self.wss_rr_edges_sum_vld)
      self.veh_lat_accel_vld = bool(self.veh_lat_accel_vld)
      self.veh_lgt_accel_vld = bool(self.veh_lgt_accel_vld)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i4dBiBidididi2d4i4B2d2B().pack(_x.moving_status, _x.steer_driving_mode, _x.steering_value, _x.steering_torque_nm, _x.steering_rate_dps, _x.speed_mps, _x.veh_spd_vld, _x.gear, _x.gear_vld, _x.wheel_direction_rr, _x.wheel_spd_rr, _x.wheel_direction_rl, _x.wheel_spd_rl, _x.wheel_direction_fr, _x.wheel_spd_fr, _x.wheel_direction_fl, _x.wheel_spd_fl, _x.yaw_rate, _x.wss_fl_edges_sum, _x.wss_fr_edges_sum, _x.wss_rl_edges_sum, _x.wss_rr_edges_sum, _x.wss_fl_edges_sum_vld, _x.wss_fr_edges_sum_vld, _x.wss_rl_edges_sum_vld, _x.wss_rr_edges_sum_vld, _x.veh_lat_accel, _x.veh_lgt_accel, _x.veh_lat_accel_vld, _x.veh_lgt_accel_vld))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 140
      (_x.moving_status, _x.steer_driving_mode, _x.steering_value, _x.steering_torque_nm, _x.steering_rate_dps, _x.speed_mps, _x.veh_spd_vld, _x.gear, _x.gear_vld, _x.wheel_direction_rr, _x.wheel_spd_rr, _x.wheel_direction_rl, _x.wheel_spd_rl, _x.wheel_direction_fr, _x.wheel_spd_fr, _x.wheel_direction_fl, _x.wheel_spd_fl, _x.yaw_rate, _x.wss_fl_edges_sum, _x.wss_fr_edges_sum, _x.wss_rl_edges_sum, _x.wss_rr_edges_sum, _x.wss_fl_edges_sum_vld, _x.wss_fr_edges_sum_vld, _x.wss_rl_edges_sum_vld, _x.wss_rr_edges_sum_vld, _x.veh_lat_accel, _x.veh_lgt_accel, _x.veh_lat_accel_vld, _x.veh_lgt_accel_vld,) = _get_struct_2i4dBiBidididi2d4i4B2d2B().unpack(str[start:end])
      self.veh_spd_vld = bool(self.veh_spd_vld)
      self.gear_vld = bool(self.gear_vld)
      self.wss_fl_edges_sum_vld = bool(self.wss_fl_edges_sum_vld)
      self.wss_fr_edges_sum_vld = bool(self.wss_fr_edges_sum_vld)
      self.wss_rl_edges_sum_vld = bool(self.wss_rl_edges_sum_vld)
      self.wss_rr_edges_sum_vld = bool(self.wss_rr_edges_sum_vld)
      self.veh_lat_accel_vld = bool(self.veh_lat_accel_vld)
      self.veh_lgt_accel_vld = bool(self.veh_lgt_accel_vld)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i4dBiBidididi2d4i4B2d2B = None
def _get_struct_2i4dBiBidididi2d4i4B2d2B():
    global _struct_2i4dBiBidididi2d4i4B2d2B
    if _struct_2i4dBiBidididi2d4i4B2d2B is None:
        _struct_2i4dBiBidididi2d4i4B2d2B = struct.Struct("<2i4dBiBidididi2d4i4B2d2B")
    return _struct_2i4dBiBidididi2d4i4B2d2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
