# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/VehicleMotionPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class VehicleMotionPoint(genpy.Message):
  _md5sum = "817b6833314550b435f029c9809d3a23"
  _type = "ros_interface/VehicleMotionPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """TrajectoryPoint   trajectory_point     # trajectory point
float64   steer     # The angle between vehicle front wheel and vehicle longitudinal axis

================================================================================
MSG: ros_interface/TrajectoryPoint
PathPoint   path_point     # path point
float64   v     # linear velocity
float64   a     # linear acceleration
float64   relative_time     # relative time from beginning of the trajectory
float64   da     # longitudinal jerk
bool   is_steer_valid     # 转向是否有效
float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis
float64   rear_steer     # 后轮转角
int32   gear     # 档位

================================================================================
MSG: ros_interface/PathPoint
float64   x     # coordinates x
float64   y     # coordinates y
float64   z     # coordinates z
float64   theta     # direction on the x-y plane
float64   kappa     # curvature on the x-y planning
float64   s     # accumulated distance from beginning of the path
float64   dkappa     # derivative of kappa w.r.t s.
float64   ddkappa     # derivative of derivative of kappa w.r.t s.
float64   lane_id     # The lane ID where the path point is on
float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline
float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline
"""
  __slots__ = ['trajectory_point','steer']
  _slot_types = ['ros_interface/TrajectoryPoint','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory_point,steer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleMotionPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trajectory_point is None:
        self.trajectory_point = ros_interface.msg.TrajectoryPoint()
      if self.steer is None:
        self.steer = 0.
    else:
      self.trajectory_point = ros_interface.msg.TrajectoryPoint()
      self.steer = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_15dB2did().pack(_x.trajectory_point.path_point.x, _x.trajectory_point.path_point.y, _x.trajectory_point.path_point.z, _x.trajectory_point.path_point.theta, _x.trajectory_point.path_point.kappa, _x.trajectory_point.path_point.s, _x.trajectory_point.path_point.dkappa, _x.trajectory_point.path_point.ddkappa, _x.trajectory_point.path_point.lane_id, _x.trajectory_point.path_point.x_derivative, _x.trajectory_point.path_point.y_derivative, _x.trajectory_point.v, _x.trajectory_point.a, _x.trajectory_point.relative_time, _x.trajectory_point.da, _x.trajectory_point.is_steer_valid, _x.trajectory_point.front_steer, _x.trajectory_point.rear_steer, _x.trajectory_point.gear, _x.steer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_point is None:
        self.trajectory_point = ros_interface.msg.TrajectoryPoint()
      end = 0
      _x = self
      start = end
      end += 149
      (_x.trajectory_point.path_point.x, _x.trajectory_point.path_point.y, _x.trajectory_point.path_point.z, _x.trajectory_point.path_point.theta, _x.trajectory_point.path_point.kappa, _x.trajectory_point.path_point.s, _x.trajectory_point.path_point.dkappa, _x.trajectory_point.path_point.ddkappa, _x.trajectory_point.path_point.lane_id, _x.trajectory_point.path_point.x_derivative, _x.trajectory_point.path_point.y_derivative, _x.trajectory_point.v, _x.trajectory_point.a, _x.trajectory_point.relative_time, _x.trajectory_point.da, _x.trajectory_point.is_steer_valid, _x.trajectory_point.front_steer, _x.trajectory_point.rear_steer, _x.trajectory_point.gear, _x.steer,) = _get_struct_15dB2did().unpack(str[start:end])
      self.trajectory_point.is_steer_valid = bool(self.trajectory_point.is_steer_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_15dB2did().pack(_x.trajectory_point.path_point.x, _x.trajectory_point.path_point.y, _x.trajectory_point.path_point.z, _x.trajectory_point.path_point.theta, _x.trajectory_point.path_point.kappa, _x.trajectory_point.path_point.s, _x.trajectory_point.path_point.dkappa, _x.trajectory_point.path_point.ddkappa, _x.trajectory_point.path_point.lane_id, _x.trajectory_point.path_point.x_derivative, _x.trajectory_point.path_point.y_derivative, _x.trajectory_point.v, _x.trajectory_point.a, _x.trajectory_point.relative_time, _x.trajectory_point.da, _x.trajectory_point.is_steer_valid, _x.trajectory_point.front_steer, _x.trajectory_point.rear_steer, _x.trajectory_point.gear, _x.steer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_point is None:
        self.trajectory_point = ros_interface.msg.TrajectoryPoint()
      end = 0
      _x = self
      start = end
      end += 149
      (_x.trajectory_point.path_point.x, _x.trajectory_point.path_point.y, _x.trajectory_point.path_point.z, _x.trajectory_point.path_point.theta, _x.trajectory_point.path_point.kappa, _x.trajectory_point.path_point.s, _x.trajectory_point.path_point.dkappa, _x.trajectory_point.path_point.ddkappa, _x.trajectory_point.path_point.lane_id, _x.trajectory_point.path_point.x_derivative, _x.trajectory_point.path_point.y_derivative, _x.trajectory_point.v, _x.trajectory_point.a, _x.trajectory_point.relative_time, _x.trajectory_point.da, _x.trajectory_point.is_steer_valid, _x.trajectory_point.front_steer, _x.trajectory_point.rear_steer, _x.trajectory_point.gear, _x.steer,) = _get_struct_15dB2did().unpack(str[start:end])
      self.trajectory_point.is_steer_valid = bool(self.trajectory_point.is_steer_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15dB2did = None
def _get_struct_15dB2did():
    global _struct_15dB2did
    if _struct_15dB2did is None:
        _struct_15dB2did = struct.Struct("<15dB2did")
    return _struct_15dB2did
