# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/StopPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class StopPoint(genpy.Message):
  _md5sum = "0f7f748188c196901f90cc702c2618c4"
  _type = "ros_interface/StopPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Point3D   point     # 点xyz
float64   theta     # 方向（与东方向夹角，逆时针方向为正，单位为弧度）
int8   type     # STOP_TYPE_TERMINAL=0 //目的地终点 STOP_TYPE_JUNCTION=1 //路口停止线
float64   stop_distance     # 距停止点多少米停车

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z
"""
  __slots__ = ['point','theta','type','stop_distance']
  _slot_types = ['ros_interface/Point3D','float64','int8','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point,theta,type,stop_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StopPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.point is None:
        self.point = ros_interface.msg.Point3D()
      if self.theta is None:
        self.theta = 0.
      if self.type is None:
        self.type = 0
      if self.stop_distance is None:
        self.stop_distance = 0.
    else:
      self.point = ros_interface.msg.Point3D()
      self.theta = 0.
      self.type = 0
      self.stop_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4dbd().pack(_x.point.x, _x.point.y, _x.point.z, _x.theta, _x.type, _x.stop_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point is None:
        self.point = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.point.x, _x.point.y, _x.point.z, _x.theta, _x.type, _x.stop_distance,) = _get_struct_4dbd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4dbd().pack(_x.point.x, _x.point.y, _x.point.z, _x.theta, _x.type, _x.stop_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point is None:
        self.point = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.point.x, _x.point.y, _x.point.z, _x.theta, _x.type, _x.stop_distance,) = _get_struct_4dbd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4dbd = None
def _get_struct_4dbd():
    global _struct_4dbd
    if _struct_4dbd is None:
        _struct_4dbd = struct.Struct("<4dbd")
    return _struct_4dbd
