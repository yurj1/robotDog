# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/PerceptionObstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class PerceptionObstacle(genpy.Message):
  _md5sum = "eec97df9ec7b9c83ab21ca50cb74bf7c"
  _type = "ros_interface/PerceptionObstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32   id     #  
Point3D   position     #  
float64   theta     #  
Point3D   velocity     #  
float64   length     #  
float64   width     #  
float64   height     #  
Point3D[] polygon_point #  
float64   tracking_time     #  
int32   type     # 障碍物类型： 0-Unknown 1-Unknown_movable 2-Unknown_unmovable 3-Pedestrian 4-Bicycle   5-Vehicle
int32   lane_position     # 车道线位置 -2-NEXT_LEFT_LANE -1-LEFT_LANE 0-EGO_LANE 1-RIGHT_LANE 2-NEXT_RIGHT_LANE 3-OTHERS 4-UNKNOWN
float64   confidence     #  
float64   timestamp     #  
uint8   confidence_type     # 置信度类型                  0-CONFIDENCE_UNKNOWN, 1-CONFIDENCE_CN, 2-CONFIDENCE_RAD
Point3D   drops     #  
Point3D   acceleration     #  
Point3D   anchor_point     #  
Point3D[] bounding_box #  
int32   sub_type     #  
float64   height_above_ground     #  
float64[] position_covariance #  
float64[] velocity_covariance #  
float64[] acceleration_covariance #  
uint8   light_status     #  

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z
"""
  __slots__ = ['id','position','theta','velocity','length','width','height','polygon_point','tracking_time','type','lane_position','confidence','timestamp','confidence_type','drops','acceleration','anchor_point','bounding_box','sub_type','height_above_ground','position_covariance','velocity_covariance','acceleration_covariance','light_status']
  _slot_types = ['int32','ros_interface/Point3D','float64','ros_interface/Point3D','float64','float64','float64','ros_interface/Point3D[]','float64','int32','int32','float64','float64','uint8','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D[]','int32','float64','float64[]','float64[]','float64[]','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,position,theta,velocity,length,width,height,polygon_point,tracking_time,type,lane_position,confidence,timestamp,confidence_type,drops,acceleration,anchor_point,bounding_box,sub_type,height_above_ground,position_covariance,velocity_covariance,acceleration_covariance,light_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PerceptionObstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.position is None:
        self.position = ros_interface.msg.Point3D()
      if self.theta is None:
        self.theta = 0.
      if self.velocity is None:
        self.velocity = ros_interface.msg.Point3D()
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.polygon_point is None:
        self.polygon_point = []
      if self.tracking_time is None:
        self.tracking_time = 0.
      if self.type is None:
        self.type = 0
      if self.lane_position is None:
        self.lane_position = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.timestamp is None:
        self.timestamp = 0.
      if self.confidence_type is None:
        self.confidence_type = 0
      if self.drops is None:
        self.drops = ros_interface.msg.Point3D()
      if self.acceleration is None:
        self.acceleration = ros_interface.msg.Point3D()
      if self.anchor_point is None:
        self.anchor_point = ros_interface.msg.Point3D()
      if self.bounding_box is None:
        self.bounding_box = []
      if self.sub_type is None:
        self.sub_type = 0
      if self.height_above_ground is None:
        self.height_above_ground = 0.
      if self.position_covariance is None:
        self.position_covariance = []
      if self.velocity_covariance is None:
        self.velocity_covariance = []
      if self.acceleration_covariance is None:
        self.acceleration_covariance = []
      if self.light_status is None:
        self.light_status = 0
    else:
      self.id = 0
      self.position = ros_interface.msg.Point3D()
      self.theta = 0.
      self.velocity = ros_interface.msg.Point3D()
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.polygon_point = []
      self.tracking_time = 0.
      self.type = 0
      self.lane_position = 0
      self.confidence = 0.
      self.timestamp = 0.
      self.confidence_type = 0
      self.drops = ros_interface.msg.Point3D()
      self.acceleration = ros_interface.msg.Point3D()
      self.anchor_point = ros_interface.msg.Point3D()
      self.bounding_box = []
      self.sub_type = 0
      self.height_above_ground = 0.
      self.position_covariance = []
      self.velocity_covariance = []
      self.acceleration_covariance = []
      self.light_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i10d().pack(_x.id, _x.position.x, _x.position.y, _x.position.z, _x.theta, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.length, _x.width, _x.height))
      length = len(self.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.polygon_point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_d2i2dB9d().pack(_x.tracking_time, _x.type, _x.lane_position, _x.confidence, _x.timestamp, _x.confidence_type, _x.drops.x, _x.drops.y, _x.drops.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.anchor_point.x, _x.anchor_point.y, _x.anchor_point.z))
      length = len(self.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_box:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_id().pack(_x.sub_type, _x.height_above_ground))
      length = len(self.position_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.position_covariance))
      length = len(self.velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.velocity_covariance))
      length = len(self.acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.acceleration_covariance))
      _x = self.light_status
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = ros_interface.msg.Point3D()
      if self.velocity is None:
        self.velocity = ros_interface.msg.Point3D()
      if self.polygon_point is None:
        self.polygon_point = None
      if self.drops is None:
        self.drops = ros_interface.msg.Point3D()
      if self.acceleration is None:
        self.acceleration = ros_interface.msg.Point3D()
      if self.anchor_point is None:
        self.anchor_point = ros_interface.msg.Point3D()
      if self.bounding_box is None:
        self.bounding_box = None
      end = 0
      _x = self
      start = end
      end += 84
      (_x.id, _x.position.x, _x.position.y, _x.position.z, _x.theta, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.length, _x.width, _x.height,) = _get_struct_i10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polygon_point = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.polygon_point.append(val1)
      _x = self
      start = end
      end += 105
      (_x.tracking_time, _x.type, _x.lane_position, _x.confidence, _x.timestamp, _x.confidence_type, _x.drops.x, _x.drops.y, _x.drops.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.anchor_point.x, _x.anchor_point.y, _x.anchor_point.z,) = _get_struct_d2i2dB9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_box = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_box.append(val1)
      _x = self
      start = end
      end += 12
      (_x.sub_type, _x.height_above_ground,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position_covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity_covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acceleration_covariance = s.unpack(str[start:end])
      start = end
      end += 1
      (self.light_status,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i10d().pack(_x.id, _x.position.x, _x.position.y, _x.position.z, _x.theta, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.length, _x.width, _x.height))
      length = len(self.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.polygon_point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_d2i2dB9d().pack(_x.tracking_time, _x.type, _x.lane_position, _x.confidence, _x.timestamp, _x.confidence_type, _x.drops.x, _x.drops.y, _x.drops.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.anchor_point.x, _x.anchor_point.y, _x.anchor_point.z))
      length = len(self.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_box:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_id().pack(_x.sub_type, _x.height_above_ground))
      length = len(self.position_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_covariance.tostring())
      length = len(self.velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_covariance.tostring())
      length = len(self.acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.acceleration_covariance.tostring())
      _x = self.light_status
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = ros_interface.msg.Point3D()
      if self.velocity is None:
        self.velocity = ros_interface.msg.Point3D()
      if self.polygon_point is None:
        self.polygon_point = None
      if self.drops is None:
        self.drops = ros_interface.msg.Point3D()
      if self.acceleration is None:
        self.acceleration = ros_interface.msg.Point3D()
      if self.anchor_point is None:
        self.anchor_point = ros_interface.msg.Point3D()
      if self.bounding_box is None:
        self.bounding_box = None
      end = 0
      _x = self
      start = end
      end += 84
      (_x.id, _x.position.x, _x.position.y, _x.position.z, _x.theta, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.length, _x.width, _x.height,) = _get_struct_i10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polygon_point = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.polygon_point.append(val1)
      _x = self
      start = end
      end += 105
      (_x.tracking_time, _x.type, _x.lane_position, _x.confidence, _x.timestamp, _x.confidence_type, _x.drops.x, _x.drops.y, _x.drops.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.anchor_point.x, _x.anchor_point.y, _x.anchor_point.z,) = _get_struct_d2i2dB9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_box = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_box.append(val1)
      _x = self
      start = end
      end += 12
      (_x.sub_type, _x.height_above_ground,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.light_status,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d2i2dB9d = None
def _get_struct_d2i2dB9d():
    global _struct_d2i2dB9d
    if _struct_d2i2dB9d is None:
        _struct_d2i2dB9d = struct.Struct("<d2i2dB9d")
    return _struct_d2i2dB9d
_struct_i10d = None
def _get_struct_i10d():
    global _struct_i10d
    if _struct_i10d is None:
        _struct_i10d = struct.Struct("<i10d")
    return _struct_i10d
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
