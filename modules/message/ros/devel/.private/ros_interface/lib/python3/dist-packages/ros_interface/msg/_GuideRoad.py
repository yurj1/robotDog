# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/GuideRoad.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class GuideRoad(genpy.Message):
  _md5sum = "2111a81fc9be87fa69598a4bd29fcca4"
  _type = "ros_interface/GuideRoad"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64   road_id     # 道路的id
int8   road_type     # 道路的类型: 0：未知或一般道路  1：环岛 2：交叉路口 3：主路 4：辅路
int8   turn_type     # 规划路线上道路的转向信息 1：左转 2：直行 3：右转
float64   avg_curvature     # 道路的平均曲率
int32   curvature_size     # 道路中心线上点(曲率)数量
CurvatureInfo[] curvature # 道路曲率信息数组

================================================================================
MSG: ros_interface/CurvatureInfo
float64   offset     # 道路中心线上点位于该道路的位置（与道路起点的距离）
float64   value     # 道路中心线上点的曲率值
"""
  __slots__ = ['road_id','road_type','turn_type','avg_curvature','curvature_size','curvature']
  _slot_types = ['int64','int8','int8','float64','int32','ros_interface/CurvatureInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       road_id,road_type,turn_type,avg_curvature,curvature_size,curvature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GuideRoad, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.road_id is None:
        self.road_id = 0
      if self.road_type is None:
        self.road_type = 0
      if self.turn_type is None:
        self.turn_type = 0
      if self.avg_curvature is None:
        self.avg_curvature = 0.
      if self.curvature_size is None:
        self.curvature_size = 0
      if self.curvature is None:
        self.curvature = []
    else:
      self.road_id = 0
      self.road_type = 0
      self.turn_type = 0
      self.avg_curvature = 0.
      self.curvature_size = 0
      self.curvature = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q2bdi().pack(_x.road_id, _x.road_type, _x.turn_type, _x.avg_curvature, _x.curvature_size))
      length = len(self.curvature)
      buff.write(_struct_I.pack(length))
      for val1 in self.curvature:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.offset, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.curvature is None:
        self.curvature = None
      end = 0
      _x = self
      start = end
      end += 22
      (_x.road_id, _x.road_type, _x.turn_type, _x.avg_curvature, _x.curvature_size,) = _get_struct_q2bdi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.curvature = []
      for i in range(0, length):
        val1 = ros_interface.msg.CurvatureInfo()
        _x = val1
        start = end
        end += 16
        (_x.offset, _x.value,) = _get_struct_2d().unpack(str[start:end])
        self.curvature.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q2bdi().pack(_x.road_id, _x.road_type, _x.turn_type, _x.avg_curvature, _x.curvature_size))
      length = len(self.curvature)
      buff.write(_struct_I.pack(length))
      for val1 in self.curvature:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.offset, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.curvature is None:
        self.curvature = None
      end = 0
      _x = self
      start = end
      end += 22
      (_x.road_id, _x.road_type, _x.turn_type, _x.avg_curvature, _x.curvature_size,) = _get_struct_q2bdi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.curvature = []
      for i in range(0, length):
        val1 = ros_interface.msg.CurvatureInfo()
        _x = val1
        start = end
        end += 16
        (_x.offset, _x.value,) = _get_struct_2d().unpack(str[start:end])
        self.curvature.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_q2bdi = None
def _get_struct_q2bdi():
    global _struct_q2bdi
    if _struct_q2bdi is None:
        _struct_q2bdi = struct.Struct("<q2bdi")
    return _struct_q2bdi
