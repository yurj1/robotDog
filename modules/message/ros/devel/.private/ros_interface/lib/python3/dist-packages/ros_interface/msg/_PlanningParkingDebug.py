# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/PlanningParkingDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class PlanningParkingDebug(genpy.Message):
  _md5sum = "55d8b9f79fb54b57da40c7c79d428a76"
  _type = "ros_interface/PlanningParkingDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Polygon2D[] vehicle_preiew_polygon # 车辆预测多边形
Polygon2D[] obstacles_polygon # 障碍物多边形
PathPoint[] path_points # 轨迹点
float64   lat_error     # 横向误差
float64   lon_error     # 纵向误差
float64   yaw_error     # 角度误差(度)
Point2dList[] obstacles_vec #  
TrajectoryPoint[] warm_start_traj #  
TrajectoryPoint[] smoothed_traj_stage1 #  
TrajectoryPoint[] smoothed_traj_stage2 #  
Trajectory   reference_line     #  
Trajectory[] trajectory_array # 轨迹簇
Trajectory   optimal_coarse_trajectory     #  
Trajectory   optimal_smooth_trajectory     #  
float64   hybrid_a_star_map_time     #  
float64   hybrid_a_star_heuristic_time     #  
float64   hybrid_a_star_rs_time     #  
float64   hybrid_a_star_total_time     #  
float64   ias_collision_avoidance_time     #  
float64   ias_path_smooth_time     #  
float64   ias_speed_smooth_time     #  
float64   ias_total_time     #  
float64   samping_trajectory_time     #  
bool   is_replan     #  
string   replan_reason     #  
float64   replan_time     #  
int32   replan_num     #  
int32   optimizer_thread_counter     #  
int32   replan_by_context_update_counter     #  
int32   replan_by_large_error_counter     #  
int32   parking_type     #  
int32   moves_counter     # 揉库次数
float64   remain_distance     # 剩余距离
float64   distance_to_leader_obj     # 距离最近障碍物距离
int32   state     #  

================================================================================
MSG: ros_interface/Polygon2D
int32   coordinate_system     # 坐标系
Point2D[] points # 二维点集

================================================================================
MSG: ros_interface/Point2D
float64   x     # 位置坐标x
float64   y     # 位置坐标y

================================================================================
MSG: ros_interface/PathPoint
float64   x     # coordinates x
float64   y     # coordinates y
float64   z     # coordinates z
float64   theta     # direction on the x-y plane
float64   kappa     # curvature on the x-y planning
float64   s     # accumulated distance from beginning of the path
float64   dkappa     # derivative of kappa w.r.t s.
float64   ddkappa     # derivative of derivative of kappa w.r.t s.
float64   lane_id     # The lane ID where the path point is on
float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline
float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline

================================================================================
MSG: ros_interface/Point2dList
Point2D[] point2d_list #  

================================================================================
MSG: ros_interface/TrajectoryPoint
PathPoint   path_point     # path point
float64   v     # linear velocity
float64   a     # linear acceleration
float64   relative_time     # relative time from beginning of the trajectory
float64   da     # longitudinal jerk
bool   is_steer_valid     # 转向是否有效
float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis
float64   rear_steer     # 后轮转角
int32   gear     # 档位

================================================================================
MSG: ros_interface/Trajectory
string   name     # 轨迹名称
TrajectoryPoint[] trajectory_points # 轨迹点
"""
  __slots__ = ['vehicle_preiew_polygon','obstacles_polygon','path_points','lat_error','lon_error','yaw_error','obstacles_vec','warm_start_traj','smoothed_traj_stage1','smoothed_traj_stage2','reference_line','trajectory_array','optimal_coarse_trajectory','optimal_smooth_trajectory','hybrid_a_star_map_time','hybrid_a_star_heuristic_time','hybrid_a_star_rs_time','hybrid_a_star_total_time','ias_collision_avoidance_time','ias_path_smooth_time','ias_speed_smooth_time','ias_total_time','samping_trajectory_time','is_replan','replan_reason','replan_time','replan_num','optimizer_thread_counter','replan_by_context_update_counter','replan_by_large_error_counter','parking_type','moves_counter','remain_distance','distance_to_leader_obj','state']
  _slot_types = ['ros_interface/Polygon2D[]','ros_interface/Polygon2D[]','ros_interface/PathPoint[]','float64','float64','float64','ros_interface/Point2dList[]','ros_interface/TrajectoryPoint[]','ros_interface/TrajectoryPoint[]','ros_interface/TrajectoryPoint[]','ros_interface/Trajectory','ros_interface/Trajectory[]','ros_interface/Trajectory','ros_interface/Trajectory','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','string','float64','int32','int32','int32','int32','int32','int32','float64','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehicle_preiew_polygon,obstacles_polygon,path_points,lat_error,lon_error,yaw_error,obstacles_vec,warm_start_traj,smoothed_traj_stage1,smoothed_traj_stage2,reference_line,trajectory_array,optimal_coarse_trajectory,optimal_smooth_trajectory,hybrid_a_star_map_time,hybrid_a_star_heuristic_time,hybrid_a_star_rs_time,hybrid_a_star_total_time,ias_collision_avoidance_time,ias_path_smooth_time,ias_speed_smooth_time,ias_total_time,samping_trajectory_time,is_replan,replan_reason,replan_time,replan_num,optimizer_thread_counter,replan_by_context_update_counter,replan_by_large_error_counter,parking_type,moves_counter,remain_distance,distance_to_leader_obj,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningParkingDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vehicle_preiew_polygon is None:
        self.vehicle_preiew_polygon = []
      if self.obstacles_polygon is None:
        self.obstacles_polygon = []
      if self.path_points is None:
        self.path_points = []
      if self.lat_error is None:
        self.lat_error = 0.
      if self.lon_error is None:
        self.lon_error = 0.
      if self.yaw_error is None:
        self.yaw_error = 0.
      if self.obstacles_vec is None:
        self.obstacles_vec = []
      if self.warm_start_traj is None:
        self.warm_start_traj = []
      if self.smoothed_traj_stage1 is None:
        self.smoothed_traj_stage1 = []
      if self.smoothed_traj_stage2 is None:
        self.smoothed_traj_stage2 = []
      if self.reference_line is None:
        self.reference_line = ros_interface.msg.Trajectory()
      if self.trajectory_array is None:
        self.trajectory_array = []
      if self.optimal_coarse_trajectory is None:
        self.optimal_coarse_trajectory = ros_interface.msg.Trajectory()
      if self.optimal_smooth_trajectory is None:
        self.optimal_smooth_trajectory = ros_interface.msg.Trajectory()
      if self.hybrid_a_star_map_time is None:
        self.hybrid_a_star_map_time = 0.
      if self.hybrid_a_star_heuristic_time is None:
        self.hybrid_a_star_heuristic_time = 0.
      if self.hybrid_a_star_rs_time is None:
        self.hybrid_a_star_rs_time = 0.
      if self.hybrid_a_star_total_time is None:
        self.hybrid_a_star_total_time = 0.
      if self.ias_collision_avoidance_time is None:
        self.ias_collision_avoidance_time = 0.
      if self.ias_path_smooth_time is None:
        self.ias_path_smooth_time = 0.
      if self.ias_speed_smooth_time is None:
        self.ias_speed_smooth_time = 0.
      if self.ias_total_time is None:
        self.ias_total_time = 0.
      if self.samping_trajectory_time is None:
        self.samping_trajectory_time = 0.
      if self.is_replan is None:
        self.is_replan = False
      if self.replan_reason is None:
        self.replan_reason = ''
      if self.replan_time is None:
        self.replan_time = 0.
      if self.replan_num is None:
        self.replan_num = 0
      if self.optimizer_thread_counter is None:
        self.optimizer_thread_counter = 0
      if self.replan_by_context_update_counter is None:
        self.replan_by_context_update_counter = 0
      if self.replan_by_large_error_counter is None:
        self.replan_by_large_error_counter = 0
      if self.parking_type is None:
        self.parking_type = 0
      if self.moves_counter is None:
        self.moves_counter = 0
      if self.remain_distance is None:
        self.remain_distance = 0.
      if self.distance_to_leader_obj is None:
        self.distance_to_leader_obj = 0.
      if self.state is None:
        self.state = 0
    else:
      self.vehicle_preiew_polygon = []
      self.obstacles_polygon = []
      self.path_points = []
      self.lat_error = 0.
      self.lon_error = 0.
      self.yaw_error = 0.
      self.obstacles_vec = []
      self.warm_start_traj = []
      self.smoothed_traj_stage1 = []
      self.smoothed_traj_stage2 = []
      self.reference_line = ros_interface.msg.Trajectory()
      self.trajectory_array = []
      self.optimal_coarse_trajectory = ros_interface.msg.Trajectory()
      self.optimal_smooth_trajectory = ros_interface.msg.Trajectory()
      self.hybrid_a_star_map_time = 0.
      self.hybrid_a_star_heuristic_time = 0.
      self.hybrid_a_star_rs_time = 0.
      self.hybrid_a_star_total_time = 0.
      self.ias_collision_avoidance_time = 0.
      self.ias_path_smooth_time = 0.
      self.ias_speed_smooth_time = 0.
      self.ias_total_time = 0.
      self.samping_trajectory_time = 0.
      self.is_replan = False
      self.replan_reason = ''
      self.replan_time = 0.
      self.replan_num = 0
      self.optimizer_thread_counter = 0
      self.replan_by_context_update_counter = 0
      self.replan_by_large_error_counter = 0
      self.parking_type = 0
      self.moves_counter = 0
      self.remain_distance = 0.
      self.distance_to_leader_obj = 0.
      self.state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.vehicle_preiew_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_preiew_polygon:
        _x = val1.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.obstacles_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles_polygon:
        _x = val1.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_points:
        _x = val1
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
      _x = self
      buff.write(_get_struct_3d().pack(_x.lat_error, _x.lon_error, _x.yaw_error))
      length = len(self.obstacles_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles_vec:
        length = len(val1.point2d_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.point2d_list:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.warm_start_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.warm_start_traj:
        _v1 = val1.path_point
        _x = _v1
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.smoothed_traj_stage1)
      buff.write(_struct_I.pack(length))
      for val1 in self.smoothed_traj_stage1:
        _v2 = val1.path_point
        _x = _v2
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.smoothed_traj_stage2)
      buff.write(_struct_I.pack(length))
      for val1 in self.smoothed_traj_stage2:
        _v3 = val1.path_point
        _x = _v3
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.reference_line.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.reference_line.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_line.trajectory_points:
        _v4 = val1.path_point
        _x = _v4
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.trajectory_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_array:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_points:
          _v5 = val2.path_point
          _x = _v5
          buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
          _x = val2
          buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.optimal_coarse_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.optimal_coarse_trajectory.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.optimal_coarse_trajectory.trajectory_points:
        _v6 = val1.path_point
        _x = _v6
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.optimal_smooth_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.optimal_smooth_trajectory.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.optimal_smooth_trajectory.trajectory_points:
        _v7 = val1.path_point
        _x = _v7
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self
      buff.write(_get_struct_9dB().pack(_x.hybrid_a_star_map_time, _x.hybrid_a_star_heuristic_time, _x.hybrid_a_star_rs_time, _x.hybrid_a_star_total_time, _x.ias_collision_avoidance_time, _x.ias_path_smooth_time, _x.ias_speed_smooth_time, _x.ias_total_time, _x.samping_trajectory_time, _x.is_replan))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d6i2di().pack(_x.replan_time, _x.replan_num, _x.optimizer_thread_counter, _x.replan_by_context_update_counter, _x.replan_by_large_error_counter, _x.parking_type, _x.moves_counter, _x.remain_distance, _x.distance_to_leader_obj, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehicle_preiew_polygon is None:
        self.vehicle_preiew_polygon = None
      if self.obstacles_polygon is None:
        self.obstacles_polygon = None
      if self.path_points is None:
        self.path_points = None
      if self.obstacles_vec is None:
        self.obstacles_vec = None
      if self.warm_start_traj is None:
        self.warm_start_traj = None
      if self.smoothed_traj_stage1 is None:
        self.smoothed_traj_stage1 = None
      if self.smoothed_traj_stage2 is None:
        self.smoothed_traj_stage2 = None
      if self.reference_line is None:
        self.reference_line = ros_interface.msg.Trajectory()
      if self.trajectory_array is None:
        self.trajectory_array = None
      if self.optimal_coarse_trajectory is None:
        self.optimal_coarse_trajectory = ros_interface.msg.Trajectory()
      if self.optimal_smooth_trajectory is None:
        self.optimal_smooth_trajectory = ros_interface.msg.Trajectory()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_preiew_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Polygon2D()
        start = end
        end += 4
        (val1.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.vehicle_preiew_polygon.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Polygon2D()
        start = end
        end += 4
        (val1.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.obstacles_polygon.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.PathPoint()
        _x = val1
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        self.path_points.append(val1)
      _x = self
      start = end
      end += 24
      (_x.lat_error, _x.lon_error, _x.yaw_error,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles_vec = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point2dList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.point2d_list = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.point2d_list.append(val2)
        self.obstacles_vec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.warm_start_traj = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v8 = val1.path_point
        _x = _v8
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.warm_start_traj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.smoothed_traj_stage1 = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v9 = val1.path_point
        _x = _v9
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.smoothed_traj_stage1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.smoothed_traj_stage2 = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v10 = val1.path_point
        _x = _v10
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.smoothed_traj_stage2.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference_line.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reference_line.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_line.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v11 = val1.path_point
        _x = _v11
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.reference_line.trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_array = []
      for i in range(0, length):
        val1 = ros_interface.msg.Trajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryPoint()
          _v12 = val2.path_point
          _x = _v12
          start = end
          end += 88
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
          _x = val2
          start = end
          end += 53
          (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
          val2.is_steer_valid = bool(val2.is_steer_valid)
          val1.trajectory_points.append(val2)
        self.trajectory_array.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.optimal_coarse_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.optimal_coarse_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.optimal_coarse_trajectory.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v13 = val1.path_point
        _x = _v13
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.optimal_coarse_trajectory.trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.optimal_smooth_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.optimal_smooth_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.optimal_smooth_trajectory.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v14 = val1.path_point
        _x = _v14
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.optimal_smooth_trajectory.trajectory_points.append(val1)
      _x = self
      start = end
      end += 73
      (_x.hybrid_a_star_map_time, _x.hybrid_a_star_heuristic_time, _x.hybrid_a_star_rs_time, _x.hybrid_a_star_total_time, _x.ias_collision_avoidance_time, _x.ias_path_smooth_time, _x.ias_speed_smooth_time, _x.ias_total_time, _x.samping_trajectory_time, _x.is_replan,) = _get_struct_9dB().unpack(str[start:end])
      self.is_replan = bool(self.is_replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.replan_time, _x.replan_num, _x.optimizer_thread_counter, _x.replan_by_context_update_counter, _x.replan_by_large_error_counter, _x.parking_type, _x.moves_counter, _x.remain_distance, _x.distance_to_leader_obj, _x.state,) = _get_struct_d6i2di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.vehicle_preiew_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_preiew_polygon:
        _x = val1.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.obstacles_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles_polygon:
        _x = val1.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_points:
        _x = val1
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
      _x = self
      buff.write(_get_struct_3d().pack(_x.lat_error, _x.lon_error, _x.yaw_error))
      length = len(self.obstacles_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles_vec:
        length = len(val1.point2d_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.point2d_list:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.warm_start_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.warm_start_traj:
        _v15 = val1.path_point
        _x = _v15
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.smoothed_traj_stage1)
      buff.write(_struct_I.pack(length))
      for val1 in self.smoothed_traj_stage1:
        _v16 = val1.path_point
        _x = _v16
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.smoothed_traj_stage2)
      buff.write(_struct_I.pack(length))
      for val1 in self.smoothed_traj_stage2:
        _v17 = val1.path_point
        _x = _v17
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.reference_line.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.reference_line.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_line.trajectory_points:
        _v18 = val1.path_point
        _x = _v18
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.trajectory_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_array:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_points:
          _v19 = val2.path_point
          _x = _v19
          buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
          _x = val2
          buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.optimal_coarse_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.optimal_coarse_trajectory.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.optimal_coarse_trajectory.trajectory_points:
        _v20 = val1.path_point
        _x = _v20
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.optimal_smooth_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.optimal_smooth_trajectory.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.optimal_smooth_trajectory.trajectory_points:
        _v21 = val1.path_point
        _x = _v21
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self
      buff.write(_get_struct_9dB().pack(_x.hybrid_a_star_map_time, _x.hybrid_a_star_heuristic_time, _x.hybrid_a_star_rs_time, _x.hybrid_a_star_total_time, _x.ias_collision_avoidance_time, _x.ias_path_smooth_time, _x.ias_speed_smooth_time, _x.ias_total_time, _x.samping_trajectory_time, _x.is_replan))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d6i2di().pack(_x.replan_time, _x.replan_num, _x.optimizer_thread_counter, _x.replan_by_context_update_counter, _x.replan_by_large_error_counter, _x.parking_type, _x.moves_counter, _x.remain_distance, _x.distance_to_leader_obj, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehicle_preiew_polygon is None:
        self.vehicle_preiew_polygon = None
      if self.obstacles_polygon is None:
        self.obstacles_polygon = None
      if self.path_points is None:
        self.path_points = None
      if self.obstacles_vec is None:
        self.obstacles_vec = None
      if self.warm_start_traj is None:
        self.warm_start_traj = None
      if self.smoothed_traj_stage1 is None:
        self.smoothed_traj_stage1 = None
      if self.smoothed_traj_stage2 is None:
        self.smoothed_traj_stage2 = None
      if self.reference_line is None:
        self.reference_line = ros_interface.msg.Trajectory()
      if self.trajectory_array is None:
        self.trajectory_array = None
      if self.optimal_coarse_trajectory is None:
        self.optimal_coarse_trajectory = ros_interface.msg.Trajectory()
      if self.optimal_smooth_trajectory is None:
        self.optimal_smooth_trajectory = ros_interface.msg.Trajectory()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_preiew_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Polygon2D()
        start = end
        end += 4
        (val1.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.vehicle_preiew_polygon.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Polygon2D()
        start = end
        end += 4
        (val1.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.obstacles_polygon.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.PathPoint()
        _x = val1
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        self.path_points.append(val1)
      _x = self
      start = end
      end += 24
      (_x.lat_error, _x.lon_error, _x.yaw_error,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles_vec = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point2dList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.point2d_list = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.point2d_list.append(val2)
        self.obstacles_vec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.warm_start_traj = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v22 = val1.path_point
        _x = _v22
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.warm_start_traj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.smoothed_traj_stage1 = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v23 = val1.path_point
        _x = _v23
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.smoothed_traj_stage1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.smoothed_traj_stage2 = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v24 = val1.path_point
        _x = _v24
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.smoothed_traj_stage2.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference_line.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reference_line.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_line.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v25 = val1.path_point
        _x = _v25
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.reference_line.trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_array = []
      for i in range(0, length):
        val1 = ros_interface.msg.Trajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryPoint()
          _v26 = val2.path_point
          _x = _v26
          start = end
          end += 88
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
          _x = val2
          start = end
          end += 53
          (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
          val2.is_steer_valid = bool(val2.is_steer_valid)
          val1.trajectory_points.append(val2)
        self.trajectory_array.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.optimal_coarse_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.optimal_coarse_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.optimal_coarse_trajectory.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v27 = val1.path_point
        _x = _v27
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.optimal_coarse_trajectory.trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.optimal_smooth_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.optimal_smooth_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.optimal_smooth_trajectory.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v28 = val1.path_point
        _x = _v28
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.optimal_smooth_trajectory.trajectory_points.append(val1)
      _x = self
      start = end
      end += 73
      (_x.hybrid_a_star_map_time, _x.hybrid_a_star_heuristic_time, _x.hybrid_a_star_rs_time, _x.hybrid_a_star_total_time, _x.ias_collision_avoidance_time, _x.ias_path_smooth_time, _x.ias_speed_smooth_time, _x.ias_total_time, _x.samping_trajectory_time, _x.is_replan,) = _get_struct_9dB().unpack(str[start:end])
      self.is_replan = bool(self.is_replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.replan_time, _x.replan_num, _x.optimizer_thread_counter, _x.replan_by_context_update_counter, _x.replan_by_large_error_counter, _x.parking_type, _x.moves_counter, _x.remain_distance, _x.distance_to_leader_obj, _x.state,) = _get_struct_d6i2di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4dB2di = None
def _get_struct_4dB2di():
    global _struct_4dB2di
    if _struct_4dB2di is None:
        _struct_4dB2di = struct.Struct("<4dB2di")
    return _struct_4dB2di
_struct_9dB = None
def _get_struct_9dB():
    global _struct_9dB
    if _struct_9dB is None:
        _struct_9dB = struct.Struct("<9dB")
    return _struct_9dB
_struct_d6i2di = None
def _get_struct_d6i2di():
    global _struct_d6i2di
    if _struct_d6i2di is None:
        _struct_d6i2di = struct.Struct("<d6i2di")
    return _struct_d6i2di
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
