# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/LaneInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class LaneInfo(genpy.Message):
  _md5sum = "0ef29114104627b60d3c8213d422ab75"
  _type = "ros_interface/LaneInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8   priority     # 道路优先级
int8   global_id     # 道路全局id（从左至右，从0开始）
int8   predecessor_id     # 上一车道id
int8   successor_id     # 下一车道id
int8   left_neighbor_id     # 左边相邻车道id
int8   right_neighbor_id     # 右边相邻车道id
int8   type     # 类型（预留）
LanePoint[] lane_points # 道路参考线（z）

================================================================================
MSG: ros_interface/LanePoint
Point3D   point     # 点xyz
float64   theta     # 方向（与东方向夹角，逆时针方向为正，单位为弧度）
float64   mileage     # 总体里程
float64   limit_speed     # 地图限速（单位m/s）
float64   left_road_width     # 左边车道宽
float64   right_road_width     # 右边车道宽
int32   left_line_type     # 左边车线线型
int32   right_line_type     # 右边车线线型

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z
"""
  __slots__ = ['priority','global_id','predecessor_id','successor_id','left_neighbor_id','right_neighbor_id','type','lane_points']
  _slot_types = ['int8','int8','int8','int8','int8','int8','int8','ros_interface/LanePoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       priority,global_id,predecessor_id,successor_id,left_neighbor_id,right_neighbor_id,type,lane_points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.priority is None:
        self.priority = 0
      if self.global_id is None:
        self.global_id = 0
      if self.predecessor_id is None:
        self.predecessor_id = 0
      if self.successor_id is None:
        self.successor_id = 0
      if self.left_neighbor_id is None:
        self.left_neighbor_id = 0
      if self.right_neighbor_id is None:
        self.right_neighbor_id = 0
      if self.type is None:
        self.type = 0
      if self.lane_points is None:
        self.lane_points = []
    else:
      self.priority = 0
      self.global_id = 0
      self.predecessor_id = 0
      self.successor_id = 0
      self.left_neighbor_id = 0
      self.right_neighbor_id = 0
      self.type = 0
      self.lane_points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7b().pack(_x.priority, _x.global_id, _x.predecessor_id, _x.successor_id, _x.left_neighbor_id, _x.right_neighbor_id, _x.type))
      length = len(self.lane_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_points:
        _v1 = val1.point
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5d2i().pack(_x.theta, _x.mileage, _x.limit_speed, _x.left_road_width, _x.right_road_width, _x.left_line_type, _x.right_line_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_points is None:
        self.lane_points = None
      end = 0
      _x = self
      start = end
      end += 7
      (_x.priority, _x.global_id, _x.predecessor_id, _x.successor_id, _x.left_neighbor_id, _x.right_neighbor_id, _x.type,) = _get_struct_7b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.LanePoint()
        _v2 = val1.point
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.theta, _x.mileage, _x.limit_speed, _x.left_road_width, _x.right_road_width, _x.left_line_type, _x.right_line_type,) = _get_struct_5d2i().unpack(str[start:end])
        self.lane_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7b().pack(_x.priority, _x.global_id, _x.predecessor_id, _x.successor_id, _x.left_neighbor_id, _x.right_neighbor_id, _x.type))
      length = len(self.lane_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_points:
        _v3 = val1.point
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5d2i().pack(_x.theta, _x.mileage, _x.limit_speed, _x.left_road_width, _x.right_road_width, _x.left_line_type, _x.right_line_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_points is None:
        self.lane_points = None
      end = 0
      _x = self
      start = end
      end += 7
      (_x.priority, _x.global_id, _x.predecessor_id, _x.successor_id, _x.left_neighbor_id, _x.right_neighbor_id, _x.type,) = _get_struct_7b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.LanePoint()
        _v4 = val1.point
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.theta, _x.mileage, _x.limit_speed, _x.left_road_width, _x.right_road_width, _x.left_line_type, _x.right_line_type,) = _get_struct_5d2i().unpack(str[start:end])
        self.lane_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_5d2i = None
def _get_struct_5d2i():
    global _struct_5d2i
    if _struct_5d2i is None:
        _struct_5d2i = struct.Struct("<5d2i")
    return _struct_5d2i
_struct_7b = None
def _get_struct_7b():
    global _struct_7b
    if _struct_7b is None:
        _struct_7b = struct.Struct("<7b")
    return _struct_7b
