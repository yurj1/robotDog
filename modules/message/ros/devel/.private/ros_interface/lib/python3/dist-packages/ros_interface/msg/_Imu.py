# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/Imu.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class Imu(genpy.Message):
  _md5sum = "400b1b2966d2f99a2d52eb709cd9bec3"
  _type = "ros_interface/Imu"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # 头部信息
bool   is_valid     # 数据有效性标志位
Quaternion   orientation     # 角度（四元素）
float64[] orientation_covariance # 角度方差
Point3D   angular_velocity     # 角速度信息angularVelocity.x：x方向角速度信息angularVelocity.y: y方向角速度信息angularVelocity.z：z方向角速度信息
float64[] angular_velocity_covariance # 速度方差
Point3D   linear_acceleration     # 线加速度信息linearAcceleration.x：x方向线加速度信息linearAcceleration.y: y方向线加速度信息linearAcceleration.z：z方向线加速度信息
float64[] linear_acceleration_covariance # 线性加速度方差

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/Quaternion
float64   qx     # 四维空间x
float64   qy     # 四维空间y
float64   qz     # 四维空间z
float64   qw     # 四维空间w

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z
"""
  __slots__ = ['header','is_valid','orientation','orientation_covariance','angular_velocity','angular_velocity_covariance','linear_acceleration','linear_acceleration_covariance']
  _slot_types = ['std_msgs/Header','bool','ros_interface/Quaternion','float64[]','ros_interface/Point3D','float64[]','ros_interface/Point3D','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,is_valid,orientation,orientation_covariance,angular_velocity,angular_velocity_covariance,linear_acceleration,linear_acceleration_covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Imu, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.is_valid is None:
        self.is_valid = False
      if self.orientation is None:
        self.orientation = ros_interface.msg.Quaternion()
      if self.orientation_covariance is None:
        self.orientation_covariance = []
      if self.angular_velocity is None:
        self.angular_velocity = ros_interface.msg.Point3D()
      if self.angular_velocity_covariance is None:
        self.angular_velocity_covariance = []
      if self.linear_acceleration is None:
        self.linear_acceleration = ros_interface.msg.Point3D()
      if self.linear_acceleration_covariance is None:
        self.linear_acceleration_covariance = []
    else:
      self.header = std_msgs.msg.Header()
      self.is_valid = False
      self.orientation = ros_interface.msg.Quaternion()
      self.orientation_covariance = []
      self.angular_velocity = ros_interface.msg.Point3D()
      self.angular_velocity_covariance = []
      self.linear_acceleration = ros_interface.msg.Point3D()
      self.linear_acceleration_covariance = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4d().pack(_x.is_valid, _x.orientation.qx, _x.orientation.qy, _x.orientation.qz, _x.orientation.qw))
      length = len(self.orientation_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z))
      length = len(self.angular_velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z))
      length = len(self.linear_acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.linear_acceleration_covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation is None:
        self.orientation = ros_interface.msg.Quaternion()
      if self.angular_velocity is None:
        self.angular_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.is_valid, _x.orientation.qx, _x.orientation.qy, _x.orientation.qz, _x.orientation.qw,) = _get_struct_B4d().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.orientation_covariance = s.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.angular_velocity_covariance = s.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.linear_acceleration_covariance = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4d().pack(_x.is_valid, _x.orientation.qx, _x.orientation.qy, _x.orientation.qz, _x.orientation.qw))
      length = len(self.orientation_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z))
      length = len(self.angular_velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z))
      length = len(self.linear_acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.linear_acceleration_covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation is None:
        self.orientation = ros_interface.msg.Quaternion()
      if self.angular_velocity is None:
        self.angular_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.is_valid, _x.orientation.qx, _x.orientation.qy, _x.orientation.qz, _x.orientation.qw,) = _get_struct_B4d().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 24
      (_x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 24
      (_x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B4d = None
def _get_struct_B4d():
    global _struct_B4d
    if _struct_B4d is None:
        _struct_B4d = struct.Struct("<B4d")
    return _struct_B4d
