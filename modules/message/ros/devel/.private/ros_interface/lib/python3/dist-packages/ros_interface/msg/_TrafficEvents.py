# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/TrafficEvents.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class TrafficEvents(genpy.Message):
  _md5sum = "335c91b3f0dcb169fd1b0fb0532d62c6"
  _type = "ros_interface/TrafficEvents"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # timestamp is included in header
RouteFusionInfo   route_fusion_info     # 地图融合信息
JunctionInfo   junction_info     # 路口信息
LimitSpeedInfo   limit_speed_info     # 限速消息

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/RouteFusionInfo
int32   fusion_flag     # 是否有效标志位
string   fusion_reason     # 融合原因

================================================================================
MSG: ros_interface/JunctionInfo
int32   id     #  
int32   light_flag     # 是否有效，无效就可能是清除了，或者已经过路口了
int32   light_color     # 信号灯颜色，绿灯可通行，false红灯不能通行
float64   light_remain_time     # 信号灯剩余时间
float64   distance_to_stop     # 停车距离，停止线
int32   direction_flag     # 是否有效，无效就可能是清除了，或者已经过路口了
int32   direction     # 路口通行方向，0：无效、1：左、2：前、3：右
float64   distance_to_junction     # 距路口距离
Point3D[] stop_line # 路口停止线

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/LimitSpeedInfo
int32   limitspeed_valid_flag     # 限速有效性标志位
float64   limit_speed     # 限速大小（m/s）
float64   limit_distance     # 开始减速距离(m)
"""
  __slots__ = ['header','route_fusion_info','junction_info','limit_speed_info']
  _slot_types = ['std_msgs/Header','ros_interface/RouteFusionInfo','ros_interface/JunctionInfo','ros_interface/LimitSpeedInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,route_fusion_info,junction_info,limit_speed_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficEvents, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.route_fusion_info is None:
        self.route_fusion_info = ros_interface.msg.RouteFusionInfo()
      if self.junction_info is None:
        self.junction_info = ros_interface.msg.JunctionInfo()
      if self.limit_speed_info is None:
        self.limit_speed_info = ros_interface.msg.LimitSpeedInfo()
    else:
      self.header = std_msgs.msg.Header()
      self.route_fusion_info = ros_interface.msg.RouteFusionInfo()
      self.junction_info = ros_interface.msg.JunctionInfo()
      self.limit_speed_info = ros_interface.msg.LimitSpeedInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.route_fusion_info.fusion_flag
      buff.write(_get_struct_i().pack(_x))
      _x = self.route_fusion_info.fusion_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i2d2id().pack(_x.junction_info.id, _x.junction_info.light_flag, _x.junction_info.light_color, _x.junction_info.light_remain_time, _x.junction_info.distance_to_stop, _x.junction_info.direction_flag, _x.junction_info.direction, _x.junction_info.distance_to_junction))
      length = len(self.junction_info.stop_line)
      buff.write(_struct_I.pack(length))
      for val1 in self.junction_info.stop_line:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_i2d().pack(_x.limit_speed_info.limitspeed_valid_flag, _x.limit_speed_info.limit_speed, _x.limit_speed_info.limit_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.route_fusion_info is None:
        self.route_fusion_info = ros_interface.msg.RouteFusionInfo()
      if self.junction_info is None:
        self.junction_info = ros_interface.msg.JunctionInfo()
      if self.limit_speed_info is None:
        self.limit_speed_info = ros_interface.msg.LimitSpeedInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.route_fusion_info.fusion_flag,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.route_fusion_info.fusion_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.route_fusion_info.fusion_reason = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.junction_info.id, _x.junction_info.light_flag, _x.junction_info.light_color, _x.junction_info.light_remain_time, _x.junction_info.distance_to_stop, _x.junction_info.direction_flag, _x.junction_info.direction, _x.junction_info.distance_to_junction,) = _get_struct_3i2d2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.junction_info.stop_line = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.junction_info.stop_line.append(val1)
      _x = self
      start = end
      end += 20
      (_x.limit_speed_info.limitspeed_valid_flag, _x.limit_speed_info.limit_speed, _x.limit_speed_info.limit_distance,) = _get_struct_i2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.route_fusion_info.fusion_flag
      buff.write(_get_struct_i().pack(_x))
      _x = self.route_fusion_info.fusion_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i2d2id().pack(_x.junction_info.id, _x.junction_info.light_flag, _x.junction_info.light_color, _x.junction_info.light_remain_time, _x.junction_info.distance_to_stop, _x.junction_info.direction_flag, _x.junction_info.direction, _x.junction_info.distance_to_junction))
      length = len(self.junction_info.stop_line)
      buff.write(_struct_I.pack(length))
      for val1 in self.junction_info.stop_line:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_i2d().pack(_x.limit_speed_info.limitspeed_valid_flag, _x.limit_speed_info.limit_speed, _x.limit_speed_info.limit_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.route_fusion_info is None:
        self.route_fusion_info = ros_interface.msg.RouteFusionInfo()
      if self.junction_info is None:
        self.junction_info = ros_interface.msg.JunctionInfo()
      if self.limit_speed_info is None:
        self.limit_speed_info = ros_interface.msg.LimitSpeedInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.route_fusion_info.fusion_flag,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.route_fusion_info.fusion_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.route_fusion_info.fusion_reason = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.junction_info.id, _x.junction_info.light_flag, _x.junction_info.light_color, _x.junction_info.light_remain_time, _x.junction_info.distance_to_stop, _x.junction_info.direction_flag, _x.junction_info.direction, _x.junction_info.distance_to_junction,) = _get_struct_3i2d2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.junction_info.stop_line = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.junction_info.stop_line.append(val1)
      _x = self
      start = end
      end += 20
      (_x.limit_speed_info.limitspeed_valid_flag, _x.limit_speed_info.limit_speed, _x.limit_speed_info.limit_distance,) = _get_struct_i2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i2d2id = None
def _get_struct_3i2d2id():
    global _struct_3i2d2id
    if _struct_3i2d2id is None:
        _struct_3i2d2id = struct.Struct("<3i2d2id")
    return _struct_3i2d2id
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2d = None
def _get_struct_i2d():
    global _struct_i2d
    if _struct_i2d is None:
        _struct_i2d = struct.Struct("<i2d")
    return _struct_i2d
