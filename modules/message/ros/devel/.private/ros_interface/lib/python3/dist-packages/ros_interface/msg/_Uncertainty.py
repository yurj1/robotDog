# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/Uncertainty.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class Uncertainty(genpy.Message):
  _md5sum = "0a26c653df4736501b569f3e3f7250e8"
  _type = "ros_interface/Uncertainty"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Point3D   position_std_dev     # Standard deviation of position, east/north/up in meters.
Point3D   orientation_std_dev     # Standard deviation of quaternion qx/qy/qz, unitless.
Point3D   linear_velocity_std_dev     # Standard deviation of linear velocity, east/north/up in meters per second.
Point3D   linear_acceleration_std_dev     # Standard deviation of linear acceleration, right/forward/up in meters per square second.
Point3D   angular_velocity_std_dev     # Standard deviation of angular velocity, right/forward/up in radians per second.

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z
"""
  __slots__ = ['position_std_dev','orientation_std_dev','linear_velocity_std_dev','linear_acceleration_std_dev','angular_velocity_std_dev']
  _slot_types = ['ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_std_dev,orientation_std_dev,linear_velocity_std_dev,linear_acceleration_std_dev,angular_velocity_std_dev

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Uncertainty, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position_std_dev is None:
        self.position_std_dev = ros_interface.msg.Point3D()
      if self.orientation_std_dev is None:
        self.orientation_std_dev = ros_interface.msg.Point3D()
      if self.linear_velocity_std_dev is None:
        self.linear_velocity_std_dev = ros_interface.msg.Point3D()
      if self.linear_acceleration_std_dev is None:
        self.linear_acceleration_std_dev = ros_interface.msg.Point3D()
      if self.angular_velocity_std_dev is None:
        self.angular_velocity_std_dev = ros_interface.msg.Point3D()
    else:
      self.position_std_dev = ros_interface.msg.Point3D()
      self.orientation_std_dev = ros_interface.msg.Point3D()
      self.linear_velocity_std_dev = ros_interface.msg.Point3D()
      self.linear_acceleration_std_dev = ros_interface.msg.Point3D()
      self.angular_velocity_std_dev = ros_interface.msg.Point3D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_15d().pack(_x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.orientation_std_dev.x, _x.orientation_std_dev.y, _x.orientation_std_dev.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.linear_acceleration_std_dev.x, _x.linear_acceleration_std_dev.y, _x.linear_acceleration_std_dev.z, _x.angular_velocity_std_dev.x, _x.angular_velocity_std_dev.y, _x.angular_velocity_std_dev.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position_std_dev is None:
        self.position_std_dev = ros_interface.msg.Point3D()
      if self.orientation_std_dev is None:
        self.orientation_std_dev = ros_interface.msg.Point3D()
      if self.linear_velocity_std_dev is None:
        self.linear_velocity_std_dev = ros_interface.msg.Point3D()
      if self.linear_acceleration_std_dev is None:
        self.linear_acceleration_std_dev = ros_interface.msg.Point3D()
      if self.angular_velocity_std_dev is None:
        self.angular_velocity_std_dev = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 120
      (_x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.orientation_std_dev.x, _x.orientation_std_dev.y, _x.orientation_std_dev.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.linear_acceleration_std_dev.x, _x.linear_acceleration_std_dev.y, _x.linear_acceleration_std_dev.z, _x.angular_velocity_std_dev.x, _x.angular_velocity_std_dev.y, _x.angular_velocity_std_dev.z,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_15d().pack(_x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.orientation_std_dev.x, _x.orientation_std_dev.y, _x.orientation_std_dev.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.linear_acceleration_std_dev.x, _x.linear_acceleration_std_dev.y, _x.linear_acceleration_std_dev.z, _x.angular_velocity_std_dev.x, _x.angular_velocity_std_dev.y, _x.angular_velocity_std_dev.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position_std_dev is None:
        self.position_std_dev = ros_interface.msg.Point3D()
      if self.orientation_std_dev is None:
        self.orientation_std_dev = ros_interface.msg.Point3D()
      if self.linear_velocity_std_dev is None:
        self.linear_velocity_std_dev = ros_interface.msg.Point3D()
      if self.linear_acceleration_std_dev is None:
        self.linear_acceleration_std_dev = ros_interface.msg.Point3D()
      if self.angular_velocity_std_dev is None:
        self.angular_velocity_std_dev = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 120
      (_x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.orientation_std_dev.x, _x.orientation_std_dev.y, _x.orientation_std_dev.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.linear_acceleration_std_dev.x, _x.linear_acceleration_std_dev.y, _x.linear_acceleration_std_dev.z, _x.angular_velocity_std_dev.x, _x.angular_velocity_std_dev.y, _x.angular_velocity_std_dev.z,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
