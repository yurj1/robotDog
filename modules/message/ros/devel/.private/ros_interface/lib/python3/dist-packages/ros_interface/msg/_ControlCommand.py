# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/ControlCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ControlCommand(genpy.Message):
  _md5sum = "03627dc94a89132c997f76d6408a79d3"
  _type = "ros_interface/ControlCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
int32   steer_driving_mode     # 0=COMPLETE_MANUAL  1=COMPLETE_AUTO_DRIVE 4=EMERGENCY_MODE
float64   front_steering_target     # target steering angle
float64   rear_steering_target     # target steering angle
float64   front_steering_rate     # target non-directional steering rate
float64   rear_steering_rate     # target non-directional steering rate
int32   accel_driving_mode     # 0=COMPLETE_MANUAL  1=COMPLETE_AUTO_DRIVE 4=EMERGENCY_MODE
float64   accel_value     # target accel value
int32   brake_driving_mode     # 0=COMPLETE_MANUAL  1=COMPLETE_AUTO_DRIVE 4=EMERGENCY_MODE
float64   brake_value     # target brake
int32   backup_brake_driving_mode     # 0=COMPLETE_MANUAL  1=COMPLETE_AUTO_DRIVE 4=EMERGENCY_MODE
float64   backup_brake_value     # target brake
int32   epb_driving_mode     # 0=COMPLETE_MANUAL  1=COMPLETE_AUTO_DRIVE 4=EMERGENCY_MODE
int32   epb_level     # 0=RELEASE 1=APPLIY 2=INVALID
int32   gear_driving_mode     # 0=COMPLETE_MANUAL  1=COMPLETE_AUTO_DRIVE 4=EMERGENCY_MODE
int8   emergency_brake_enable     # 0=disenable  1=enable
int32   gear_location     # 0=GEAR_NEUTRAL 1=GEAR_DRIVE 2=GEAR_REVERSE 3=GEAR_PARKING 4=GEAR_LOW 5=GEAR_INVALID 6=GEAR_NONE
float64   speed     # target speed, in m/s
float64   acceleration     # target acceleration in m`s^-2
int32   turn_lamp_ctrl     # 转向灯 0 关闭 1 开启 2 不响应
int32   high_beam_ctrl     # 0 关闭 1 开启 2 不响应
int32   low_beam_ctrl     # 0 关闭 1 开启 2 不响应
int32   horn_ctrl     # 0 关闭 1 开启 2 不响应
int32   front_wiper_ctrl     # 前雨刮器 0 关闭 1 开启
int32   rear_wiper_ctrl     # 后雨刮器 0 关闭 1 开启
int32   position_lamp_ctrl     # 位置灯 0 关闭 1 开启
int32   front_fog_lamp_ctrl     # 前雾灯 0 关闭 1 开启
int32   rear_fog_lamp_ctrl     # 后雾灯 0 关闭 1 开启
int32   brake_lamp_ctrl     # 刹车灯 一般情况自动控制 0 关闭 1 开启
int32   alarm_lamp_ctrl     # 警报灯 双闪 0 关闭 1 开启
int32   lf_door_ctrl     # 左前门控制 0 关闭 1 开启
int32   rf_door_ctrl     # 右前门控制 0 关闭 1 开启
int32   lr_door_ctrl     # 左后门控制 0 关闭 1 开启
int32   rr_door_ctrl     # 右后门控制 0 关闭 1 开启

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','steer_driving_mode','front_steering_target','rear_steering_target','front_steering_rate','rear_steering_rate','accel_driving_mode','accel_value','brake_driving_mode','brake_value','backup_brake_driving_mode','backup_brake_value','epb_driving_mode','epb_level','gear_driving_mode','emergency_brake_enable','gear_location','speed','acceleration','turn_lamp_ctrl','high_beam_ctrl','low_beam_ctrl','horn_ctrl','front_wiper_ctrl','rear_wiper_ctrl','position_lamp_ctrl','front_fog_lamp_ctrl','rear_fog_lamp_ctrl','brake_lamp_ctrl','alarm_lamp_ctrl','lf_door_ctrl','rf_door_ctrl','lr_door_ctrl','rr_door_ctrl']
  _slot_types = ['std_msgs/Header','int32','float64','float64','float64','float64','int32','float64','int32','float64','int32','float64','int32','int32','int32','int8','int32','float64','float64','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,steer_driving_mode,front_steering_target,rear_steering_target,front_steering_rate,rear_steering_rate,accel_driving_mode,accel_value,brake_driving_mode,brake_value,backup_brake_driving_mode,backup_brake_value,epb_driving_mode,epb_level,gear_driving_mode,emergency_brake_enable,gear_location,speed,acceleration,turn_lamp_ctrl,high_beam_ctrl,low_beam_ctrl,horn_ctrl,front_wiper_ctrl,rear_wiper_ctrl,position_lamp_ctrl,front_fog_lamp_ctrl,rear_fog_lamp_ctrl,brake_lamp_ctrl,alarm_lamp_ctrl,lf_door_ctrl,rf_door_ctrl,lr_door_ctrl,rr_door_ctrl

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steer_driving_mode is None:
        self.steer_driving_mode = 0
      if self.front_steering_target is None:
        self.front_steering_target = 0.
      if self.rear_steering_target is None:
        self.rear_steering_target = 0.
      if self.front_steering_rate is None:
        self.front_steering_rate = 0.
      if self.rear_steering_rate is None:
        self.rear_steering_rate = 0.
      if self.accel_driving_mode is None:
        self.accel_driving_mode = 0
      if self.accel_value is None:
        self.accel_value = 0.
      if self.brake_driving_mode is None:
        self.brake_driving_mode = 0
      if self.brake_value is None:
        self.brake_value = 0.
      if self.backup_brake_driving_mode is None:
        self.backup_brake_driving_mode = 0
      if self.backup_brake_value is None:
        self.backup_brake_value = 0.
      if self.epb_driving_mode is None:
        self.epb_driving_mode = 0
      if self.epb_level is None:
        self.epb_level = 0
      if self.gear_driving_mode is None:
        self.gear_driving_mode = 0
      if self.emergency_brake_enable is None:
        self.emergency_brake_enable = 0
      if self.gear_location is None:
        self.gear_location = 0
      if self.speed is None:
        self.speed = 0.
      if self.acceleration is None:
        self.acceleration = 0.
      if self.turn_lamp_ctrl is None:
        self.turn_lamp_ctrl = 0
      if self.high_beam_ctrl is None:
        self.high_beam_ctrl = 0
      if self.low_beam_ctrl is None:
        self.low_beam_ctrl = 0
      if self.horn_ctrl is None:
        self.horn_ctrl = 0
      if self.front_wiper_ctrl is None:
        self.front_wiper_ctrl = 0
      if self.rear_wiper_ctrl is None:
        self.rear_wiper_ctrl = 0
      if self.position_lamp_ctrl is None:
        self.position_lamp_ctrl = 0
      if self.front_fog_lamp_ctrl is None:
        self.front_fog_lamp_ctrl = 0
      if self.rear_fog_lamp_ctrl is None:
        self.rear_fog_lamp_ctrl = 0
      if self.brake_lamp_ctrl is None:
        self.brake_lamp_ctrl = 0
      if self.alarm_lamp_ctrl is None:
        self.alarm_lamp_ctrl = 0
      if self.lf_door_ctrl is None:
        self.lf_door_ctrl = 0
      if self.rf_door_ctrl is None:
        self.rf_door_ctrl = 0
      if self.lr_door_ctrl is None:
        self.lr_door_ctrl = 0
      if self.rr_door_ctrl is None:
        self.rr_door_ctrl = 0
    else:
      self.header = std_msgs.msg.Header()
      self.steer_driving_mode = 0
      self.front_steering_target = 0.
      self.rear_steering_target = 0.
      self.front_steering_rate = 0.
      self.rear_steering_rate = 0.
      self.accel_driving_mode = 0
      self.accel_value = 0.
      self.brake_driving_mode = 0
      self.brake_value = 0.
      self.backup_brake_driving_mode = 0
      self.backup_brake_value = 0.
      self.epb_driving_mode = 0
      self.epb_level = 0
      self.gear_driving_mode = 0
      self.emergency_brake_enable = 0
      self.gear_location = 0
      self.speed = 0.
      self.acceleration = 0.
      self.turn_lamp_ctrl = 0
      self.high_beam_ctrl = 0
      self.low_beam_ctrl = 0
      self.horn_ctrl = 0
      self.front_wiper_ctrl = 0
      self.rear_wiper_ctrl = 0
      self.position_lamp_ctrl = 0
      self.front_fog_lamp_ctrl = 0
      self.rear_fog_lamp_ctrl = 0
      self.brake_lamp_ctrl = 0
      self.alarm_lamp_ctrl = 0
      self.lf_door_ctrl = 0
      self.rf_door_ctrl = 0
      self.lr_door_ctrl = 0
      self.rr_door_ctrl = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i4dididid3ibi2d15i().pack(_x.steer_driving_mode, _x.front_steering_target, _x.rear_steering_target, _x.front_steering_rate, _x.rear_steering_rate, _x.accel_driving_mode, _x.accel_value, _x.brake_driving_mode, _x.brake_value, _x.backup_brake_driving_mode, _x.backup_brake_value, _x.epb_driving_mode, _x.epb_level, _x.gear_driving_mode, _x.emergency_brake_enable, _x.gear_location, _x.speed, _x.acceleration, _x.turn_lamp_ctrl, _x.high_beam_ctrl, _x.low_beam_ctrl, _x.horn_ctrl, _x.front_wiper_ctrl, _x.rear_wiper_ctrl, _x.position_lamp_ctrl, _x.front_fog_lamp_ctrl, _x.rear_fog_lamp_ctrl, _x.brake_lamp_ctrl, _x.alarm_lamp_ctrl, _x.lf_door_ctrl, _x.rf_door_ctrl, _x.lr_door_ctrl, _x.rr_door_ctrl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 165
      (_x.steer_driving_mode, _x.front_steering_target, _x.rear_steering_target, _x.front_steering_rate, _x.rear_steering_rate, _x.accel_driving_mode, _x.accel_value, _x.brake_driving_mode, _x.brake_value, _x.backup_brake_driving_mode, _x.backup_brake_value, _x.epb_driving_mode, _x.epb_level, _x.gear_driving_mode, _x.emergency_brake_enable, _x.gear_location, _x.speed, _x.acceleration, _x.turn_lamp_ctrl, _x.high_beam_ctrl, _x.low_beam_ctrl, _x.horn_ctrl, _x.front_wiper_ctrl, _x.rear_wiper_ctrl, _x.position_lamp_ctrl, _x.front_fog_lamp_ctrl, _x.rear_fog_lamp_ctrl, _x.brake_lamp_ctrl, _x.alarm_lamp_ctrl, _x.lf_door_ctrl, _x.rf_door_ctrl, _x.lr_door_ctrl, _x.rr_door_ctrl,) = _get_struct_i4dididid3ibi2d15i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i4dididid3ibi2d15i().pack(_x.steer_driving_mode, _x.front_steering_target, _x.rear_steering_target, _x.front_steering_rate, _x.rear_steering_rate, _x.accel_driving_mode, _x.accel_value, _x.brake_driving_mode, _x.brake_value, _x.backup_brake_driving_mode, _x.backup_brake_value, _x.epb_driving_mode, _x.epb_level, _x.gear_driving_mode, _x.emergency_brake_enable, _x.gear_location, _x.speed, _x.acceleration, _x.turn_lamp_ctrl, _x.high_beam_ctrl, _x.low_beam_ctrl, _x.horn_ctrl, _x.front_wiper_ctrl, _x.rear_wiper_ctrl, _x.position_lamp_ctrl, _x.front_fog_lamp_ctrl, _x.rear_fog_lamp_ctrl, _x.brake_lamp_ctrl, _x.alarm_lamp_ctrl, _x.lf_door_ctrl, _x.rf_door_ctrl, _x.lr_door_ctrl, _x.rr_door_ctrl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 165
      (_x.steer_driving_mode, _x.front_steering_target, _x.rear_steering_target, _x.front_steering_rate, _x.rear_steering_rate, _x.accel_driving_mode, _x.accel_value, _x.brake_driving_mode, _x.brake_value, _x.backup_brake_driving_mode, _x.backup_brake_value, _x.epb_driving_mode, _x.epb_level, _x.gear_driving_mode, _x.emergency_brake_enable, _x.gear_location, _x.speed, _x.acceleration, _x.turn_lamp_ctrl, _x.high_beam_ctrl, _x.low_beam_ctrl, _x.horn_ctrl, _x.front_wiper_ctrl, _x.rear_wiper_ctrl, _x.position_lamp_ctrl, _x.front_fog_lamp_ctrl, _x.rear_fog_lamp_ctrl, _x.brake_lamp_ctrl, _x.alarm_lamp_ctrl, _x.lf_door_ctrl, _x.rf_door_ctrl, _x.lr_door_ctrl, _x.rr_door_ctrl,) = _get_struct_i4dididid3ibi2d15i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i4dididid3ibi2d15i = None
def _get_struct_i4dididid3ibi2d15i():
    global _struct_i4dididid3ibi2d15i
    if _struct_i4dididid3ibi2d15i is None:
        _struct_i4dididid3ibi2d15i = struct.Struct("<i4dididid3ibi2d15i")
    return _struct_i4dididid3ibi2d15i
