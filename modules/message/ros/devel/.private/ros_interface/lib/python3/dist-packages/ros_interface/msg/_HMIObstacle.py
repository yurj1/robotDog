# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/HMIObstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class HMIObstacle(genpy.Message):
  _md5sum = "4ab6a424b93e3cb3c742f3a87ab0d5da"
  _type = "ros_interface/HMIObstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32   id     # 障碍物id
Point3D   center_pos_vehicle     # 车辆坐标系下障碍物的中心位置
Point3D   center_pos_abs     # 世界坐标系下障碍物的中心位置
float64   theta_vehicle     # 车辆坐标系下障碍物的朝向
float64   theta_abs     # 世界坐标系下障碍物的朝向
float64   length     # 障碍物长度
float64   width     # 障碍物宽度
float64   height     # 障碍物高度
int32   type     # 障碍物类别： UNKNOWN = 0; UNKNOWN_MOVABLE = 1; UNKNOWN_UNMOVABLE = 2; PEDESTRIAN = 3; BICYCLE = 4; VEHICLE = 5;
float64   confidence     # 障碍物类别置信度
int32   confidence_type     # 障碍物置信度类别： CONFIDENCE_UNKNOWN = 0; CONFIDENCE_CNN = 1; CONFIDENCE_RADAR = 2;
int32   sub_type     # 障碍物类别： ST_UNKNOWN = 0; ST_UNKNOWN_MOVABLE = 1; ST_UNKNOWN_UNMOVABLE = 2; ST_CAR = 3; ST_VAN = 4; ST_TRUCK = 5; ST_BUS = 6; ST_CYCLIST = 7; ST_MOTORCYCLIST = 8; ST_TRICYCLIST = 9; ST_PEDESTRIAN = 10; ST_TRAFFICCONE = 11; ST_PILLAR = 12; ST_SPEED_BUMP = 13;
Point3D[] points #  
uint8   cipv_flag     # 障碍物状态标志（0-CIPV 1-CIPS 2-LPIHP 3-RPIHP 4-NONE）
int32   fusion_type     #  

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z
"""
  __slots__ = ['id','center_pos_vehicle','center_pos_abs','theta_vehicle','theta_abs','length','width','height','type','confidence','confidence_type','sub_type','points','cipv_flag','fusion_type']
  _slot_types = ['int32','ros_interface/Point3D','ros_interface/Point3D','float64','float64','float64','float64','float64','int32','float64','int32','int32','ros_interface/Point3D[]','uint8','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,center_pos_vehicle,center_pos_abs,theta_vehicle,theta_abs,length,width,height,type,confidence,confidence_type,sub_type,points,cipv_flag,fusion_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HMIObstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.center_pos_vehicle is None:
        self.center_pos_vehicle = ros_interface.msg.Point3D()
      if self.center_pos_abs is None:
        self.center_pos_abs = ros_interface.msg.Point3D()
      if self.theta_vehicle is None:
        self.theta_vehicle = 0.
      if self.theta_abs is None:
        self.theta_abs = 0.
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.type is None:
        self.type = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.confidence_type is None:
        self.confidence_type = 0
      if self.sub_type is None:
        self.sub_type = 0
      if self.points is None:
        self.points = []
      if self.cipv_flag is None:
        self.cipv_flag = 0
      if self.fusion_type is None:
        self.fusion_type = 0
    else:
      self.id = 0
      self.center_pos_vehicle = ros_interface.msg.Point3D()
      self.center_pos_abs = ros_interface.msg.Point3D()
      self.theta_vehicle = 0.
      self.theta_abs = 0.
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.type = 0
      self.confidence = 0.
      self.confidence_type = 0
      self.sub_type = 0
      self.points = []
      self.cipv_flag = 0
      self.fusion_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i11did2i().pack(_x.id, _x.center_pos_vehicle.x, _x.center_pos_vehicle.y, _x.center_pos_vehicle.z, _x.center_pos_abs.x, _x.center_pos_abs.y, _x.center_pos_abs.z, _x.theta_vehicle, _x.theta_abs, _x.length, _x.width, _x.height, _x.type, _x.confidence, _x.confidence_type, _x.sub_type))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.cipv_flag, _x.fusion_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center_pos_vehicle is None:
        self.center_pos_vehicle = ros_interface.msg.Point3D()
      if self.center_pos_abs is None:
        self.center_pos_abs = ros_interface.msg.Point3D()
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 112
      (_x.id, _x.center_pos_vehicle.x, _x.center_pos_vehicle.y, _x.center_pos_vehicle.z, _x.center_pos_abs.x, _x.center_pos_abs.y, _x.center_pos_abs.z, _x.theta_vehicle, _x.theta_abs, _x.length, _x.width, _x.height, _x.type, _x.confidence, _x.confidence_type, _x.sub_type,) = _get_struct_i11did2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.points.append(val1)
      _x = self
      start = end
      end += 5
      (_x.cipv_flag, _x.fusion_type,) = _get_struct_Bi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i11did2i().pack(_x.id, _x.center_pos_vehicle.x, _x.center_pos_vehicle.y, _x.center_pos_vehicle.z, _x.center_pos_abs.x, _x.center_pos_abs.y, _x.center_pos_abs.z, _x.theta_vehicle, _x.theta_abs, _x.length, _x.width, _x.height, _x.type, _x.confidence, _x.confidence_type, _x.sub_type))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.cipv_flag, _x.fusion_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center_pos_vehicle is None:
        self.center_pos_vehicle = ros_interface.msg.Point3D()
      if self.center_pos_abs is None:
        self.center_pos_abs = ros_interface.msg.Point3D()
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 112
      (_x.id, _x.center_pos_vehicle.x, _x.center_pos_vehicle.y, _x.center_pos_vehicle.z, _x.center_pos_abs.x, _x.center_pos_abs.y, _x.center_pos_abs.z, _x.theta_vehicle, _x.theta_abs, _x.length, _x.width, _x.height, _x.type, _x.confidence, _x.confidence_type, _x.sub_type,) = _get_struct_i11did2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.points.append(val1)
      _x = self
      start = end
      end += 5
      (_x.cipv_flag, _x.fusion_type,) = _get_struct_Bi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_i11did2i = None
def _get_struct_i11did2i():
    global _struct_i11did2i
    if _struct_i11did2i is None:
        _struct_i11did2i = struct.Struct("<i11did2i")
    return _struct_i11did2i
