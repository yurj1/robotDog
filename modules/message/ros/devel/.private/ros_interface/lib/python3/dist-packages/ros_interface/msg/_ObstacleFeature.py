# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/ObstacleFeature.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class ObstacleFeature(genpy.Message):
  _md5sum = "ac34bc04e5508d6fec4e09e859e6379b"
  _type = "ros_interface/ObstacleFeature"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32   obstacle_id     # Obstacle ID
Point3D   polygon_point     # 障碍物边框点列
Point3D   position     #  
Point3D   front_position     #  
Point3D   velocity     #  
Point3D   raw_velocity     # from perception
Point3D   acceleration     #  
float64   velocity_heading     #  
float64   speed     #  
float64   acc     #  
float64   theta     #  
float64   length     #  
float64   width     #  
float64   height     #  
float64   tracking_time     #  
float64   timestamp     #  
Point3D   t_position     #  
Point3D   t_velocity     # [deprecated = true]
float64   t_velocity_heading     # [deprecated = true]
float64   t_speed     # [deprecated = true]
Point3D   t_acceleration     # [deprecated = true]
float64   t_acc     # [deprecated = true]
bool   is_still     # [deprecated = false]
int32   type     # 感知到的障碍物类型         0-UNKNOWN, 1-UNKNOWN_MOVABLE, 2-UNKNOWN_UNMOVABLE, 3-PEDESTRIAN, 4-BICYCLE,     5-VEHICLE
float64   label_update_time_delta     #  
ObstaclePriority   priority     # CAUTION = 1; NORMAL = 2; IGNORE = 3;
bool   is_near_junction     #  
PredictionTrajectoryPoint[] future_trajectory_points # Obstacle ground-truth labels:
TrajectoryPointInPrediction[] short_term_predicted_trajectory_points # Obstacle short-term predicted trajectory points
TrajectoryInPrediction[] predicted_trajectory # Obstacle predicted trajectories
TrajectoryPointInPrediction[] adc_trajectory_point # ADC trajectory at the same frame

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/ObstaclePriority
int32   priority     # CAUTION = 1; NORMAL = 2; IGNORE = 3;

================================================================================
MSG: ros_interface/PredictionTrajectoryPoint
Point3D   predition_path_point     #  
float64   timestamp     #  

================================================================================
MSG: ros_interface/TrajectoryPointInPrediction
PathPoint   path_point     # path point
float64   v     # linear velocity
float64   a     # linear acceleration
float64   relative_time     # relative time from beginning of the trajectory

================================================================================
MSG: ros_interface/PathPoint
float64   x     # coordinates x
float64   y     # coordinates y
float64   z     # coordinates z
float64   theta     # direction on the x-y plane
float64   kappa     # curvature on the x-y planning
float64   s     # accumulated distance from beginning of the path
float64   dkappa     # derivative of kappa w.r.t s.
float64   ddkappa     # derivative of derivative of kappa w.r.t s.
float64   lane_id     # The lane ID where the path point is on
float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline
float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline

================================================================================
MSG: ros_interface/TrajectoryInPrediction
float64   probability     # probability of this trajectory
TrajectoryPoint[] trajectory_points #  

================================================================================
MSG: ros_interface/TrajectoryPoint
PathPoint   path_point     # path point
float64   v     # linear velocity
float64   a     # linear acceleration
float64   relative_time     # relative time from beginning of the trajectory
float64   da     # longitudinal jerk
bool   is_steer_valid     # 转向是否有效
float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis
float64   rear_steer     # 后轮转角
int32   gear     # 档位
"""
  __slots__ = ['obstacle_id','polygon_point','position','front_position','velocity','raw_velocity','acceleration','velocity_heading','speed','acc','theta','length','width','height','tracking_time','timestamp','t_position','t_velocity','t_velocity_heading','t_speed','t_acceleration','t_acc','is_still','type','label_update_time_delta','priority','is_near_junction','future_trajectory_points','short_term_predicted_trajectory_points','predicted_trajectory','adc_trajectory_point']
  _slot_types = ['int32','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','float64','float64','float64','float64','float64','float64','float64','float64','float64','ros_interface/Point3D','ros_interface/Point3D','float64','float64','ros_interface/Point3D','float64','bool','int32','float64','ros_interface/ObstaclePriority','bool','ros_interface/PredictionTrajectoryPoint[]','ros_interface/TrajectoryPointInPrediction[]','ros_interface/TrajectoryInPrediction[]','ros_interface/TrajectoryPointInPrediction[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obstacle_id,polygon_point,position,front_position,velocity,raw_velocity,acceleration,velocity_heading,speed,acc,theta,length,width,height,tracking_time,timestamp,t_position,t_velocity,t_velocity_heading,t_speed,t_acceleration,t_acc,is_still,type,label_update_time_delta,priority,is_near_junction,future_trajectory_points,short_term_predicted_trajectory_points,predicted_trajectory,adc_trajectory_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleFeature, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obstacle_id is None:
        self.obstacle_id = 0
      if self.polygon_point is None:
        self.polygon_point = ros_interface.msg.Point3D()
      if self.position is None:
        self.position = ros_interface.msg.Point3D()
      if self.front_position is None:
        self.front_position = ros_interface.msg.Point3D()
      if self.velocity is None:
        self.velocity = ros_interface.msg.Point3D()
      if self.raw_velocity is None:
        self.raw_velocity = ros_interface.msg.Point3D()
      if self.acceleration is None:
        self.acceleration = ros_interface.msg.Point3D()
      if self.velocity_heading is None:
        self.velocity_heading = 0.
      if self.speed is None:
        self.speed = 0.
      if self.acc is None:
        self.acc = 0.
      if self.theta is None:
        self.theta = 0.
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.tracking_time is None:
        self.tracking_time = 0.
      if self.timestamp is None:
        self.timestamp = 0.
      if self.t_position is None:
        self.t_position = ros_interface.msg.Point3D()
      if self.t_velocity is None:
        self.t_velocity = ros_interface.msg.Point3D()
      if self.t_velocity_heading is None:
        self.t_velocity_heading = 0.
      if self.t_speed is None:
        self.t_speed = 0.
      if self.t_acceleration is None:
        self.t_acceleration = ros_interface.msg.Point3D()
      if self.t_acc is None:
        self.t_acc = 0.
      if self.is_still is None:
        self.is_still = False
      if self.type is None:
        self.type = 0
      if self.label_update_time_delta is None:
        self.label_update_time_delta = 0.
      if self.priority is None:
        self.priority = ros_interface.msg.ObstaclePriority()
      if self.is_near_junction is None:
        self.is_near_junction = False
      if self.future_trajectory_points is None:
        self.future_trajectory_points = []
      if self.short_term_predicted_trajectory_points is None:
        self.short_term_predicted_trajectory_points = []
      if self.predicted_trajectory is None:
        self.predicted_trajectory = []
      if self.adc_trajectory_point is None:
        self.adc_trajectory_point = []
    else:
      self.obstacle_id = 0
      self.polygon_point = ros_interface.msg.Point3D()
      self.position = ros_interface.msg.Point3D()
      self.front_position = ros_interface.msg.Point3D()
      self.velocity = ros_interface.msg.Point3D()
      self.raw_velocity = ros_interface.msg.Point3D()
      self.acceleration = ros_interface.msg.Point3D()
      self.velocity_heading = 0.
      self.speed = 0.
      self.acc = 0.
      self.theta = 0.
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.tracking_time = 0.
      self.timestamp = 0.
      self.t_position = ros_interface.msg.Point3D()
      self.t_velocity = ros_interface.msg.Point3D()
      self.t_velocity_heading = 0.
      self.t_speed = 0.
      self.t_acceleration = ros_interface.msg.Point3D()
      self.t_acc = 0.
      self.is_still = False
      self.type = 0
      self.label_update_time_delta = 0.
      self.priority = ros_interface.msg.ObstaclePriority()
      self.is_near_junction = False
      self.future_trajectory_points = []
      self.short_term_predicted_trajectory_points = []
      self.predicted_trajectory = []
      self.adc_trajectory_point = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i39dBidiB().pack(_x.obstacle_id, _x.polygon_point.x, _x.polygon_point.y, _x.polygon_point.z, _x.position.x, _x.position.y, _x.position.z, _x.front_position.x, _x.front_position.y, _x.front_position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.raw_velocity.x, _x.raw_velocity.y, _x.raw_velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.velocity_heading, _x.speed, _x.acc, _x.theta, _x.length, _x.width, _x.height, _x.tracking_time, _x.timestamp, _x.t_position.x, _x.t_position.y, _x.t_position.z, _x.t_velocity.x, _x.t_velocity.y, _x.t_velocity.z, _x.t_velocity_heading, _x.t_speed, _x.t_acceleration.x, _x.t_acceleration.y, _x.t_acceleration.z, _x.t_acc, _x.is_still, _x.type, _x.label_update_time_delta, _x.priority.priority, _x.is_near_junction))
      length = len(self.future_trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.future_trajectory_points:
        _v1 = val1.predition_path_point
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.timestamp
        buff.write(_get_struct_d().pack(_x))
      length = len(self.short_term_predicted_trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.short_term_predicted_trajectory_points:
        _v2 = val1.path_point
        _x = _v2
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.v, _x.a, _x.relative_time))
      length = len(self.predicted_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.predicted_trajectory:
        _x = val1.probability
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_points:
          _v3 = val2.path_point
          _x = _v3
          buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
          _x = val2
          buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.adc_trajectory_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.adc_trajectory_point:
        _v4 = val1.path_point
        _x = _v4
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.v, _x.a, _x.relative_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.polygon_point is None:
        self.polygon_point = ros_interface.msg.Point3D()
      if self.position is None:
        self.position = ros_interface.msg.Point3D()
      if self.front_position is None:
        self.front_position = ros_interface.msg.Point3D()
      if self.velocity is None:
        self.velocity = ros_interface.msg.Point3D()
      if self.raw_velocity is None:
        self.raw_velocity = ros_interface.msg.Point3D()
      if self.acceleration is None:
        self.acceleration = ros_interface.msg.Point3D()
      if self.t_position is None:
        self.t_position = ros_interface.msg.Point3D()
      if self.t_velocity is None:
        self.t_velocity = ros_interface.msg.Point3D()
      if self.t_acceleration is None:
        self.t_acceleration = ros_interface.msg.Point3D()
      if self.priority is None:
        self.priority = ros_interface.msg.ObstaclePriority()
      if self.future_trajectory_points is None:
        self.future_trajectory_points = None
      if self.short_term_predicted_trajectory_points is None:
        self.short_term_predicted_trajectory_points = None
      if self.predicted_trajectory is None:
        self.predicted_trajectory = None
      if self.adc_trajectory_point is None:
        self.adc_trajectory_point = None
      end = 0
      _x = self
      start = end
      end += 334
      (_x.obstacle_id, _x.polygon_point.x, _x.polygon_point.y, _x.polygon_point.z, _x.position.x, _x.position.y, _x.position.z, _x.front_position.x, _x.front_position.y, _x.front_position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.raw_velocity.x, _x.raw_velocity.y, _x.raw_velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.velocity_heading, _x.speed, _x.acc, _x.theta, _x.length, _x.width, _x.height, _x.tracking_time, _x.timestamp, _x.t_position.x, _x.t_position.y, _x.t_position.z, _x.t_velocity.x, _x.t_velocity.y, _x.t_velocity.z, _x.t_velocity_heading, _x.t_speed, _x.t_acceleration.x, _x.t_acceleration.y, _x.t_acceleration.z, _x.t_acc, _x.is_still, _x.type, _x.label_update_time_delta, _x.priority.priority, _x.is_near_junction,) = _get_struct_i39dBidiB().unpack(str[start:end])
      self.is_still = bool(self.is_still)
      self.is_near_junction = bool(self.is_near_junction)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.future_trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.PredictionTrajectoryPoint()
        _v5 = val1.predition_path_point
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_d().unpack(str[start:end])
        self.future_trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.short_term_predicted_trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPointInPrediction()
        _v6 = val1.path_point
        _x = _v6
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.v, _x.a, _x.relative_time,) = _get_struct_3d().unpack(str[start:end])
        self.short_term_predicted_trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.predicted_trajectory = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryInPrediction()
        start = end
        end += 8
        (val1.probability,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryPoint()
          _v7 = val2.path_point
          _x = _v7
          start = end
          end += 88
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
          _x = val2
          start = end
          end += 53
          (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
          val2.is_steer_valid = bool(val2.is_steer_valid)
          val1.trajectory_points.append(val2)
        self.predicted_trajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adc_trajectory_point = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPointInPrediction()
        _v8 = val1.path_point
        _x = _v8
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.v, _x.a, _x.relative_time,) = _get_struct_3d().unpack(str[start:end])
        self.adc_trajectory_point.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i39dBidiB().pack(_x.obstacle_id, _x.polygon_point.x, _x.polygon_point.y, _x.polygon_point.z, _x.position.x, _x.position.y, _x.position.z, _x.front_position.x, _x.front_position.y, _x.front_position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.raw_velocity.x, _x.raw_velocity.y, _x.raw_velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.velocity_heading, _x.speed, _x.acc, _x.theta, _x.length, _x.width, _x.height, _x.tracking_time, _x.timestamp, _x.t_position.x, _x.t_position.y, _x.t_position.z, _x.t_velocity.x, _x.t_velocity.y, _x.t_velocity.z, _x.t_velocity_heading, _x.t_speed, _x.t_acceleration.x, _x.t_acceleration.y, _x.t_acceleration.z, _x.t_acc, _x.is_still, _x.type, _x.label_update_time_delta, _x.priority.priority, _x.is_near_junction))
      length = len(self.future_trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.future_trajectory_points:
        _v9 = val1.predition_path_point
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.timestamp
        buff.write(_get_struct_d().pack(_x))
      length = len(self.short_term_predicted_trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.short_term_predicted_trajectory_points:
        _v10 = val1.path_point
        _x = _v10
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.v, _x.a, _x.relative_time))
      length = len(self.predicted_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.predicted_trajectory:
        _x = val1.probability
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_points:
          _v11 = val2.path_point
          _x = _v11
          buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
          _x = val2
          buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.adc_trajectory_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.adc_trajectory_point:
        _v12 = val1.path_point
        _x = _v12
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.v, _x.a, _x.relative_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.polygon_point is None:
        self.polygon_point = ros_interface.msg.Point3D()
      if self.position is None:
        self.position = ros_interface.msg.Point3D()
      if self.front_position is None:
        self.front_position = ros_interface.msg.Point3D()
      if self.velocity is None:
        self.velocity = ros_interface.msg.Point3D()
      if self.raw_velocity is None:
        self.raw_velocity = ros_interface.msg.Point3D()
      if self.acceleration is None:
        self.acceleration = ros_interface.msg.Point3D()
      if self.t_position is None:
        self.t_position = ros_interface.msg.Point3D()
      if self.t_velocity is None:
        self.t_velocity = ros_interface.msg.Point3D()
      if self.t_acceleration is None:
        self.t_acceleration = ros_interface.msg.Point3D()
      if self.priority is None:
        self.priority = ros_interface.msg.ObstaclePriority()
      if self.future_trajectory_points is None:
        self.future_trajectory_points = None
      if self.short_term_predicted_trajectory_points is None:
        self.short_term_predicted_trajectory_points = None
      if self.predicted_trajectory is None:
        self.predicted_trajectory = None
      if self.adc_trajectory_point is None:
        self.adc_trajectory_point = None
      end = 0
      _x = self
      start = end
      end += 334
      (_x.obstacle_id, _x.polygon_point.x, _x.polygon_point.y, _x.polygon_point.z, _x.position.x, _x.position.y, _x.position.z, _x.front_position.x, _x.front_position.y, _x.front_position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.raw_velocity.x, _x.raw_velocity.y, _x.raw_velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.velocity_heading, _x.speed, _x.acc, _x.theta, _x.length, _x.width, _x.height, _x.tracking_time, _x.timestamp, _x.t_position.x, _x.t_position.y, _x.t_position.z, _x.t_velocity.x, _x.t_velocity.y, _x.t_velocity.z, _x.t_velocity_heading, _x.t_speed, _x.t_acceleration.x, _x.t_acceleration.y, _x.t_acceleration.z, _x.t_acc, _x.is_still, _x.type, _x.label_update_time_delta, _x.priority.priority, _x.is_near_junction,) = _get_struct_i39dBidiB().unpack(str[start:end])
      self.is_still = bool(self.is_still)
      self.is_near_junction = bool(self.is_near_junction)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.future_trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.PredictionTrajectoryPoint()
        _v13 = val1.predition_path_point
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_d().unpack(str[start:end])
        self.future_trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.short_term_predicted_trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPointInPrediction()
        _v14 = val1.path_point
        _x = _v14
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.v, _x.a, _x.relative_time,) = _get_struct_3d().unpack(str[start:end])
        self.short_term_predicted_trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.predicted_trajectory = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryInPrediction()
        start = end
        end += 8
        (val1.probability,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryPoint()
          _v15 = val2.path_point
          _x = _v15
          start = end
          end += 88
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
          _x = val2
          start = end
          end += 53
          (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
          val2.is_steer_valid = bool(val2.is_steer_valid)
          val1.trajectory_points.append(val2)
        self.predicted_trajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adc_trajectory_point = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPointInPrediction()
        _v16 = val1.path_point
        _x = _v16
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.v, _x.a, _x.relative_time,) = _get_struct_3d().unpack(str[start:end])
        self.adc_trajectory_point.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4dB2di = None
def _get_struct_4dB2di():
    global _struct_4dB2di
    if _struct_4dB2di is None:
        _struct_4dB2di = struct.Struct("<4dB2di")
    return _struct_4dB2di
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i39dBidiB = None
def _get_struct_i39dBidiB():
    global _struct_i39dBidiB
    if _struct_i39dBidiB is None:
        _struct_i39dBidiB = struct.Struct("<i39dBidiB")
    return _struct_i39dBidiB
