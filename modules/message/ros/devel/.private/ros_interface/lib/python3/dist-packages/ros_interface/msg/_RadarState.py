# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/RadarState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class RadarState(genpy.Message):
  _md5sum = "00e0b3643bf386c2d41f0895e61c5428"
  _type = "ros_interface/RadarState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8   sensor_id     #  
uint8   nvm_read_status     #  
uint8   nvm_write_status     #  
RadarStateError   radar_state_error     #  
RadarStateMode   radar_state_mode     #  
uint16   max_distance     #  
uint8   sort_index     #  
uint8   radar_power     #  
uint8   ctl_relay     #  
uint8   output_type     #  
uint8   send_quality     #  
uint8   send_extinfo     #  
uint8   motion_rx_state     #  
uint8   rcs_threshold     #  
uint8   connector_direction     #  
uint8   radar_position     #  
uint8   hw_error     #  

================================================================================
MSG: ros_interface/RadarStateError
uint8   persistent_error     #  
uint8   temporary_error     #  
uint8   interference_error     #  
uint8   temperature_error     #  
uint8   voltage_error     #  
uint8   block_error     #  
uint8   broadcast_error     #  
uint8   electric_axis_error     #  
uint8   config_error     #  
uint8   calibration_error     #  

================================================================================
MSG: ros_interface/RadarStateMode
uint8   can0_work_mode     # can0工作模式
uint8   can1_work_mode     # can1工作模式
uint8   dual_can_mode     # 双总线工作模式
uint8   timming_mode     # 计时模式
uint8   power_mode     # 电源模式
uint8   performance_mode     # 效能模式
"""
  __slots__ = ['sensor_id','nvm_read_status','nvm_write_status','radar_state_error','radar_state_mode','max_distance','sort_index','radar_power','ctl_relay','output_type','send_quality','send_extinfo','motion_rx_state','rcs_threshold','connector_direction','radar_position','hw_error']
  _slot_types = ['uint8','uint8','uint8','ros_interface/RadarStateError','ros_interface/RadarStateMode','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sensor_id,nvm_read_status,nvm_write_status,radar_state_error,radar_state_mode,max_distance,sort_index,radar_power,ctl_relay,output_type,send_quality,send_extinfo,motion_rx_state,rcs_threshold,connector_direction,radar_position,hw_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.nvm_read_status is None:
        self.nvm_read_status = 0
      if self.nvm_write_status is None:
        self.nvm_write_status = 0
      if self.radar_state_error is None:
        self.radar_state_error = ros_interface.msg.RadarStateError()
      if self.radar_state_mode is None:
        self.radar_state_mode = ros_interface.msg.RadarStateMode()
      if self.max_distance is None:
        self.max_distance = 0
      if self.sort_index is None:
        self.sort_index = 0
      if self.radar_power is None:
        self.radar_power = 0
      if self.ctl_relay is None:
        self.ctl_relay = 0
      if self.output_type is None:
        self.output_type = 0
      if self.send_quality is None:
        self.send_quality = 0
      if self.send_extinfo is None:
        self.send_extinfo = 0
      if self.motion_rx_state is None:
        self.motion_rx_state = 0
      if self.rcs_threshold is None:
        self.rcs_threshold = 0
      if self.connector_direction is None:
        self.connector_direction = 0
      if self.radar_position is None:
        self.radar_position = 0
      if self.hw_error is None:
        self.hw_error = 0
    else:
      self.sensor_id = 0
      self.nvm_read_status = 0
      self.nvm_write_status = 0
      self.radar_state_error = ros_interface.msg.RadarStateError()
      self.radar_state_mode = ros_interface.msg.RadarStateMode()
      self.max_distance = 0
      self.sort_index = 0
      self.radar_power = 0
      self.ctl_relay = 0
      self.output_type = 0
      self.send_quality = 0
      self.send_extinfo = 0
      self.motion_rx_state = 0
      self.rcs_threshold = 0
      self.connector_direction = 0
      self.radar_position = 0
      self.hw_error = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_19BH11B().pack(_x.sensor_id, _x.nvm_read_status, _x.nvm_write_status, _x.radar_state_error.persistent_error, _x.radar_state_error.temporary_error, _x.radar_state_error.interference_error, _x.radar_state_error.temperature_error, _x.radar_state_error.voltage_error, _x.radar_state_error.block_error, _x.radar_state_error.broadcast_error, _x.radar_state_error.electric_axis_error, _x.radar_state_error.config_error, _x.radar_state_error.calibration_error, _x.radar_state_mode.can0_work_mode, _x.radar_state_mode.can1_work_mode, _x.radar_state_mode.dual_can_mode, _x.radar_state_mode.timming_mode, _x.radar_state_mode.power_mode, _x.radar_state_mode.performance_mode, _x.max_distance, _x.sort_index, _x.radar_power, _x.ctl_relay, _x.output_type, _x.send_quality, _x.send_extinfo, _x.motion_rx_state, _x.rcs_threshold, _x.connector_direction, _x.radar_position, _x.hw_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.radar_state_error is None:
        self.radar_state_error = ros_interface.msg.RadarStateError()
      if self.radar_state_mode is None:
        self.radar_state_mode = ros_interface.msg.RadarStateMode()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.sensor_id, _x.nvm_read_status, _x.nvm_write_status, _x.radar_state_error.persistent_error, _x.radar_state_error.temporary_error, _x.radar_state_error.interference_error, _x.radar_state_error.temperature_error, _x.radar_state_error.voltage_error, _x.radar_state_error.block_error, _x.radar_state_error.broadcast_error, _x.radar_state_error.electric_axis_error, _x.radar_state_error.config_error, _x.radar_state_error.calibration_error, _x.radar_state_mode.can0_work_mode, _x.radar_state_mode.can1_work_mode, _x.radar_state_mode.dual_can_mode, _x.radar_state_mode.timming_mode, _x.radar_state_mode.power_mode, _x.radar_state_mode.performance_mode, _x.max_distance, _x.sort_index, _x.radar_power, _x.ctl_relay, _x.output_type, _x.send_quality, _x.send_extinfo, _x.motion_rx_state, _x.rcs_threshold, _x.connector_direction, _x.radar_position, _x.hw_error,) = _get_struct_19BH11B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_19BH11B().pack(_x.sensor_id, _x.nvm_read_status, _x.nvm_write_status, _x.radar_state_error.persistent_error, _x.radar_state_error.temporary_error, _x.radar_state_error.interference_error, _x.radar_state_error.temperature_error, _x.radar_state_error.voltage_error, _x.radar_state_error.block_error, _x.radar_state_error.broadcast_error, _x.radar_state_error.electric_axis_error, _x.radar_state_error.config_error, _x.radar_state_error.calibration_error, _x.radar_state_mode.can0_work_mode, _x.radar_state_mode.can1_work_mode, _x.radar_state_mode.dual_can_mode, _x.radar_state_mode.timming_mode, _x.radar_state_mode.power_mode, _x.radar_state_mode.performance_mode, _x.max_distance, _x.sort_index, _x.radar_power, _x.ctl_relay, _x.output_type, _x.send_quality, _x.send_extinfo, _x.motion_rx_state, _x.rcs_threshold, _x.connector_direction, _x.radar_position, _x.hw_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.radar_state_error is None:
        self.radar_state_error = ros_interface.msg.RadarStateError()
      if self.radar_state_mode is None:
        self.radar_state_mode = ros_interface.msg.RadarStateMode()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.sensor_id, _x.nvm_read_status, _x.nvm_write_status, _x.radar_state_error.persistent_error, _x.radar_state_error.temporary_error, _x.radar_state_error.interference_error, _x.radar_state_error.temperature_error, _x.radar_state_error.voltage_error, _x.radar_state_error.block_error, _x.radar_state_error.broadcast_error, _x.radar_state_error.electric_axis_error, _x.radar_state_error.config_error, _x.radar_state_error.calibration_error, _x.radar_state_mode.can0_work_mode, _x.radar_state_mode.can1_work_mode, _x.radar_state_mode.dual_can_mode, _x.radar_state_mode.timming_mode, _x.radar_state_mode.power_mode, _x.radar_state_mode.performance_mode, _x.max_distance, _x.sort_index, _x.radar_power, _x.ctl_relay, _x.output_type, _x.send_quality, _x.send_extinfo, _x.motion_rx_state, _x.rcs_threshold, _x.connector_direction, _x.radar_position, _x.hw_error,) = _get_struct_19BH11B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_19BH11B = None
def _get_struct_19BH11B():
    global _struct_19BH11B
    if _struct_19BH11B is None:
        _struct_19BH11B = struct.Struct("<19BH11B")
    return _struct_19BH11B
