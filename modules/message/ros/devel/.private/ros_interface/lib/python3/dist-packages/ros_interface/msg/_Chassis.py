# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/Chassis.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Chassis(genpy.Message):
  _md5sum = "1317f867e7ec2fbfa7cc1f5b9d053a00"
  _type = "ros_interface/Chassis"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
int32   moving_status     # 移动状态
int32   driving_mode     # 驾驶状态
int32   steer_driving_mode     # 线控转向驾驶模式
int32   steering_status     # 线控转向执行器状态
float64   front_steering_value     # 方向盘转角
float64   rear_steering_value     # 后轮转角
float64   steering_torque_nm     # 方向盘扭矩
float64   front_steering_rate_dps     # 方向盘转速
float64   rear_steering_rate_dps     # 方向盘转速
int32   accel_driving_mode     # 线控驱动驾驶模式
int32   accel_status     # 线控驱动状态
float64   accel_value     # 线控驱动值（油门值）
int32   brake_driving_mode     # 线控制动驾驶模式
int32   brake_status     # 线控制动状态
float64   brake_value     # 线控制动值（刹车值）
int32   backup_brake_driving_mode     # 备用线控制动驾驶模式
int32   backup_brake_status     # 备用线控制动状态
float64   backup_brake_value     # 备用线控制动值
int32   epb_driving_mode     # EPB驾驶模式
int32   epb_status     # EPB状态
int32   epb_level     # EPB档位
int32   engine_status     # 发动机状态
float64   engine_rpm     # 发动机转速
float64   engine_torque     # 发动机扭矩
float64   speed_mps     # 车速（m/s）
float64   odometer_m     # 里程(m)
int32   fuel_range_m     # 油表值
int32   gear_driving_mode     # 档位驾驶模式
int32   gear_status     # 档位状态
int32   gear_location     # 档位值
int32   driver_seat_belt     # 主驾驶位安全带状态
int32   high_beam_status     # 远光灯状态
int32   low_beam_status     # 近光灯状态
int32   horn_status     # 喇叭状态
int32   turn_lamp_status     # 转向灯状态
int32   front_wiper_status     # 前雨刮器状态
int32   rear_wiper_status     # 后雨刮器状态
int32   position_lamp_status     # 位置灯状态
int32   front_fog_lamp_status     # 前雾灯状态
int32   rear_fog_lamp_status     # 后雾灯状态
int32   brake_lamp_status     # 刹车灯状态
int32   alarm_lamp_status     # 报警灯状态
int32   lf_door_status     # 左前门状态
int32   rf_door_status     # 右前门状态
int32   lr_door_status     # 左后门状态
int32   rr_door_status     # 右后门状态
int32   rearview_mirror_status     # 后视镜状态
int32   trunk_status     # 后备箱盖状态
int32   engine_bay_door_status     # 发送机舱盖状态
int32   wheel_direction_rr     # 右后轮方向
float64   wheel_spd_rr     # 右后轮速
int32   wheel_direction_rl     # 左后轮方向
float64   wheel_spd_rl     # 左后轮值
int32   wheel_direction_fr     # 右前轮方向
float64   wheel_spd_fr     # 右前轮速
int32   wheel_direction_fl     # 左前轮方向
float64   wheel_spd_fl     # 左前轮速
int32   is_tire_pressure_ok     # 胎压是否正常
int32   is_tire_pressure_lf_valid     # 左前轮胎压是否有效
float64   tire_pressure_lf     # 左前轮胎压
int32   is_tire_pressure_rf_valid     # 右前轮胎压是否有效
float64   tire_pressure_rf     # 右前轮胎压
int32   is_tire_pressure_lr_valid     # 左后轮胎压是否有效
float64   tire_pressure_lr     # 左后轮胎压
int32   is_tire_pressure_rr_valid     # 右后轮胎压是否有效
float64   tire_pressure_rr     # 右后轮胎压
float64   battery_power_percentage     # 电池电量值
int32   air_bag_status     # 气囊状态
int32   charging_gun_status     # 充电枪状态
int32   vehicle_power_status     # 电量表状态
int32[] chassis_error_code # 底盘错误码

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','moving_status','driving_mode','steer_driving_mode','steering_status','front_steering_value','rear_steering_value','steering_torque_nm','front_steering_rate_dps','rear_steering_rate_dps','accel_driving_mode','accel_status','accel_value','brake_driving_mode','brake_status','brake_value','backup_brake_driving_mode','backup_brake_status','backup_brake_value','epb_driving_mode','epb_status','epb_level','engine_status','engine_rpm','engine_torque','speed_mps','odometer_m','fuel_range_m','gear_driving_mode','gear_status','gear_location','driver_seat_belt','high_beam_status','low_beam_status','horn_status','turn_lamp_status','front_wiper_status','rear_wiper_status','position_lamp_status','front_fog_lamp_status','rear_fog_lamp_status','brake_lamp_status','alarm_lamp_status','lf_door_status','rf_door_status','lr_door_status','rr_door_status','rearview_mirror_status','trunk_status','engine_bay_door_status','wheel_direction_rr','wheel_spd_rr','wheel_direction_rl','wheel_spd_rl','wheel_direction_fr','wheel_spd_fr','wheel_direction_fl','wheel_spd_fl','is_tire_pressure_ok','is_tire_pressure_lf_valid','tire_pressure_lf','is_tire_pressure_rf_valid','tire_pressure_rf','is_tire_pressure_lr_valid','tire_pressure_lr','is_tire_pressure_rr_valid','tire_pressure_rr','battery_power_percentage','air_bag_status','charging_gun_status','vehicle_power_status','chassis_error_code']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','float64','float64','float64','float64','float64','int32','int32','float64','int32','int32','float64','int32','int32','float64','int32','int32','int32','int32','float64','float64','float64','float64','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','float64','int32','float64','int32','float64','int32','float64','int32','int32','float64','int32','float64','int32','float64','int32','float64','float64','int32','int32','int32','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,moving_status,driving_mode,steer_driving_mode,steering_status,front_steering_value,rear_steering_value,steering_torque_nm,front_steering_rate_dps,rear_steering_rate_dps,accel_driving_mode,accel_status,accel_value,brake_driving_mode,brake_status,brake_value,backup_brake_driving_mode,backup_brake_status,backup_brake_value,epb_driving_mode,epb_status,epb_level,engine_status,engine_rpm,engine_torque,speed_mps,odometer_m,fuel_range_m,gear_driving_mode,gear_status,gear_location,driver_seat_belt,high_beam_status,low_beam_status,horn_status,turn_lamp_status,front_wiper_status,rear_wiper_status,position_lamp_status,front_fog_lamp_status,rear_fog_lamp_status,brake_lamp_status,alarm_lamp_status,lf_door_status,rf_door_status,lr_door_status,rr_door_status,rearview_mirror_status,trunk_status,engine_bay_door_status,wheel_direction_rr,wheel_spd_rr,wheel_direction_rl,wheel_spd_rl,wheel_direction_fr,wheel_spd_fr,wheel_direction_fl,wheel_spd_fl,is_tire_pressure_ok,is_tire_pressure_lf_valid,tire_pressure_lf,is_tire_pressure_rf_valid,tire_pressure_rf,is_tire_pressure_lr_valid,tire_pressure_lr,is_tire_pressure_rr_valid,tire_pressure_rr,battery_power_percentage,air_bag_status,charging_gun_status,vehicle_power_status,chassis_error_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Chassis, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.moving_status is None:
        self.moving_status = 0
      if self.driving_mode is None:
        self.driving_mode = 0
      if self.steer_driving_mode is None:
        self.steer_driving_mode = 0
      if self.steering_status is None:
        self.steering_status = 0
      if self.front_steering_value is None:
        self.front_steering_value = 0.
      if self.rear_steering_value is None:
        self.rear_steering_value = 0.
      if self.steering_torque_nm is None:
        self.steering_torque_nm = 0.
      if self.front_steering_rate_dps is None:
        self.front_steering_rate_dps = 0.
      if self.rear_steering_rate_dps is None:
        self.rear_steering_rate_dps = 0.
      if self.accel_driving_mode is None:
        self.accel_driving_mode = 0
      if self.accel_status is None:
        self.accel_status = 0
      if self.accel_value is None:
        self.accel_value = 0.
      if self.brake_driving_mode is None:
        self.brake_driving_mode = 0
      if self.brake_status is None:
        self.brake_status = 0
      if self.brake_value is None:
        self.brake_value = 0.
      if self.backup_brake_driving_mode is None:
        self.backup_brake_driving_mode = 0
      if self.backup_brake_status is None:
        self.backup_brake_status = 0
      if self.backup_brake_value is None:
        self.backup_brake_value = 0.
      if self.epb_driving_mode is None:
        self.epb_driving_mode = 0
      if self.epb_status is None:
        self.epb_status = 0
      if self.epb_level is None:
        self.epb_level = 0
      if self.engine_status is None:
        self.engine_status = 0
      if self.engine_rpm is None:
        self.engine_rpm = 0.
      if self.engine_torque is None:
        self.engine_torque = 0.
      if self.speed_mps is None:
        self.speed_mps = 0.
      if self.odometer_m is None:
        self.odometer_m = 0.
      if self.fuel_range_m is None:
        self.fuel_range_m = 0
      if self.gear_driving_mode is None:
        self.gear_driving_mode = 0
      if self.gear_status is None:
        self.gear_status = 0
      if self.gear_location is None:
        self.gear_location = 0
      if self.driver_seat_belt is None:
        self.driver_seat_belt = 0
      if self.high_beam_status is None:
        self.high_beam_status = 0
      if self.low_beam_status is None:
        self.low_beam_status = 0
      if self.horn_status is None:
        self.horn_status = 0
      if self.turn_lamp_status is None:
        self.turn_lamp_status = 0
      if self.front_wiper_status is None:
        self.front_wiper_status = 0
      if self.rear_wiper_status is None:
        self.rear_wiper_status = 0
      if self.position_lamp_status is None:
        self.position_lamp_status = 0
      if self.front_fog_lamp_status is None:
        self.front_fog_lamp_status = 0
      if self.rear_fog_lamp_status is None:
        self.rear_fog_lamp_status = 0
      if self.brake_lamp_status is None:
        self.brake_lamp_status = 0
      if self.alarm_lamp_status is None:
        self.alarm_lamp_status = 0
      if self.lf_door_status is None:
        self.lf_door_status = 0
      if self.rf_door_status is None:
        self.rf_door_status = 0
      if self.lr_door_status is None:
        self.lr_door_status = 0
      if self.rr_door_status is None:
        self.rr_door_status = 0
      if self.rearview_mirror_status is None:
        self.rearview_mirror_status = 0
      if self.trunk_status is None:
        self.trunk_status = 0
      if self.engine_bay_door_status is None:
        self.engine_bay_door_status = 0
      if self.wheel_direction_rr is None:
        self.wheel_direction_rr = 0
      if self.wheel_spd_rr is None:
        self.wheel_spd_rr = 0.
      if self.wheel_direction_rl is None:
        self.wheel_direction_rl = 0
      if self.wheel_spd_rl is None:
        self.wheel_spd_rl = 0.
      if self.wheel_direction_fr is None:
        self.wheel_direction_fr = 0
      if self.wheel_spd_fr is None:
        self.wheel_spd_fr = 0.
      if self.wheel_direction_fl is None:
        self.wheel_direction_fl = 0
      if self.wheel_spd_fl is None:
        self.wheel_spd_fl = 0.
      if self.is_tire_pressure_ok is None:
        self.is_tire_pressure_ok = 0
      if self.is_tire_pressure_lf_valid is None:
        self.is_tire_pressure_lf_valid = 0
      if self.tire_pressure_lf is None:
        self.tire_pressure_lf = 0.
      if self.is_tire_pressure_rf_valid is None:
        self.is_tire_pressure_rf_valid = 0
      if self.tire_pressure_rf is None:
        self.tire_pressure_rf = 0.
      if self.is_tire_pressure_lr_valid is None:
        self.is_tire_pressure_lr_valid = 0
      if self.tire_pressure_lr is None:
        self.tire_pressure_lr = 0.
      if self.is_tire_pressure_rr_valid is None:
        self.is_tire_pressure_rr_valid = 0
      if self.tire_pressure_rr is None:
        self.tire_pressure_rr = 0.
      if self.battery_power_percentage is None:
        self.battery_power_percentage = 0.
      if self.air_bag_status is None:
        self.air_bag_status = 0
      if self.charging_gun_status is None:
        self.charging_gun_status = 0
      if self.vehicle_power_status is None:
        self.vehicle_power_status = 0
      if self.chassis_error_code is None:
        self.chassis_error_code = []
    else:
      self.header = std_msgs.msg.Header()
      self.moving_status = 0
      self.driving_mode = 0
      self.steer_driving_mode = 0
      self.steering_status = 0
      self.front_steering_value = 0.
      self.rear_steering_value = 0.
      self.steering_torque_nm = 0.
      self.front_steering_rate_dps = 0.
      self.rear_steering_rate_dps = 0.
      self.accel_driving_mode = 0
      self.accel_status = 0
      self.accel_value = 0.
      self.brake_driving_mode = 0
      self.brake_status = 0
      self.brake_value = 0.
      self.backup_brake_driving_mode = 0
      self.backup_brake_status = 0
      self.backup_brake_value = 0.
      self.epb_driving_mode = 0
      self.epb_status = 0
      self.epb_level = 0
      self.engine_status = 0
      self.engine_rpm = 0.
      self.engine_torque = 0.
      self.speed_mps = 0.
      self.odometer_m = 0.
      self.fuel_range_m = 0
      self.gear_driving_mode = 0
      self.gear_status = 0
      self.gear_location = 0
      self.driver_seat_belt = 0
      self.high_beam_status = 0
      self.low_beam_status = 0
      self.horn_status = 0
      self.turn_lamp_status = 0
      self.front_wiper_status = 0
      self.rear_wiper_status = 0
      self.position_lamp_status = 0
      self.front_fog_lamp_status = 0
      self.rear_fog_lamp_status = 0
      self.brake_lamp_status = 0
      self.alarm_lamp_status = 0
      self.lf_door_status = 0
      self.rf_door_status = 0
      self.lr_door_status = 0
      self.rr_door_status = 0
      self.rearview_mirror_status = 0
      self.trunk_status = 0
      self.engine_bay_door_status = 0
      self.wheel_direction_rr = 0
      self.wheel_spd_rr = 0.
      self.wheel_direction_rl = 0
      self.wheel_spd_rl = 0.
      self.wheel_direction_fr = 0
      self.wheel_spd_fr = 0.
      self.wheel_direction_fl = 0
      self.wheel_spd_fl = 0.
      self.is_tire_pressure_ok = 0
      self.is_tire_pressure_lf_valid = 0
      self.tire_pressure_lf = 0.
      self.is_tire_pressure_rf_valid = 0
      self.tire_pressure_rf = 0.
      self.is_tire_pressure_lr_valid = 0
      self.tire_pressure_lr = 0.
      self.is_tire_pressure_rr_valid = 0
      self.tire_pressure_rr = 0.
      self.battery_power_percentage = 0.
      self.air_bag_status = 0
      self.charging_gun_status = 0
      self.vehicle_power_status = 0
      self.chassis_error_code = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4i5d2id2id2id4i4d24idididid2idididi2d3i().pack(_x.moving_status, _x.driving_mode, _x.steer_driving_mode, _x.steering_status, _x.front_steering_value, _x.rear_steering_value, _x.steering_torque_nm, _x.front_steering_rate_dps, _x.rear_steering_rate_dps, _x.accel_driving_mode, _x.accel_status, _x.accel_value, _x.brake_driving_mode, _x.brake_status, _x.brake_value, _x.backup_brake_driving_mode, _x.backup_brake_status, _x.backup_brake_value, _x.epb_driving_mode, _x.epb_status, _x.epb_level, _x.engine_status, _x.engine_rpm, _x.engine_torque, _x.speed_mps, _x.odometer_m, _x.fuel_range_m, _x.gear_driving_mode, _x.gear_status, _x.gear_location, _x.driver_seat_belt, _x.high_beam_status, _x.low_beam_status, _x.horn_status, _x.turn_lamp_status, _x.front_wiper_status, _x.rear_wiper_status, _x.position_lamp_status, _x.front_fog_lamp_status, _x.rear_fog_lamp_status, _x.brake_lamp_status, _x.alarm_lamp_status, _x.lf_door_status, _x.rf_door_status, _x.lr_door_status, _x.rr_door_status, _x.rearview_mirror_status, _x.trunk_status, _x.engine_bay_door_status, _x.wheel_direction_rr, _x.wheel_spd_rr, _x.wheel_direction_rl, _x.wheel_spd_rl, _x.wheel_direction_fr, _x.wheel_spd_fr, _x.wheel_direction_fl, _x.wheel_spd_fl, _x.is_tire_pressure_ok, _x.is_tire_pressure_lf_valid, _x.tire_pressure_lf, _x.is_tire_pressure_rf_valid, _x.tire_pressure_rf, _x.is_tire_pressure_lr_valid, _x.tire_pressure_lr, _x.is_tire_pressure_rr_valid, _x.tire_pressure_rr, _x.battery_power_percentage, _x.air_bag_status, _x.charging_gun_status, _x.vehicle_power_status))
      length = len(self.chassis_error_code)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.chassis_error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 364
      (_x.moving_status, _x.driving_mode, _x.steer_driving_mode, _x.steering_status, _x.front_steering_value, _x.rear_steering_value, _x.steering_torque_nm, _x.front_steering_rate_dps, _x.rear_steering_rate_dps, _x.accel_driving_mode, _x.accel_status, _x.accel_value, _x.brake_driving_mode, _x.brake_status, _x.brake_value, _x.backup_brake_driving_mode, _x.backup_brake_status, _x.backup_brake_value, _x.epb_driving_mode, _x.epb_status, _x.epb_level, _x.engine_status, _x.engine_rpm, _x.engine_torque, _x.speed_mps, _x.odometer_m, _x.fuel_range_m, _x.gear_driving_mode, _x.gear_status, _x.gear_location, _x.driver_seat_belt, _x.high_beam_status, _x.low_beam_status, _x.horn_status, _x.turn_lamp_status, _x.front_wiper_status, _x.rear_wiper_status, _x.position_lamp_status, _x.front_fog_lamp_status, _x.rear_fog_lamp_status, _x.brake_lamp_status, _x.alarm_lamp_status, _x.lf_door_status, _x.rf_door_status, _x.lr_door_status, _x.rr_door_status, _x.rearview_mirror_status, _x.trunk_status, _x.engine_bay_door_status, _x.wheel_direction_rr, _x.wheel_spd_rr, _x.wheel_direction_rl, _x.wheel_spd_rl, _x.wheel_direction_fr, _x.wheel_spd_fr, _x.wheel_direction_fl, _x.wheel_spd_fl, _x.is_tire_pressure_ok, _x.is_tire_pressure_lf_valid, _x.tire_pressure_lf, _x.is_tire_pressure_rf_valid, _x.tire_pressure_rf, _x.is_tire_pressure_lr_valid, _x.tire_pressure_lr, _x.is_tire_pressure_rr_valid, _x.tire_pressure_rr, _x.battery_power_percentage, _x.air_bag_status, _x.charging_gun_status, _x.vehicle_power_status,) = _get_struct_4i5d2id2id2id4i4d24idididid2idididi2d3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.chassis_error_code = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4i5d2id2id2id4i4d24idididid2idididi2d3i().pack(_x.moving_status, _x.driving_mode, _x.steer_driving_mode, _x.steering_status, _x.front_steering_value, _x.rear_steering_value, _x.steering_torque_nm, _x.front_steering_rate_dps, _x.rear_steering_rate_dps, _x.accel_driving_mode, _x.accel_status, _x.accel_value, _x.brake_driving_mode, _x.brake_status, _x.brake_value, _x.backup_brake_driving_mode, _x.backup_brake_status, _x.backup_brake_value, _x.epb_driving_mode, _x.epb_status, _x.epb_level, _x.engine_status, _x.engine_rpm, _x.engine_torque, _x.speed_mps, _x.odometer_m, _x.fuel_range_m, _x.gear_driving_mode, _x.gear_status, _x.gear_location, _x.driver_seat_belt, _x.high_beam_status, _x.low_beam_status, _x.horn_status, _x.turn_lamp_status, _x.front_wiper_status, _x.rear_wiper_status, _x.position_lamp_status, _x.front_fog_lamp_status, _x.rear_fog_lamp_status, _x.brake_lamp_status, _x.alarm_lamp_status, _x.lf_door_status, _x.rf_door_status, _x.lr_door_status, _x.rr_door_status, _x.rearview_mirror_status, _x.trunk_status, _x.engine_bay_door_status, _x.wheel_direction_rr, _x.wheel_spd_rr, _x.wheel_direction_rl, _x.wheel_spd_rl, _x.wheel_direction_fr, _x.wheel_spd_fr, _x.wheel_direction_fl, _x.wheel_spd_fl, _x.is_tire_pressure_ok, _x.is_tire_pressure_lf_valid, _x.tire_pressure_lf, _x.is_tire_pressure_rf_valid, _x.tire_pressure_rf, _x.is_tire_pressure_lr_valid, _x.tire_pressure_lr, _x.is_tire_pressure_rr_valid, _x.tire_pressure_rr, _x.battery_power_percentage, _x.air_bag_status, _x.charging_gun_status, _x.vehicle_power_status))
      length = len(self.chassis_error_code)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.chassis_error_code.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 364
      (_x.moving_status, _x.driving_mode, _x.steer_driving_mode, _x.steering_status, _x.front_steering_value, _x.rear_steering_value, _x.steering_torque_nm, _x.front_steering_rate_dps, _x.rear_steering_rate_dps, _x.accel_driving_mode, _x.accel_status, _x.accel_value, _x.brake_driving_mode, _x.brake_status, _x.brake_value, _x.backup_brake_driving_mode, _x.backup_brake_status, _x.backup_brake_value, _x.epb_driving_mode, _x.epb_status, _x.epb_level, _x.engine_status, _x.engine_rpm, _x.engine_torque, _x.speed_mps, _x.odometer_m, _x.fuel_range_m, _x.gear_driving_mode, _x.gear_status, _x.gear_location, _x.driver_seat_belt, _x.high_beam_status, _x.low_beam_status, _x.horn_status, _x.turn_lamp_status, _x.front_wiper_status, _x.rear_wiper_status, _x.position_lamp_status, _x.front_fog_lamp_status, _x.rear_fog_lamp_status, _x.brake_lamp_status, _x.alarm_lamp_status, _x.lf_door_status, _x.rf_door_status, _x.lr_door_status, _x.rr_door_status, _x.rearview_mirror_status, _x.trunk_status, _x.engine_bay_door_status, _x.wheel_direction_rr, _x.wheel_spd_rr, _x.wheel_direction_rl, _x.wheel_spd_rl, _x.wheel_direction_fr, _x.wheel_spd_fr, _x.wheel_direction_fl, _x.wheel_spd_fl, _x.is_tire_pressure_ok, _x.is_tire_pressure_lf_valid, _x.tire_pressure_lf, _x.is_tire_pressure_rf_valid, _x.tire_pressure_rf, _x.is_tire_pressure_lr_valid, _x.tire_pressure_lr, _x.is_tire_pressure_rr_valid, _x.tire_pressure_rr, _x.battery_power_percentage, _x.air_bag_status, _x.charging_gun_status, _x.vehicle_power_status,) = _get_struct_4i5d2id2id2id4i4d24idididid2idididi2d3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.chassis_error_code = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4i5d2id2id2id4i4d24idididid2idididi2d3i = None
def _get_struct_4i5d2id2id2id4i4d24idididid2idididi2d3i():
    global _struct_4i5d2id2id2id4i4d24idididid2idididi2d3i
    if _struct_4i5d2id2id2id4i4d24idididid2idididi2d3i is None:
        _struct_4i5d2id2id2id4i4d24idididid2idididi2d3i = struct.Struct("<4i5d2id2id2id4i4d24idididid2idididi2d3i")
    return _struct_4i5d2id2id2id4i4d24idididid2idididi2d3i
