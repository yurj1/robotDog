# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/SotifMonitorResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class SotifMonitorResult(genpy.Message):
  _md5sum = "cfcbcab73f775f6e6285221c4193ca0a"
  _type = "ros_interface/SotifMonitorResult"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
Region[] region_value # 区域态势
Grid[] grid_map # 栅格地图

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/Region
int32   name_region     # 前后左右区域
float64   score     # 车辆前后左右的区域打分获得的分值(0-100表示逐步危险程度)
int32   rank_risk     # 危险程度(0-3四级划分，不同分级对应不同驾驶处理策略)
Point3D[] region_polygon # 世界坐标系下的区域多边形

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/Grid
float64   x     # 世界坐标系下的x
float64   y     # 世界坐标系下的y
SLPoint   sl_point     # Frenet坐标系下的x
float64   yaw     #  
float64   potential     # 势场值
int32   region_id     # 区域编号

================================================================================
MSG: ros_interface/SLPoint
float64   s     # 纵向位移
float64   l     # 横向位移
"""
  __slots__ = ['header','region_value','grid_map']
  _slot_types = ['std_msgs/Header','ros_interface/Region[]','ros_interface/Grid[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,region_value,grid_map

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SotifMonitorResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.region_value is None:
        self.region_value = []
      if self.grid_map is None:
        self.grid_map = []
    else:
      self.header = std_msgs.msg.Header()
      self.region_value = []
      self.grid_map = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.region_value)
      buff.write(_struct_I.pack(length))
      for val1 in self.region_value:
        _x = val1
        buff.write(_get_struct_idi().pack(_x.name_region, _x.score, _x.rank_risk))
        length = len(val1.region_polygon)
        buff.write(_struct_I.pack(length))
        for val2 in val1.region_polygon:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.grid_map)
      buff.write(_struct_I.pack(length))
      for val1 in self.grid_map:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v1 = val1.sl_point
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.s, _x.l))
        _x = val1
        buff.write(_get_struct_2di().pack(_x.yaw, _x.potential, _x.region_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.region_value is None:
        self.region_value = None
      if self.grid_map is None:
        self.grid_map = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.region_value = []
      for i in range(0, length):
        val1 = ros_interface.msg.Region()
        _x = val1
        start = end
        end += 16
        (_x.name_region, _x.score, _x.rank_risk,) = _get_struct_idi().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.region_polygon = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.region_polygon.append(val2)
        self.region_value.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grid_map = []
      for i in range(0, length):
        val1 = ros_interface.msg.Grid()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v2 = val1.sl_point
        _x = _v2
        start = end
        end += 16
        (_x.s, _x.l,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.yaw, _x.potential, _x.region_id,) = _get_struct_2di().unpack(str[start:end])
        self.grid_map.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.region_value)
      buff.write(_struct_I.pack(length))
      for val1 in self.region_value:
        _x = val1
        buff.write(_get_struct_idi().pack(_x.name_region, _x.score, _x.rank_risk))
        length = len(val1.region_polygon)
        buff.write(_struct_I.pack(length))
        for val2 in val1.region_polygon:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.grid_map)
      buff.write(_struct_I.pack(length))
      for val1 in self.grid_map:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v3 = val1.sl_point
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.s, _x.l))
        _x = val1
        buff.write(_get_struct_2di().pack(_x.yaw, _x.potential, _x.region_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.region_value is None:
        self.region_value = None
      if self.grid_map is None:
        self.grid_map = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.region_value = []
      for i in range(0, length):
        val1 = ros_interface.msg.Region()
        _x = val1
        start = end
        end += 16
        (_x.name_region, _x.score, _x.rank_risk,) = _get_struct_idi().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.region_polygon = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.region_polygon.append(val2)
        self.region_value.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grid_map = []
      for i in range(0, length):
        val1 = ros_interface.msg.Grid()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v4 = val1.sl_point
        _x = _v4
        start = end
        end += 16
        (_x.s, _x.l,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.yaw, _x.potential, _x.region_id,) = _get_struct_2di().unpack(str[start:end])
        self.grid_map.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2di = None
def _get_struct_2di():
    global _struct_2di
    if _struct_2di is None:
        _struct_2di = struct.Struct("<2di")
    return _struct_2di
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_idi = None
def _get_struct_idi():
    global _struct_idi
    if _struct_idi is None:
        _struct_idi = struct.Struct("<idi")
    return _struct_idi
