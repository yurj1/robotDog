# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/PlanningAnalysis.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class PlanningAnalysis(genpy.Message):
  _md5sum = "4cd0efdc9d0d12fea998f6cce3e1e4d3"
  _type = "ros_interface/PlanningAnalysis"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
float64   frame_update_time     # frame update计算时间
float64   generator_time     # 轨迹生成 计算时间
TimeConsume[] evaluator_time # 轨迹评估计算时间
float64   selector_time     # 轨迹选择计算时间
PlanningParkingDebug   planning_parking_debug     # planning泊车调试消息
float64   dis_to_center_line     # 车辆距离车道中心线的垂直距离
float64   diff_to_velocity     # 目标速度与规划速度之差
float64   referencline_kappa     # 参考线曲率

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/TimeConsume
string   name     #  
float64   time_consume     #  

================================================================================
MSG: ros_interface/PlanningParkingDebug
Polygon2D[] vehicle_preiew_polygon # 车辆预测多边形
Polygon2D[] obstacles_polygon # 障碍物多边形
PathPoint[] path_points # 轨迹点
float64   lat_error     # 横向误差
float64   lon_error     # 纵向误差
float64   yaw_error     # 角度误差(度)
Point2dList[] obstacles_vec #  
TrajectoryPoint[] warm_start_traj #  
TrajectoryPoint[] smoothed_traj_stage1 #  
TrajectoryPoint[] smoothed_traj_stage2 #  
Trajectory   reference_line     #  
Trajectory[] trajectory_array # 轨迹簇
Trajectory   optimal_coarse_trajectory     #  
Trajectory   optimal_smooth_trajectory     #  
float64   hybrid_a_star_map_time     #  
float64   hybrid_a_star_heuristic_time     #  
float64   hybrid_a_star_rs_time     #  
float64   hybrid_a_star_total_time     #  
float64   ias_collision_avoidance_time     #  
float64   ias_path_smooth_time     #  
float64   ias_speed_smooth_time     #  
float64   ias_total_time     #  
float64   samping_trajectory_time     #  
bool   is_replan     #  
string   replan_reason     #  
float64   replan_time     #  
int32   replan_num     #  
int32   optimizer_thread_counter     #  
int32   replan_by_context_update_counter     #  
int32   replan_by_large_error_counter     #  
int32   parking_type     #  
int32   moves_counter     # 揉库次数
float64   remain_distance     # 剩余距离
float64   distance_to_leader_obj     # 距离最近障碍物距离
int32   state     #  

================================================================================
MSG: ros_interface/Polygon2D
int32   coordinate_system     # 坐标系
Point2D[] points # 二维点集

================================================================================
MSG: ros_interface/Point2D
float64   x     # 位置坐标x
float64   y     # 位置坐标y

================================================================================
MSG: ros_interface/PathPoint
float64   x     # coordinates x
float64   y     # coordinates y
float64   z     # coordinates z
float64   theta     # direction on the x-y plane
float64   kappa     # curvature on the x-y planning
float64   s     # accumulated distance from beginning of the path
float64   dkappa     # derivative of kappa w.r.t s.
float64   ddkappa     # derivative of derivative of kappa w.r.t s.
float64   lane_id     # The lane ID where the path point is on
float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline
float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline

================================================================================
MSG: ros_interface/Point2dList
Point2D[] point2d_list #  

================================================================================
MSG: ros_interface/TrajectoryPoint
PathPoint   path_point     # path point
float64   v     # linear velocity
float64   a     # linear acceleration
float64   relative_time     # relative time from beginning of the trajectory
float64   da     # longitudinal jerk
bool   is_steer_valid     # 转向是否有效
float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis
float64   rear_steer     # 后轮转角
int32   gear     # 档位

================================================================================
MSG: ros_interface/Trajectory
string   name     # 轨迹名称
TrajectoryPoint[] trajectory_points # 轨迹点
"""
  __slots__ = ['header','frame_update_time','generator_time','evaluator_time','selector_time','planning_parking_debug','dis_to_center_line','diff_to_velocity','referencline_kappa']
  _slot_types = ['std_msgs/Header','float64','float64','ros_interface/TimeConsume[]','float64','ros_interface/PlanningParkingDebug','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_update_time,generator_time,evaluator_time,selector_time,planning_parking_debug,dis_to_center_line,diff_to_velocity,referencline_kappa

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningAnalysis, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_update_time is None:
        self.frame_update_time = 0.
      if self.generator_time is None:
        self.generator_time = 0.
      if self.evaluator_time is None:
        self.evaluator_time = []
      if self.selector_time is None:
        self.selector_time = 0.
      if self.planning_parking_debug is None:
        self.planning_parking_debug = ros_interface.msg.PlanningParkingDebug()
      if self.dis_to_center_line is None:
        self.dis_to_center_line = 0.
      if self.diff_to_velocity is None:
        self.diff_to_velocity = 0.
      if self.referencline_kappa is None:
        self.referencline_kappa = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.frame_update_time = 0.
      self.generator_time = 0.
      self.evaluator_time = []
      self.selector_time = 0.
      self.planning_parking_debug = ros_interface.msg.PlanningParkingDebug()
      self.dis_to_center_line = 0.
      self.diff_to_velocity = 0.
      self.referencline_kappa = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.frame_update_time, _x.generator_time))
      length = len(self.evaluator_time)
      buff.write(_struct_I.pack(length))
      for val1 in self.evaluator_time:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.time_consume
        buff.write(_get_struct_d().pack(_x))
      _x = self.selector_time
      buff.write(_get_struct_d().pack(_x))
      length = len(self.planning_parking_debug.vehicle_preiew_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.vehicle_preiew_polygon:
        _x = val1.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.planning_parking_debug.obstacles_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.obstacles_polygon:
        _x = val1.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.planning_parking_debug.path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.path_points:
        _x = val1
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
      _x = self
      buff.write(_get_struct_3d().pack(_x.planning_parking_debug.lat_error, _x.planning_parking_debug.lon_error, _x.planning_parking_debug.yaw_error))
      length = len(self.planning_parking_debug.obstacles_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.obstacles_vec:
        length = len(val1.point2d_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.point2d_list:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.planning_parking_debug.warm_start_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.warm_start_traj:
        _v1 = val1.path_point
        _x = _v1
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.planning_parking_debug.smoothed_traj_stage1)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.smoothed_traj_stage1:
        _v2 = val1.path_point
        _x = _v2
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.planning_parking_debug.smoothed_traj_stage2)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.smoothed_traj_stage2:
        _v3 = val1.path_point
        _x = _v3
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.planning_parking_debug.reference_line.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_parking_debug.reference_line.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.reference_line.trajectory_points:
        _v4 = val1.path_point
        _x = _v4
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.planning_parking_debug.trajectory_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.trajectory_array:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_points:
          _v5 = val2.path_point
          _x = _v5
          buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
          _x = val2
          buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.planning_parking_debug.optimal_coarse_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_parking_debug.optimal_coarse_trajectory.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.optimal_coarse_trajectory.trajectory_points:
        _v6 = val1.path_point
        _x = _v6
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.planning_parking_debug.optimal_smooth_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_parking_debug.optimal_smooth_trajectory.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.optimal_smooth_trajectory.trajectory_points:
        _v7 = val1.path_point
        _x = _v7
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self
      buff.write(_get_struct_9dB().pack(_x.planning_parking_debug.hybrid_a_star_map_time, _x.planning_parking_debug.hybrid_a_star_heuristic_time, _x.planning_parking_debug.hybrid_a_star_rs_time, _x.planning_parking_debug.hybrid_a_star_total_time, _x.planning_parking_debug.ias_collision_avoidance_time, _x.planning_parking_debug.ias_path_smooth_time, _x.planning_parking_debug.ias_speed_smooth_time, _x.planning_parking_debug.ias_total_time, _x.planning_parking_debug.samping_trajectory_time, _x.planning_parking_debug.is_replan))
      _x = self.planning_parking_debug.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d6i2di3d().pack(_x.planning_parking_debug.replan_time, _x.planning_parking_debug.replan_num, _x.planning_parking_debug.optimizer_thread_counter, _x.planning_parking_debug.replan_by_context_update_counter, _x.planning_parking_debug.replan_by_large_error_counter, _x.planning_parking_debug.parking_type, _x.planning_parking_debug.moves_counter, _x.planning_parking_debug.remain_distance, _x.planning_parking_debug.distance_to_leader_obj, _x.planning_parking_debug.state, _x.dis_to_center_line, _x.diff_to_velocity, _x.referencline_kappa))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.evaluator_time is None:
        self.evaluator_time = None
      if self.planning_parking_debug is None:
        self.planning_parking_debug = ros_interface.msg.PlanningParkingDebug()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.frame_update_time, _x.generator_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.evaluator_time = []
      for i in range(0, length):
        val1 = ros_interface.msg.TimeConsume()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 8
        (val1.time_consume,) = _get_struct_d().unpack(str[start:end])
        self.evaluator_time.append(val1)
      start = end
      end += 8
      (self.selector_time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.vehicle_preiew_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Polygon2D()
        start = end
        end += 4
        (val1.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.planning_parking_debug.vehicle_preiew_polygon.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.obstacles_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Polygon2D()
        start = end
        end += 4
        (val1.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.planning_parking_debug.obstacles_polygon.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.path_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.PathPoint()
        _x = val1
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        self.planning_parking_debug.path_points.append(val1)
      _x = self
      start = end
      end += 24
      (_x.planning_parking_debug.lat_error, _x.planning_parking_debug.lon_error, _x.planning_parking_debug.yaw_error,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.obstacles_vec = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point2dList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.point2d_list = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.point2d_list.append(val2)
        self.planning_parking_debug.obstacles_vec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.warm_start_traj = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v8 = val1.path_point
        _x = _v8
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.warm_start_traj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.smoothed_traj_stage1 = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v9 = val1.path_point
        _x = _v9
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.smoothed_traj_stage1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.smoothed_traj_stage2 = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v10 = val1.path_point
        _x = _v10
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.smoothed_traj_stage2.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_parking_debug.reference_line.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_parking_debug.reference_line.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.reference_line.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v11 = val1.path_point
        _x = _v11
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.reference_line.trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.trajectory_array = []
      for i in range(0, length):
        val1 = ros_interface.msg.Trajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryPoint()
          _v12 = val2.path_point
          _x = _v12
          start = end
          end += 88
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
          _x = val2
          start = end
          end += 53
          (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
          val2.is_steer_valid = bool(val2.is_steer_valid)
          val1.trajectory_points.append(val2)
        self.planning_parking_debug.trajectory_array.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_parking_debug.optimal_coarse_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_parking_debug.optimal_coarse_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.optimal_coarse_trajectory.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v13 = val1.path_point
        _x = _v13
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.optimal_coarse_trajectory.trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_parking_debug.optimal_smooth_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_parking_debug.optimal_smooth_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.optimal_smooth_trajectory.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v14 = val1.path_point
        _x = _v14
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.optimal_smooth_trajectory.trajectory_points.append(val1)
      _x = self
      start = end
      end += 73
      (_x.planning_parking_debug.hybrid_a_star_map_time, _x.planning_parking_debug.hybrid_a_star_heuristic_time, _x.planning_parking_debug.hybrid_a_star_rs_time, _x.planning_parking_debug.hybrid_a_star_total_time, _x.planning_parking_debug.ias_collision_avoidance_time, _x.planning_parking_debug.ias_path_smooth_time, _x.planning_parking_debug.ias_speed_smooth_time, _x.planning_parking_debug.ias_total_time, _x.planning_parking_debug.samping_trajectory_time, _x.planning_parking_debug.is_replan,) = _get_struct_9dB().unpack(str[start:end])
      self.planning_parking_debug.is_replan = bool(self.planning_parking_debug.is_replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_parking_debug.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_parking_debug.replan_reason = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.planning_parking_debug.replan_time, _x.planning_parking_debug.replan_num, _x.planning_parking_debug.optimizer_thread_counter, _x.planning_parking_debug.replan_by_context_update_counter, _x.planning_parking_debug.replan_by_large_error_counter, _x.planning_parking_debug.parking_type, _x.planning_parking_debug.moves_counter, _x.planning_parking_debug.remain_distance, _x.planning_parking_debug.distance_to_leader_obj, _x.planning_parking_debug.state, _x.dis_to_center_line, _x.diff_to_velocity, _x.referencline_kappa,) = _get_struct_d6i2di3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.frame_update_time, _x.generator_time))
      length = len(self.evaluator_time)
      buff.write(_struct_I.pack(length))
      for val1 in self.evaluator_time:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.time_consume
        buff.write(_get_struct_d().pack(_x))
      _x = self.selector_time
      buff.write(_get_struct_d().pack(_x))
      length = len(self.planning_parking_debug.vehicle_preiew_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.vehicle_preiew_polygon:
        _x = val1.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.planning_parking_debug.obstacles_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.obstacles_polygon:
        _x = val1.coordinate_system
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.planning_parking_debug.path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.path_points:
        _x = val1
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
      _x = self
      buff.write(_get_struct_3d().pack(_x.planning_parking_debug.lat_error, _x.planning_parking_debug.lon_error, _x.planning_parking_debug.yaw_error))
      length = len(self.planning_parking_debug.obstacles_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.obstacles_vec:
        length = len(val1.point2d_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.point2d_list:
          _x = val2
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.planning_parking_debug.warm_start_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.warm_start_traj:
        _v15 = val1.path_point
        _x = _v15
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.planning_parking_debug.smoothed_traj_stage1)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.smoothed_traj_stage1:
        _v16 = val1.path_point
        _x = _v16
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.planning_parking_debug.smoothed_traj_stage2)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.smoothed_traj_stage2:
        _v17 = val1.path_point
        _x = _v17
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.planning_parking_debug.reference_line.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_parking_debug.reference_line.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.reference_line.trajectory_points:
        _v18 = val1.path_point
        _x = _v18
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      length = len(self.planning_parking_debug.trajectory_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.trajectory_array:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.trajectory_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_points:
          _v19 = val2.path_point
          _x = _v19
          buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
          _x = val2
          buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.planning_parking_debug.optimal_coarse_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_parking_debug.optimal_coarse_trajectory.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.optimal_coarse_trajectory.trajectory_points:
        _v20 = val1.path_point
        _x = _v20
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self.planning_parking_debug.optimal_smooth_trajectory.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_parking_debug.optimal_smooth_trajectory.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_parking_debug.optimal_smooth_trajectory.trajectory_points:
        _v21 = val1.path_point
        _x = _v21
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self
      buff.write(_get_struct_9dB().pack(_x.planning_parking_debug.hybrid_a_star_map_time, _x.planning_parking_debug.hybrid_a_star_heuristic_time, _x.planning_parking_debug.hybrid_a_star_rs_time, _x.planning_parking_debug.hybrid_a_star_total_time, _x.planning_parking_debug.ias_collision_avoidance_time, _x.planning_parking_debug.ias_path_smooth_time, _x.planning_parking_debug.ias_speed_smooth_time, _x.planning_parking_debug.ias_total_time, _x.planning_parking_debug.samping_trajectory_time, _x.planning_parking_debug.is_replan))
      _x = self.planning_parking_debug.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d6i2di3d().pack(_x.planning_parking_debug.replan_time, _x.planning_parking_debug.replan_num, _x.planning_parking_debug.optimizer_thread_counter, _x.planning_parking_debug.replan_by_context_update_counter, _x.planning_parking_debug.replan_by_large_error_counter, _x.planning_parking_debug.parking_type, _x.planning_parking_debug.moves_counter, _x.planning_parking_debug.remain_distance, _x.planning_parking_debug.distance_to_leader_obj, _x.planning_parking_debug.state, _x.dis_to_center_line, _x.diff_to_velocity, _x.referencline_kappa))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.evaluator_time is None:
        self.evaluator_time = None
      if self.planning_parking_debug is None:
        self.planning_parking_debug = ros_interface.msg.PlanningParkingDebug()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.frame_update_time, _x.generator_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.evaluator_time = []
      for i in range(0, length):
        val1 = ros_interface.msg.TimeConsume()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 8
        (val1.time_consume,) = _get_struct_d().unpack(str[start:end])
        self.evaluator_time.append(val1)
      start = end
      end += 8
      (self.selector_time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.vehicle_preiew_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Polygon2D()
        start = end
        end += 4
        (val1.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.planning_parking_debug.vehicle_preiew_polygon.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.obstacles_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Polygon2D()
        start = end
        end += 4
        (val1.coordinate_system,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.points.append(val2)
        self.planning_parking_debug.obstacles_polygon.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.path_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.PathPoint()
        _x = val1
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        self.planning_parking_debug.path_points.append(val1)
      _x = self
      start = end
      end += 24
      (_x.planning_parking_debug.lat_error, _x.planning_parking_debug.lon_error, _x.planning_parking_debug.yaw_error,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.obstacles_vec = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point2dList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.point2d_list = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point2D()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          val1.point2d_list.append(val2)
        self.planning_parking_debug.obstacles_vec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.warm_start_traj = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v22 = val1.path_point
        _x = _v22
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.warm_start_traj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.smoothed_traj_stage1 = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v23 = val1.path_point
        _x = _v23
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.smoothed_traj_stage1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.smoothed_traj_stage2 = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v24 = val1.path_point
        _x = _v24
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.smoothed_traj_stage2.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_parking_debug.reference_line.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_parking_debug.reference_line.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.reference_line.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v25 = val1.path_point
        _x = _v25
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.reference_line.trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.trajectory_array = []
      for i in range(0, length):
        val1 = ros_interface.msg.Trajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_points = []
        for i in range(0, length):
          val2 = ros_interface.msg.TrajectoryPoint()
          _v26 = val2.path_point
          _x = _v26
          start = end
          end += 88
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
          _x = val2
          start = end
          end += 53
          (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
          val2.is_steer_valid = bool(val2.is_steer_valid)
          val1.trajectory_points.append(val2)
        self.planning_parking_debug.trajectory_array.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_parking_debug.optimal_coarse_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_parking_debug.optimal_coarse_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.optimal_coarse_trajectory.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v27 = val1.path_point
        _x = _v27
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.optimal_coarse_trajectory.trajectory_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_parking_debug.optimal_smooth_trajectory.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_parking_debug.optimal_smooth_trajectory.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_parking_debug.optimal_smooth_trajectory.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v28 = val1.path_point
        _x = _v28
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.planning_parking_debug.optimal_smooth_trajectory.trajectory_points.append(val1)
      _x = self
      start = end
      end += 73
      (_x.planning_parking_debug.hybrid_a_star_map_time, _x.planning_parking_debug.hybrid_a_star_heuristic_time, _x.planning_parking_debug.hybrid_a_star_rs_time, _x.planning_parking_debug.hybrid_a_star_total_time, _x.planning_parking_debug.ias_collision_avoidance_time, _x.planning_parking_debug.ias_path_smooth_time, _x.planning_parking_debug.ias_speed_smooth_time, _x.planning_parking_debug.ias_total_time, _x.planning_parking_debug.samping_trajectory_time, _x.planning_parking_debug.is_replan,) = _get_struct_9dB().unpack(str[start:end])
      self.planning_parking_debug.is_replan = bool(self.planning_parking_debug.is_replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_parking_debug.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_parking_debug.replan_reason = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.planning_parking_debug.replan_time, _x.planning_parking_debug.replan_num, _x.planning_parking_debug.optimizer_thread_counter, _x.planning_parking_debug.replan_by_context_update_counter, _x.planning_parking_debug.replan_by_large_error_counter, _x.planning_parking_debug.parking_type, _x.planning_parking_debug.moves_counter, _x.planning_parking_debug.remain_distance, _x.planning_parking_debug.distance_to_leader_obj, _x.planning_parking_debug.state, _x.dis_to_center_line, _x.diff_to_velocity, _x.referencline_kappa,) = _get_struct_d6i2di3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4dB2di = None
def _get_struct_4dB2di():
    global _struct_4dB2di
    if _struct_4dB2di is None:
        _struct_4dB2di = struct.Struct("<4dB2di")
    return _struct_4dB2di
_struct_9dB = None
def _get_struct_9dB():
    global _struct_9dB
    if _struct_9dB is None:
        _struct_9dB = struct.Struct("<9dB")
    return _struct_9dB
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d6i2di3d = None
def _get_struct_d6i2di3d():
    global _struct_d6i2di3d
    if _struct_d6i2di3d is None:
        _struct_d6i2di3d = struct.Struct("<d6i2di3d")
    return _struct_d6i2di3d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
