# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/ParkingInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class ParkingInfo(genpy.Message):
  _md5sum = "3b0489ffb7cd5f3eeb8bca19f9864670"
  _type = "ros_interface/ParkingInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # timestamp is included in header
int32   parking_space_id     # 停车位id
int32   parking_type     # PARKING_TYPE=0//无效泊车 PARKING_TYPE=1//水平泊车 PARKING_TYPE=2//垂直泊车 PARKING_TYPE=3//倾斜泊车
int32   parking_status     # PARKING_ENABLE=0//可泊 PARKING_DISENABLE=1//不可泊 PARKING_NONOPTIONAL=2//不可选
float64   confidence     # 车位置信度
Point3D   center_point_of_parking     # 世界坐标系下停车位中心点
float64   theta     # 世界坐标系下的夹角（单位rad），车位出口与正东方向夹角
float64   width     # 停车位宽（单位m）
float64   length     # 停车位长单位m）
float64   yaw_offset     # 停车位角度偏移量（倾斜车位），倾斜车位与道路边线夹角,(单位m）
Polygon3D   polygon     # 世界坐标系下的车位多边形
int32   sensor_id     # 车位数据来自相机id 0-front_center相机 1-front_left相机 2-front_right相机 3-left_front相机 4-left_back右后相机 5-right_front相机 6-right_back相机 7-back相机 8-相机融合
bool   is_lane_width_valid     # 车道宽度是否有效
float64   lane_width     # 泊车可用(双)车道宽度
ParkingStopper[] parking_stoppers # 车位内部的限位器数组
int32   parking_direction_type     #   DIR_INVALID = 0,   LEFT = 1,   UP = 2,   RIGHT = 3,   DOWN = 4,
int32   left_occupied_status     # 0-unknown 未知，1-empty 空闲，2-occupied 被占用
int32   right_occupied_status     # 0-unknown 未知，1-empty 空闲，2-occupied 被占用
int32   parking_source_type     # 0-线车位， 1-空间车位， 2-融合车位

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/Polygon3D
int32   coordinate_system     # 坐标系
Point3D[] points # 三维点集

================================================================================
MSG: ros_interface/ParkingStopper
Header   header     # timestamp is  included in header
Point3D   center_point_vehicle     # 车辆坐标系下限位器中心点坐标
Point3D   center_point_abs     # 绝对坐标系下限位器中心点坐标
Point3D[] stopper_points_vehicle # 车辆坐标系下限位器关键点
Point3D[] stopper_points_abs # 绝对坐标系下限位器关键点
"""
  __slots__ = ['header','parking_space_id','parking_type','parking_status','confidence','center_point_of_parking','theta','width','length','yaw_offset','polygon','sensor_id','is_lane_width_valid','lane_width','parking_stoppers','parking_direction_type','left_occupied_status','right_occupied_status','parking_source_type']
  _slot_types = ['std_msgs/Header','int32','int32','int32','float64','ros_interface/Point3D','float64','float64','float64','float64','ros_interface/Polygon3D','int32','bool','float64','ros_interface/ParkingStopper[]','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,parking_space_id,parking_type,parking_status,confidence,center_point_of_parking,theta,width,length,yaw_offset,polygon,sensor_id,is_lane_width_valid,lane_width,parking_stoppers,parking_direction_type,left_occupied_status,right_occupied_status,parking_source_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParkingInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parking_space_id is None:
        self.parking_space_id = 0
      if self.parking_type is None:
        self.parking_type = 0
      if self.parking_status is None:
        self.parking_status = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.center_point_of_parking is None:
        self.center_point_of_parking = ros_interface.msg.Point3D()
      if self.theta is None:
        self.theta = 0.
      if self.width is None:
        self.width = 0.
      if self.length is None:
        self.length = 0.
      if self.yaw_offset is None:
        self.yaw_offset = 0.
      if self.polygon is None:
        self.polygon = ros_interface.msg.Polygon3D()
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.is_lane_width_valid is None:
        self.is_lane_width_valid = False
      if self.lane_width is None:
        self.lane_width = 0.
      if self.parking_stoppers is None:
        self.parking_stoppers = []
      if self.parking_direction_type is None:
        self.parking_direction_type = 0
      if self.left_occupied_status is None:
        self.left_occupied_status = 0
      if self.right_occupied_status is None:
        self.right_occupied_status = 0
      if self.parking_source_type is None:
        self.parking_source_type = 0
    else:
      self.header = std_msgs.msg.Header()
      self.parking_space_id = 0
      self.parking_type = 0
      self.parking_status = 0
      self.confidence = 0.
      self.center_point_of_parking = ros_interface.msg.Point3D()
      self.theta = 0.
      self.width = 0.
      self.length = 0.
      self.yaw_offset = 0.
      self.polygon = ros_interface.msg.Polygon3D()
      self.sensor_id = 0
      self.is_lane_width_valid = False
      self.lane_width = 0.
      self.parking_stoppers = []
      self.parking_direction_type = 0
      self.left_occupied_status = 0
      self.right_occupied_status = 0
      self.parking_source_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i8di().pack(_x.parking_space_id, _x.parking_type, _x.parking_status, _x.confidence, _x.center_point_of_parking.x, _x.center_point_of_parking.y, _x.center_point_of_parking.z, _x.theta, _x.width, _x.length, _x.yaw_offset, _x.polygon.coordinate_system))
      length = len(self.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.polygon.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_iBd().pack(_x.sensor_id, _x.is_lane_width_valid, _x.lane_width))
      length = len(self.parking_stoppers)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_stoppers:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.center_point_vehicle
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.center_point_abs
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.stopper_points_vehicle)
        buff.write(_struct_I.pack(length))
        for val2 in val1.stopper_points_vehicle:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.stopper_points_abs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.stopper_points_abs:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_4i().pack(_x.parking_direction_type, _x.left_occupied_status, _x.right_occupied_status, _x.parking_source_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.center_point_of_parking is None:
        self.center_point_of_parking = ros_interface.msg.Point3D()
      if self.polygon is None:
        self.polygon = ros_interface.msg.Polygon3D()
      if self.parking_stoppers is None:
        self.parking_stoppers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.parking_space_id, _x.parking_type, _x.parking_status, _x.confidence, _x.center_point_of_parking.x, _x.center_point_of_parking.y, _x.center_point_of_parking.z, _x.theta, _x.width, _x.length, _x.yaw_offset, _x.polygon.coordinate_system,) = _get_struct_3i8di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polygon.points = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.polygon.points.append(val1)
      _x = self
      start = end
      end += 13
      (_x.sensor_id, _x.is_lane_width_valid, _x.lane_width,) = _get_struct_iBd().unpack(str[start:end])
      self.is_lane_width_valid = bool(self.is_lane_width_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_stoppers = []
      for i in range(0, length):
        val1 = ros_interface.msg.ParkingStopper()
        _v5 = val1.header
        start = end
        end += 4
        (_v5.seq,) = _get_struct_I().unpack(str[start:end])
        _v6 = _v5.stamp
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v5.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v5.frame_id = str[start:end]
        _v7 = val1.center_point_vehicle
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.center_point_abs
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.stopper_points_vehicle = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.stopper_points_vehicle.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.stopper_points_abs = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.stopper_points_abs.append(val2)
        self.parking_stoppers.append(val1)
      _x = self
      start = end
      end += 16
      (_x.parking_direction_type, _x.left_occupied_status, _x.right_occupied_status, _x.parking_source_type,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i8di().pack(_x.parking_space_id, _x.parking_type, _x.parking_status, _x.confidence, _x.center_point_of_parking.x, _x.center_point_of_parking.y, _x.center_point_of_parking.z, _x.theta, _x.width, _x.length, _x.yaw_offset, _x.polygon.coordinate_system))
      length = len(self.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.polygon.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_iBd().pack(_x.sensor_id, _x.is_lane_width_valid, _x.lane_width))
      length = len(self.parking_stoppers)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_stoppers:
        _v9 = val1.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v11 = val1.center_point_vehicle
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.center_point_abs
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.stopper_points_vehicle)
        buff.write(_struct_I.pack(length))
        for val2 in val1.stopper_points_vehicle:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.stopper_points_abs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.stopper_points_abs:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_4i().pack(_x.parking_direction_type, _x.left_occupied_status, _x.right_occupied_status, _x.parking_source_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.center_point_of_parking is None:
        self.center_point_of_parking = ros_interface.msg.Point3D()
      if self.polygon is None:
        self.polygon = ros_interface.msg.Polygon3D()
      if self.parking_stoppers is None:
        self.parking_stoppers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.parking_space_id, _x.parking_type, _x.parking_status, _x.confidence, _x.center_point_of_parking.x, _x.center_point_of_parking.y, _x.center_point_of_parking.z, _x.theta, _x.width, _x.length, _x.yaw_offset, _x.polygon.coordinate_system,) = _get_struct_3i8di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polygon.points = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.polygon.points.append(val1)
      _x = self
      start = end
      end += 13
      (_x.sensor_id, _x.is_lane_width_valid, _x.lane_width,) = _get_struct_iBd().unpack(str[start:end])
      self.is_lane_width_valid = bool(self.is_lane_width_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_stoppers = []
      for i in range(0, length):
        val1 = ros_interface.msg.ParkingStopper()
        _v13 = val1.header
        start = end
        end += 4
        (_v13.seq,) = _get_struct_I().unpack(str[start:end])
        _v14 = _v13.stamp
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v13.frame_id = str[start:end]
        _v15 = val1.center_point_vehicle
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.center_point_abs
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.stopper_points_vehicle = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.stopper_points_vehicle.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.stopper_points_abs = []
        for i in range(0, length):
          val2 = ros_interface.msg.Point3D()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.stopper_points_abs.append(val2)
        self.parking_stoppers.append(val1)
      _x = self
      start = end
      end += 16
      (_x.parking_direction_type, _x.left_occupied_status, _x.right_occupied_status, _x.parking_source_type,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i8di = None
def _get_struct_3i8di():
    global _struct_3i8di
    if _struct_3i8di is None:
        _struct_3i8di = struct.Struct("<3i8di")
    return _struct_3i8di
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_iBd = None
def _get_struct_iBd():
    global _struct_iBd
    if _struct_iBd is None:
        _struct_iBd = struct.Struct("<iBd")
    return _struct_iBd
