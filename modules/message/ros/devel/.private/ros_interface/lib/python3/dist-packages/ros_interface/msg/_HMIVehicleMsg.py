# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/HMIVehicleMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class HMIVehicleMsg(genpy.Message):
  _md5sum = "406f4c0f16a35ecb30b22550fabf5c9f"
  _type = "ros_interface/HMIVehicleMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
int32   driving_mode     # 驾驶状态
int32   gear_location     # 档位值
float64   steering_value     # 方向盘转角
float64   accel_value     # 线控驱动值（油门值）
float64   brake_value     # 线控制动值（刹车值）
float64   speed_mps     # 车速（m/s）
PointLLH   position     # 经纬度高程
PointENU   utm_position     # 相对参考点xyz坐标
float64   pitch     # 方向(单位弧度，-π～π,正东:0, 逆时针。都满足右手定则)
float64   roll     #  
float64   heading     #  
int32   rtk_flag     # RTK标志值
float64   origin_lat     # // 参考点纬度 GCJ-02格式
float64   origin_lon     # // 参考点经度 GCJ-02格式
float64   current_ins_yaw     #  
int32   auto_safe     # //  安全驾驶0:正常 1:左前车门没关 2:右前车门没关 3:左后车门没关 4:右后车门没关 5:未系安全带 6: 未打开反观镜 7:车辆未静止
float64   battery_power_percentage     # 电池电量值
int32   charging_gun_status     # 充电枪状态
int32[] chassis_error_code # 底盘错误码
int32   brake_lamp_status     # 刹车灯状态
int32   turn_lamp_status     # 转向灯状态
PointENU   mercator_position     # 转坐标系后的参考点

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/PointLLH
float64   lon     # Longitude in degrees, ranging from -180 to 180.
float64   lat     # Latitude in degrees, ranging from -90 to 90.
float64   height     # WGS-84 ellipsoid height in meters.

================================================================================
MSG: ros_interface/PointENU
float64   x     # East from the origin, in meters.
float64   y     # North from the origin, in meters.
float64   z     # Up from the WGS-84 ellipsoid, in meters.
"""
  __slots__ = ['header','driving_mode','gear_location','steering_value','accel_value','brake_value','speed_mps','position','utm_position','pitch','roll','heading','rtk_flag','origin_lat','origin_lon','current_ins_yaw','auto_safe','battery_power_percentage','charging_gun_status','chassis_error_code','brake_lamp_status','turn_lamp_status','mercator_position']
  _slot_types = ['std_msgs/Header','int32','int32','float64','float64','float64','float64','ros_interface/PointLLH','ros_interface/PointENU','float64','float64','float64','int32','float64','float64','float64','int32','float64','int32','int32[]','int32','int32','ros_interface/PointENU']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,driving_mode,gear_location,steering_value,accel_value,brake_value,speed_mps,position,utm_position,pitch,roll,heading,rtk_flag,origin_lat,origin_lon,current_ins_yaw,auto_safe,battery_power_percentage,charging_gun_status,chassis_error_code,brake_lamp_status,turn_lamp_status,mercator_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HMIVehicleMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.driving_mode is None:
        self.driving_mode = 0
      if self.gear_location is None:
        self.gear_location = 0
      if self.steering_value is None:
        self.steering_value = 0.
      if self.accel_value is None:
        self.accel_value = 0.
      if self.brake_value is None:
        self.brake_value = 0.
      if self.speed_mps is None:
        self.speed_mps = 0.
      if self.position is None:
        self.position = ros_interface.msg.PointLLH()
      if self.utm_position is None:
        self.utm_position = ros_interface.msg.PointENU()
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.heading is None:
        self.heading = 0.
      if self.rtk_flag is None:
        self.rtk_flag = 0
      if self.origin_lat is None:
        self.origin_lat = 0.
      if self.origin_lon is None:
        self.origin_lon = 0.
      if self.current_ins_yaw is None:
        self.current_ins_yaw = 0.
      if self.auto_safe is None:
        self.auto_safe = 0
      if self.battery_power_percentage is None:
        self.battery_power_percentage = 0.
      if self.charging_gun_status is None:
        self.charging_gun_status = 0
      if self.chassis_error_code is None:
        self.chassis_error_code = []
      if self.brake_lamp_status is None:
        self.brake_lamp_status = 0
      if self.turn_lamp_status is None:
        self.turn_lamp_status = 0
      if self.mercator_position is None:
        self.mercator_position = ros_interface.msg.PointENU()
    else:
      self.header = std_msgs.msg.Header()
      self.driving_mode = 0
      self.gear_location = 0
      self.steering_value = 0.
      self.accel_value = 0.
      self.brake_value = 0.
      self.speed_mps = 0.
      self.position = ros_interface.msg.PointLLH()
      self.utm_position = ros_interface.msg.PointENU()
      self.pitch = 0.
      self.roll = 0.
      self.heading = 0.
      self.rtk_flag = 0
      self.origin_lat = 0.
      self.origin_lon = 0.
      self.current_ins_yaw = 0.
      self.auto_safe = 0
      self.battery_power_percentage = 0.
      self.charging_gun_status = 0
      self.chassis_error_code = []
      self.brake_lamp_status = 0
      self.turn_lamp_status = 0
      self.mercator_position = ros_interface.msg.PointENU()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i13di3didi().pack(_x.driving_mode, _x.gear_location, _x.steering_value, _x.accel_value, _x.brake_value, _x.speed_mps, _x.position.lon, _x.position.lat, _x.position.height, _x.utm_position.x, _x.utm_position.y, _x.utm_position.z, _x.pitch, _x.roll, _x.heading, _x.rtk_flag, _x.origin_lat, _x.origin_lon, _x.current_ins_yaw, _x.auto_safe, _x.battery_power_percentage, _x.charging_gun_status))
      length = len(self.chassis_error_code)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.chassis_error_code))
      _x = self
      buff.write(_get_struct_2i3d().pack(_x.brake_lamp_status, _x.turn_lamp_status, _x.mercator_position.x, _x.mercator_position.y, _x.mercator_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = ros_interface.msg.PointLLH()
      if self.utm_position is None:
        self.utm_position = ros_interface.msg.PointENU()
      if self.mercator_position is None:
        self.mercator_position = ros_interface.msg.PointENU()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 156
      (_x.driving_mode, _x.gear_location, _x.steering_value, _x.accel_value, _x.brake_value, _x.speed_mps, _x.position.lon, _x.position.lat, _x.position.height, _x.utm_position.x, _x.utm_position.y, _x.utm_position.z, _x.pitch, _x.roll, _x.heading, _x.rtk_flag, _x.origin_lat, _x.origin_lon, _x.current_ins_yaw, _x.auto_safe, _x.battery_power_percentage, _x.charging_gun_status,) = _get_struct_2i13di3didi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.chassis_error_code = s.unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.brake_lamp_status, _x.turn_lamp_status, _x.mercator_position.x, _x.mercator_position.y, _x.mercator_position.z,) = _get_struct_2i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i13di3didi().pack(_x.driving_mode, _x.gear_location, _x.steering_value, _x.accel_value, _x.brake_value, _x.speed_mps, _x.position.lon, _x.position.lat, _x.position.height, _x.utm_position.x, _x.utm_position.y, _x.utm_position.z, _x.pitch, _x.roll, _x.heading, _x.rtk_flag, _x.origin_lat, _x.origin_lon, _x.current_ins_yaw, _x.auto_safe, _x.battery_power_percentage, _x.charging_gun_status))
      length = len(self.chassis_error_code)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.chassis_error_code.tostring())
      _x = self
      buff.write(_get_struct_2i3d().pack(_x.brake_lamp_status, _x.turn_lamp_status, _x.mercator_position.x, _x.mercator_position.y, _x.mercator_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = ros_interface.msg.PointLLH()
      if self.utm_position is None:
        self.utm_position = ros_interface.msg.PointENU()
      if self.mercator_position is None:
        self.mercator_position = ros_interface.msg.PointENU()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 156
      (_x.driving_mode, _x.gear_location, _x.steering_value, _x.accel_value, _x.brake_value, _x.speed_mps, _x.position.lon, _x.position.lat, _x.position.height, _x.utm_position.x, _x.utm_position.y, _x.utm_position.z, _x.pitch, _x.roll, _x.heading, _x.rtk_flag, _x.origin_lat, _x.origin_lon, _x.current_ins_yaw, _x.auto_safe, _x.battery_power_percentage, _x.charging_gun_status,) = _get_struct_2i13di3didi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.chassis_error_code = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 32
      (_x.brake_lamp_status, _x.turn_lamp_status, _x.mercator_position.x, _x.mercator_position.y, _x.mercator_position.z,) = _get_struct_2i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i13di3didi = None
def _get_struct_2i13di3didi():
    global _struct_2i13di3didi
    if _struct_2i13di3didi is None:
        _struct_2i13di3didi = struct.Struct("<2i13di3didi")
    return _struct_2i13di3didi
_struct_2i3d = None
def _get_struct_2i3d():
    global _struct_2i3d
    if _struct_2i3d is None:
        _struct_2i3d = struct.Struct("<2i3d")
    return _struct_2i3d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
