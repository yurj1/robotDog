# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/RoutingRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class RoutingRequest(genpy.Message):
  _md5sum = "1771a80ac13a976ae23dbca9cd7f5386"
  _type = "ros_interface/RoutingRequest"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # timestamp is included in header
string   request_source     # 发起请求的来源名称
int8   request_type     # REQUEST_TYPE=0//无效 REQUEST_TYPE=1//正常路由 REQUEST_TYPE=2//泊车路由
int16   num_of_kp     # 关键点数量
KeyPoint[] key_point_list # 关键点列表，第一个为起点，最后一个为终点，中间为途经点

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/KeyPoint
int16   id     # 关键点id
float64   latitude     # 关键点纬度
float64   longitude     # 关键点经度
float64   ele     # 关键点海拔
float64   heading     # 关键点航向角（与北方向夹角，顺时针方向为正，单位为°）
string   name     # 关键点名称
"""
  __slots__ = ['header','request_source','request_type','num_of_kp','key_point_list']
  _slot_types = ['std_msgs/Header','string','int8','int16','ros_interface/KeyPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,request_source,request_type,num_of_kp,key_point_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoutingRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.request_source is None:
        self.request_source = ''
      if self.request_type is None:
        self.request_type = 0
      if self.num_of_kp is None:
        self.num_of_kp = 0
      if self.key_point_list is None:
        self.key_point_list = []
    else:
      self.header = std_msgs.msg.Header()
      self.request_source = ''
      self.request_type = 0
      self.num_of_kp = 0
      self.key_point_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_bh().pack(_x.request_type, _x.num_of_kp))
      length = len(self.key_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.key_point_list:
        _x = val1
        buff.write(_get_struct_h4d().pack(_x.id, _x.latitude, _x.longitude, _x.ele, _x.heading))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.key_point_list is None:
        self.key_point_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request_source = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.request_type, _x.num_of_kp,) = _get_struct_bh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.key_point_list = []
      for i in range(0, length):
        val1 = ros_interface.msg.KeyPoint()
        _x = val1
        start = end
        end += 34
        (_x.id, _x.latitude, _x.longitude, _x.ele, _x.heading,) = _get_struct_h4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        self.key_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_bh().pack(_x.request_type, _x.num_of_kp))
      length = len(self.key_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.key_point_list:
        _x = val1
        buff.write(_get_struct_h4d().pack(_x.id, _x.latitude, _x.longitude, _x.ele, _x.heading))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.key_point_list is None:
        self.key_point_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request_source = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.request_type, _x.num_of_kp,) = _get_struct_bh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.key_point_list = []
      for i in range(0, length):
        val1 = ros_interface.msg.KeyPoint()
        _x = val1
        start = end
        end += 34
        (_x.id, _x.latitude, _x.longitude, _x.ele, _x.heading,) = _get_struct_h4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        self.key_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_bh = None
def _get_struct_bh():
    global _struct_bh
    if _struct_bh is None:
        _struct_bh = struct.Struct("<bh")
    return _struct_bh
_struct_h4d = None
def _get_struct_h4d():
    global _struct_h4d
    if _struct_h4d is None:
        _struct_h4d = struct.Struct("<h4d")
    return _struct_h4d
