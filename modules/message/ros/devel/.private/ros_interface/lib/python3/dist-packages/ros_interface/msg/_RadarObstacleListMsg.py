# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/RadarObstacleListMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class RadarObstacleListMsg(genpy.Message):
  _md5sum = "3660edcdfc572605c301b7d0cc42e1d4"
  _type = "ros_interface/RadarObstacleListMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # 消息头
RadarObstacle[] radar_obstacle # 毫米波雷达障碍物数组
uint8   sensor_id     # 毫米波雷达 ID.
RadarState   radar_state     # radar state.
bool   is_valid     # true: valid  false: invalid

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/RadarObstacle
int32   id     # obstacle ID.
uint8   life_time     # 障碍物存在时间
Point2D   relative_position     # 雷达坐标系障碍物位置
Point2D   relative_position_rms     # 雷达坐标系障碍物位置标准差
Point2D   relative_velocity     # 雷达坐标系障碍物速度
Point2D   relative_velocity_rms     # 雷达坐标系障碍物速度标准差
Point2D   relative_acceleration     # 雷达坐标系障碍物加速度
Point2D   relative_acceleration_rms     # 雷达坐标系障碍物加速度标准差
float64   rcs     # 雷达散射面积
float64   snr     #  
int32   moving_status     # STATIONARY = 0; NEARING = 1; AWAYING = 2; NONE = 3;
float64   width     # 雷达障碍物宽度
float64   length     # 雷达障碍物长度
float64   height     # 雷达障碍物高度
float64   theta     #  
Point2D   absolute_position     # obstacle position in map coordinate system
Point2D   absolute_position_rms     #  
Point2D   absolute_velocity     # obstacle position in map coordinate system
Point2D   absolute_velocity_rms     #  
Point2D   absolute_acceleration     #  
Point2D   absolute_acceleration_rms     #  
float64   orientation     # 雷达障碍物方位角
float64   orient_rms     # 雷达障碍物方位角标准差
float64   yaw     #  
float64   yaw_rms     #  
int32   count     #  
int32   moving_frames_count     #  
Status   status     # 状态码
float64   underpass_probability     #  
float64   overpass_probability     #  
uint8   exist_probability     # 障碍物存在的概率
uint8   mov_property     # 障碍物移动属性：MOVING_PROPERTY_MOVING=0，MOVING_PROPERTY_STATIONARY=1，MOVING_PROPERTY_ONCOMING=2，MOVING_PROPERTY_STATIONARY_CANDIDATE=3，MOVING_PROPERTY_UNKOWN=4，MOVING_PROPERTY_CROSSING_STATIONARY=5，MOVING_PROPERTY_CROSSING_MOVING=6，MOVING_PROPERTY_STOPPED=7
uint8   track_state     # 跟踪状态：TRACK_STATE_DELETED=0；TRACK_STATE_INITED=1；TRACK_STATE_MEASURED=2；TRACK_STATE_PREDICTED=3；TRACK_STATE_DELETED_FOR_MERGE=4；TRACK_STATE_NEW_FOR_MERGE=5；
uint8   track_type     # 追踪的障碍物类型：TRACK_TYPE_POINT=0；TRACK_TYPE_CAR=1；TRACK_TYPE_TRUCK=2；TRACK_TYPE_PEDESTRIAN=3；TRACK_TYPE_MOTORCYCLE=4；TRACK_TYPE_BICYCLE=5；TRACK_TYPE_WIDE=6；TRACK_TYPE_RESERVED=7；TRACK_TYPE_BRIDGE=8；

================================================================================
MSG: ros_interface/Point2D
float64   x     # 位置坐标x
float64   y     # 位置坐标y

================================================================================
MSG: ros_interface/Status
int32   error_code     # 错误码
string   msg     # 错误码描述

================================================================================
MSG: ros_interface/RadarState
uint8   sensor_id     #  
uint8   nvm_read_status     #  
uint8   nvm_write_status     #  
RadarStateError   radar_state_error     #  
RadarStateMode   radar_state_mode     #  
uint16   max_distance     #  
uint8   sort_index     #  
uint8   radar_power     #  
uint8   ctl_relay     #  
uint8   output_type     #  
uint8   send_quality     #  
uint8   send_extinfo     #  
uint8   motion_rx_state     #  
uint8   rcs_threshold     #  
uint8   connector_direction     #  
uint8   radar_position     #  
uint8   hw_error     #  

================================================================================
MSG: ros_interface/RadarStateError
uint8   persistent_error     #  
uint8   temporary_error     #  
uint8   interference_error     #  
uint8   temperature_error     #  
uint8   voltage_error     #  
uint8   block_error     #  
uint8   broadcast_error     #  
uint8   electric_axis_error     #  
uint8   config_error     #  
uint8   calibration_error     #  

================================================================================
MSG: ros_interface/RadarStateMode
uint8   can0_work_mode     # can0工作模式
uint8   can1_work_mode     # can1工作模式
uint8   dual_can_mode     # 双总线工作模式
uint8   timming_mode     # 计时模式
uint8   power_mode     # 电源模式
uint8   performance_mode     # 效能模式
"""
  __slots__ = ['header','radar_obstacle','sensor_id','radar_state','is_valid']
  _slot_types = ['std_msgs/Header','ros_interface/RadarObstacle[]','uint8','ros_interface/RadarState','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,radar_obstacle,sensor_id,radar_state,is_valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarObstacleListMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radar_obstacle is None:
        self.radar_obstacle = []
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.radar_state is None:
        self.radar_state = ros_interface.msg.RadarState()
      if self.is_valid is None:
        self.is_valid = False
    else:
      self.header = std_msgs.msg.Header()
      self.radar_obstacle = []
      self.sensor_id = 0
      self.radar_state = ros_interface.msg.RadarState()
      self.is_valid = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.radar_obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_obstacle:
        _x = val1
        buff.write(_get_struct_iB().pack(_x.id, _x.life_time))
        _v1 = val1.relative_position
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v2 = val1.relative_position_rms
        _x = _v2
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v3 = val1.relative_velocity
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v4 = val1.relative_velocity_rms
        _x = _v4
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v5 = val1.relative_acceleration
        _x = _v5
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v6 = val1.relative_acceleration_rms
        _x = _v6
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2di4d().pack(_x.rcs, _x.snr, _x.moving_status, _x.width, _x.length, _x.height, _x.theta))
        _v7 = val1.absolute_position
        _x = _v7
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v8 = val1.absolute_position_rms
        _x = _v8
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v9 = val1.absolute_velocity
        _x = _v9
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v10 = val1.absolute_velocity_rms
        _x = _v10
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v11 = val1.absolute_acceleration
        _x = _v11
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v12 = val1.absolute_acceleration_rms
        _x = _v12
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_4d2i().pack(_x.orientation, _x.orient_rms, _x.yaw, _x.yaw_rms, _x.count, _x.moving_frames_count))
        _v13 = val1.status
        _x = _v13.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v13.msg
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2d4B().pack(_x.underpass_probability, _x.overpass_probability, _x.exist_probability, _x.mov_property, _x.track_state, _x.track_type))
      _x = self
      buff.write(_get_struct_20BH12B().pack(_x.sensor_id, _x.radar_state.sensor_id, _x.radar_state.nvm_read_status, _x.radar_state.nvm_write_status, _x.radar_state.radar_state_error.persistent_error, _x.radar_state.radar_state_error.temporary_error, _x.radar_state.radar_state_error.interference_error, _x.radar_state.radar_state_error.temperature_error, _x.radar_state.radar_state_error.voltage_error, _x.radar_state.radar_state_error.block_error, _x.radar_state.radar_state_error.broadcast_error, _x.radar_state.radar_state_error.electric_axis_error, _x.radar_state.radar_state_error.config_error, _x.radar_state.radar_state_error.calibration_error, _x.radar_state.radar_state_mode.can0_work_mode, _x.radar_state.radar_state_mode.can1_work_mode, _x.radar_state.radar_state_mode.dual_can_mode, _x.radar_state.radar_state_mode.timming_mode, _x.radar_state.radar_state_mode.power_mode, _x.radar_state.radar_state_mode.performance_mode, _x.radar_state.max_distance, _x.radar_state.sort_index, _x.radar_state.radar_power, _x.radar_state.ctl_relay, _x.radar_state.output_type, _x.radar_state.send_quality, _x.radar_state.send_extinfo, _x.radar_state.motion_rx_state, _x.radar_state.rcs_threshold, _x.radar_state.connector_direction, _x.radar_state.radar_position, _x.radar_state.hw_error, _x.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radar_obstacle is None:
        self.radar_obstacle = None
      if self.radar_state is None:
        self.radar_state = ros_interface.msg.RadarState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_obstacle = []
      for i in range(0, length):
        val1 = ros_interface.msg.RadarObstacle()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.life_time,) = _get_struct_iB().unpack(str[start:end])
        _v14 = val1.relative_position
        _x = _v14
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v15 = val1.relative_position_rms
        _x = _v15
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v16 = val1.relative_velocity
        _x = _v16
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v17 = val1.relative_velocity_rms
        _x = _v17
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v18 = val1.relative_acceleration
        _x = _v18
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v19 = val1.relative_acceleration_rms
        _x = _v19
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 52
        (_x.rcs, _x.snr, _x.moving_status, _x.width, _x.length, _x.height, _x.theta,) = _get_struct_2di4d().unpack(str[start:end])
        _v20 = val1.absolute_position
        _x = _v20
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v21 = val1.absolute_position_rms
        _x = _v21
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v22 = val1.absolute_velocity
        _x = _v22
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v23 = val1.absolute_velocity_rms
        _x = _v23
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v24 = val1.absolute_acceleration
        _x = _v24
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v25 = val1.absolute_acceleration_rms
        _x = _v25
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 40
        (_x.orientation, _x.orient_rms, _x.yaw, _x.yaw_rms, _x.count, _x.moving_frames_count,) = _get_struct_4d2i().unpack(str[start:end])
        _v26 = val1.status
        start = end
        end += 4
        (_v26.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v26.msg = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v26.msg = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.underpass_probability, _x.overpass_probability, _x.exist_probability, _x.mov_property, _x.track_state, _x.track_type,) = _get_struct_2d4B().unpack(str[start:end])
        self.radar_obstacle.append(val1)
      _x = self
      start = end
      end += 34
      (_x.sensor_id, _x.radar_state.sensor_id, _x.radar_state.nvm_read_status, _x.radar_state.nvm_write_status, _x.radar_state.radar_state_error.persistent_error, _x.radar_state.radar_state_error.temporary_error, _x.radar_state.radar_state_error.interference_error, _x.radar_state.radar_state_error.temperature_error, _x.radar_state.radar_state_error.voltage_error, _x.radar_state.radar_state_error.block_error, _x.radar_state.radar_state_error.broadcast_error, _x.radar_state.radar_state_error.electric_axis_error, _x.radar_state.radar_state_error.config_error, _x.radar_state.radar_state_error.calibration_error, _x.radar_state.radar_state_mode.can0_work_mode, _x.radar_state.radar_state_mode.can1_work_mode, _x.radar_state.radar_state_mode.dual_can_mode, _x.radar_state.radar_state_mode.timming_mode, _x.radar_state.radar_state_mode.power_mode, _x.radar_state.radar_state_mode.performance_mode, _x.radar_state.max_distance, _x.radar_state.sort_index, _x.radar_state.radar_power, _x.radar_state.ctl_relay, _x.radar_state.output_type, _x.radar_state.send_quality, _x.radar_state.send_extinfo, _x.radar_state.motion_rx_state, _x.radar_state.rcs_threshold, _x.radar_state.connector_direction, _x.radar_state.radar_position, _x.radar_state.hw_error, _x.is_valid,) = _get_struct_20BH12B().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.radar_obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_obstacle:
        _x = val1
        buff.write(_get_struct_iB().pack(_x.id, _x.life_time))
        _v27 = val1.relative_position
        _x = _v27
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v28 = val1.relative_position_rms
        _x = _v28
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v29 = val1.relative_velocity
        _x = _v29
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v30 = val1.relative_velocity_rms
        _x = _v30
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v31 = val1.relative_acceleration
        _x = _v31
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v32 = val1.relative_acceleration_rms
        _x = _v32
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2di4d().pack(_x.rcs, _x.snr, _x.moving_status, _x.width, _x.length, _x.height, _x.theta))
        _v33 = val1.absolute_position
        _x = _v33
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v34 = val1.absolute_position_rms
        _x = _v34
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v35 = val1.absolute_velocity
        _x = _v35
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v36 = val1.absolute_velocity_rms
        _x = _v36
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v37 = val1.absolute_acceleration
        _x = _v37
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v38 = val1.absolute_acceleration_rms
        _x = _v38
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_4d2i().pack(_x.orientation, _x.orient_rms, _x.yaw, _x.yaw_rms, _x.count, _x.moving_frames_count))
        _v39 = val1.status
        _x = _v39.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v39.msg
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2d4B().pack(_x.underpass_probability, _x.overpass_probability, _x.exist_probability, _x.mov_property, _x.track_state, _x.track_type))
      _x = self
      buff.write(_get_struct_20BH12B().pack(_x.sensor_id, _x.radar_state.sensor_id, _x.radar_state.nvm_read_status, _x.radar_state.nvm_write_status, _x.radar_state.radar_state_error.persistent_error, _x.radar_state.radar_state_error.temporary_error, _x.radar_state.radar_state_error.interference_error, _x.radar_state.radar_state_error.temperature_error, _x.radar_state.radar_state_error.voltage_error, _x.radar_state.radar_state_error.block_error, _x.radar_state.radar_state_error.broadcast_error, _x.radar_state.radar_state_error.electric_axis_error, _x.radar_state.radar_state_error.config_error, _x.radar_state.radar_state_error.calibration_error, _x.radar_state.radar_state_mode.can0_work_mode, _x.radar_state.radar_state_mode.can1_work_mode, _x.radar_state.radar_state_mode.dual_can_mode, _x.radar_state.radar_state_mode.timming_mode, _x.radar_state.radar_state_mode.power_mode, _x.radar_state.radar_state_mode.performance_mode, _x.radar_state.max_distance, _x.radar_state.sort_index, _x.radar_state.radar_power, _x.radar_state.ctl_relay, _x.radar_state.output_type, _x.radar_state.send_quality, _x.radar_state.send_extinfo, _x.radar_state.motion_rx_state, _x.radar_state.rcs_threshold, _x.radar_state.connector_direction, _x.radar_state.radar_position, _x.radar_state.hw_error, _x.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radar_obstacle is None:
        self.radar_obstacle = None
      if self.radar_state is None:
        self.radar_state = ros_interface.msg.RadarState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_obstacle = []
      for i in range(0, length):
        val1 = ros_interface.msg.RadarObstacle()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.life_time,) = _get_struct_iB().unpack(str[start:end])
        _v40 = val1.relative_position
        _x = _v40
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v41 = val1.relative_position_rms
        _x = _v41
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v42 = val1.relative_velocity
        _x = _v42
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v43 = val1.relative_velocity_rms
        _x = _v43
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v44 = val1.relative_acceleration
        _x = _v44
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v45 = val1.relative_acceleration_rms
        _x = _v45
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 52
        (_x.rcs, _x.snr, _x.moving_status, _x.width, _x.length, _x.height, _x.theta,) = _get_struct_2di4d().unpack(str[start:end])
        _v46 = val1.absolute_position
        _x = _v46
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v47 = val1.absolute_position_rms
        _x = _v47
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v48 = val1.absolute_velocity
        _x = _v48
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v49 = val1.absolute_velocity_rms
        _x = _v49
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v50 = val1.absolute_acceleration
        _x = _v50
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v51 = val1.absolute_acceleration_rms
        _x = _v51
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 40
        (_x.orientation, _x.orient_rms, _x.yaw, _x.yaw_rms, _x.count, _x.moving_frames_count,) = _get_struct_4d2i().unpack(str[start:end])
        _v52 = val1.status
        start = end
        end += 4
        (_v52.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.msg = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v52.msg = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.underpass_probability, _x.overpass_probability, _x.exist_probability, _x.mov_property, _x.track_state, _x.track_type,) = _get_struct_2d4B().unpack(str[start:end])
        self.radar_obstacle.append(val1)
      _x = self
      start = end
      end += 34
      (_x.sensor_id, _x.radar_state.sensor_id, _x.radar_state.nvm_read_status, _x.radar_state.nvm_write_status, _x.radar_state.radar_state_error.persistent_error, _x.radar_state.radar_state_error.temporary_error, _x.radar_state.radar_state_error.interference_error, _x.radar_state.radar_state_error.temperature_error, _x.radar_state.radar_state_error.voltage_error, _x.radar_state.radar_state_error.block_error, _x.radar_state.radar_state_error.broadcast_error, _x.radar_state.radar_state_error.electric_axis_error, _x.radar_state.radar_state_error.config_error, _x.radar_state.radar_state_error.calibration_error, _x.radar_state.radar_state_mode.can0_work_mode, _x.radar_state.radar_state_mode.can1_work_mode, _x.radar_state.radar_state_mode.dual_can_mode, _x.radar_state.radar_state_mode.timming_mode, _x.radar_state.radar_state_mode.power_mode, _x.radar_state.radar_state_mode.performance_mode, _x.radar_state.max_distance, _x.radar_state.sort_index, _x.radar_state.radar_power, _x.radar_state.ctl_relay, _x.radar_state.output_type, _x.radar_state.send_quality, _x.radar_state.send_extinfo, _x.radar_state.motion_rx_state, _x.radar_state.rcs_threshold, _x.radar_state.connector_direction, _x.radar_state.radar_position, _x.radar_state.hw_error, _x.is_valid,) = _get_struct_20BH12B().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20BH12B = None
def _get_struct_20BH12B():
    global _struct_20BH12B
    if _struct_20BH12B is None:
        _struct_20BH12B = struct.Struct("<20BH12B")
    return _struct_20BH12B
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2d4B = None
def _get_struct_2d4B():
    global _struct_2d4B
    if _struct_2d4B is None:
        _struct_2d4B = struct.Struct("<2d4B")
    return _struct_2d4B
_struct_2di4d = None
def _get_struct_2di4d():
    global _struct_2di4d
    if _struct_2di4d is None:
        _struct_2di4d = struct.Struct("<2di4d")
    return _struct_2di4d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d2i = None
def _get_struct_4d2i():
    global _struct_4d2i
    if _struct_4d2i is None:
        _struct_4d2i = struct.Struct("<4d2i")
    return _struct_4d2i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
