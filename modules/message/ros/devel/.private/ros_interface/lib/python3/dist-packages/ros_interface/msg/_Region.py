# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/Region.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class Region(genpy.Message):
  _md5sum = "e67108b17f0dbf5c3d9cd0e59ac3108e"
  _type = "ros_interface/Region"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32   name_region     # 前后左右区域
float64   score     # 车辆前后左右的区域打分获得的分值(0-100表示逐步危险程度)
int32   rank_risk     # 危险程度(0-3四级划分，不同分级对应不同驾驶处理策略)
Point3D[] region_polygon # 世界坐标系下的区域多边形

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z
"""
  __slots__ = ['name_region','score','rank_risk','region_polygon']
  _slot_types = ['int32','float64','int32','ros_interface/Point3D[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name_region,score,rank_risk,region_polygon

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Region, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name_region is None:
        self.name_region = 0
      if self.score is None:
        self.score = 0.
      if self.rank_risk is None:
        self.rank_risk = 0
      if self.region_polygon is None:
        self.region_polygon = []
    else:
      self.name_region = 0
      self.score = 0.
      self.rank_risk = 0
      self.region_polygon = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_idi().pack(_x.name_region, _x.score, _x.rank_risk))
      length = len(self.region_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.region_polygon:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.region_polygon is None:
        self.region_polygon = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.name_region, _x.score, _x.rank_risk,) = _get_struct_idi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.region_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.region_polygon.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_idi().pack(_x.name_region, _x.score, _x.rank_risk))
      length = len(self.region_polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.region_polygon:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.region_polygon is None:
        self.region_polygon = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.name_region, _x.score, _x.rank_risk,) = _get_struct_idi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.region_polygon = []
      for i in range(0, length):
        val1 = ros_interface.msg.Point3D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.region_polygon.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_idi = None
def _get_struct_idi():
    global _struct_idi
    if _struct_idi is None:
        _struct_idi = struct.Struct("<idi")
    return _struct_idi
