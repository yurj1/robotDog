# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/VehicleConfig.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class VehicleConfig(genpy.Message):
  _md5sum = "e501d7b1f42705539ce132ff4e593b0c"
  _type = "ros_interface/VehicleConfig"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
VehicleParam   vehicle_param     # 车辆参数表

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/VehicleParam
string   brand     #  
int32   steer_mode     #  
float64   length     #  
float64   width     #  
float64   height     #  
float64   mass_fl     #  
float64   mass_fr     #  
float64   mass_rl     #  
float64   mass_rr     #  
float64   wheel_radius     #  
float64   wheelbase     #  
float64   front_edge_to_center     #  
float64   back_edge_to_center     #  
float64   lf     #  
float64   lr     #  
float64   cf     #  
float64   cr     #  
float64   steer_ratio     #  
float64   rolling_coefficient     #  
float64   air_density     #  
float64   air_damping_coefficient     #  
float64   max_front_steer_angle     #  
float64   min_front_steer_angle     #  
float64   max_rear_steer_angle     #  
float64   min_rear_steer_angle     #  
float64   speed_limit     #  
float64   max_brake_value     #  
float64   min_brake_value     #  
float64   max_accel_value     #  
float64   min_accel_value     #  
float64   speed_deadzone     #  
float64   standstill_acceleration     #  
float64   max_front_steer_angle_rate     #  
float64   max_rear_steer_angle_rate     #  
float64   max_abs_speed_when_stopped     #  
float64   max_abs_speed_when_stopped_duration     #  
float64   brake_value_when_gear_transitioning     #  
float64   accel_deadzone     #  
float64   brake_deadzone     #  
float64   acceleration_in_idle     #  
float64   deceleration_in_idle     #  
float64   max_acceleration_jerk     #  
float64   max_acceleration     #  
float64   max_deceleration     #  
float64   min_turning_radius     #  
"""
  __slots__ = ['header','vehicle_param']
  _slot_types = ['std_msgs/Header','ros_interface/VehicleParam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,vehicle_param

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleConfig, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicle_param is None:
        self.vehicle_param = ros_interface.msg.VehicleParam()
    else:
      self.header = std_msgs.msg.Header()
      self.vehicle_param = ros_interface.msg.VehicleParam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vehicle_param.brand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i43d().pack(_x.vehicle_param.steer_mode, _x.vehicle_param.length, _x.vehicle_param.width, _x.vehicle_param.height, _x.vehicle_param.mass_fl, _x.vehicle_param.mass_fr, _x.vehicle_param.mass_rl, _x.vehicle_param.mass_rr, _x.vehicle_param.wheel_radius, _x.vehicle_param.wheelbase, _x.vehicle_param.front_edge_to_center, _x.vehicle_param.back_edge_to_center, _x.vehicle_param.lf, _x.vehicle_param.lr, _x.vehicle_param.cf, _x.vehicle_param.cr, _x.vehicle_param.steer_ratio, _x.vehicle_param.rolling_coefficient, _x.vehicle_param.air_density, _x.vehicle_param.air_damping_coefficient, _x.vehicle_param.max_front_steer_angle, _x.vehicle_param.min_front_steer_angle, _x.vehicle_param.max_rear_steer_angle, _x.vehicle_param.min_rear_steer_angle, _x.vehicle_param.speed_limit, _x.vehicle_param.max_brake_value, _x.vehicle_param.min_brake_value, _x.vehicle_param.max_accel_value, _x.vehicle_param.min_accel_value, _x.vehicle_param.speed_deadzone, _x.vehicle_param.standstill_acceleration, _x.vehicle_param.max_front_steer_angle_rate, _x.vehicle_param.max_rear_steer_angle_rate, _x.vehicle_param.max_abs_speed_when_stopped, _x.vehicle_param.max_abs_speed_when_stopped_duration, _x.vehicle_param.brake_value_when_gear_transitioning, _x.vehicle_param.accel_deadzone, _x.vehicle_param.brake_deadzone, _x.vehicle_param.acceleration_in_idle, _x.vehicle_param.deceleration_in_idle, _x.vehicle_param.max_acceleration_jerk, _x.vehicle_param.max_acceleration, _x.vehicle_param.max_deceleration, _x.vehicle_param.min_turning_radius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicle_param is None:
        self.vehicle_param = ros_interface.msg.VehicleParam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_param.brand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_param.brand = str[start:end]
      _x = self
      start = end
      end += 348
      (_x.vehicle_param.steer_mode, _x.vehicle_param.length, _x.vehicle_param.width, _x.vehicle_param.height, _x.vehicle_param.mass_fl, _x.vehicle_param.mass_fr, _x.vehicle_param.mass_rl, _x.vehicle_param.mass_rr, _x.vehicle_param.wheel_radius, _x.vehicle_param.wheelbase, _x.vehicle_param.front_edge_to_center, _x.vehicle_param.back_edge_to_center, _x.vehicle_param.lf, _x.vehicle_param.lr, _x.vehicle_param.cf, _x.vehicle_param.cr, _x.vehicle_param.steer_ratio, _x.vehicle_param.rolling_coefficient, _x.vehicle_param.air_density, _x.vehicle_param.air_damping_coefficient, _x.vehicle_param.max_front_steer_angle, _x.vehicle_param.min_front_steer_angle, _x.vehicle_param.max_rear_steer_angle, _x.vehicle_param.min_rear_steer_angle, _x.vehicle_param.speed_limit, _x.vehicle_param.max_brake_value, _x.vehicle_param.min_brake_value, _x.vehicle_param.max_accel_value, _x.vehicle_param.min_accel_value, _x.vehicle_param.speed_deadzone, _x.vehicle_param.standstill_acceleration, _x.vehicle_param.max_front_steer_angle_rate, _x.vehicle_param.max_rear_steer_angle_rate, _x.vehicle_param.max_abs_speed_when_stopped, _x.vehicle_param.max_abs_speed_when_stopped_duration, _x.vehicle_param.brake_value_when_gear_transitioning, _x.vehicle_param.accel_deadzone, _x.vehicle_param.brake_deadzone, _x.vehicle_param.acceleration_in_idle, _x.vehicle_param.deceleration_in_idle, _x.vehicle_param.max_acceleration_jerk, _x.vehicle_param.max_acceleration, _x.vehicle_param.max_deceleration, _x.vehicle_param.min_turning_radius,) = _get_struct_i43d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vehicle_param.brand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i43d().pack(_x.vehicle_param.steer_mode, _x.vehicle_param.length, _x.vehicle_param.width, _x.vehicle_param.height, _x.vehicle_param.mass_fl, _x.vehicle_param.mass_fr, _x.vehicle_param.mass_rl, _x.vehicle_param.mass_rr, _x.vehicle_param.wheel_radius, _x.vehicle_param.wheelbase, _x.vehicle_param.front_edge_to_center, _x.vehicle_param.back_edge_to_center, _x.vehicle_param.lf, _x.vehicle_param.lr, _x.vehicle_param.cf, _x.vehicle_param.cr, _x.vehicle_param.steer_ratio, _x.vehicle_param.rolling_coefficient, _x.vehicle_param.air_density, _x.vehicle_param.air_damping_coefficient, _x.vehicle_param.max_front_steer_angle, _x.vehicle_param.min_front_steer_angle, _x.vehicle_param.max_rear_steer_angle, _x.vehicle_param.min_rear_steer_angle, _x.vehicle_param.speed_limit, _x.vehicle_param.max_brake_value, _x.vehicle_param.min_brake_value, _x.vehicle_param.max_accel_value, _x.vehicle_param.min_accel_value, _x.vehicle_param.speed_deadzone, _x.vehicle_param.standstill_acceleration, _x.vehicle_param.max_front_steer_angle_rate, _x.vehicle_param.max_rear_steer_angle_rate, _x.vehicle_param.max_abs_speed_when_stopped, _x.vehicle_param.max_abs_speed_when_stopped_duration, _x.vehicle_param.brake_value_when_gear_transitioning, _x.vehicle_param.accel_deadzone, _x.vehicle_param.brake_deadzone, _x.vehicle_param.acceleration_in_idle, _x.vehicle_param.deceleration_in_idle, _x.vehicle_param.max_acceleration_jerk, _x.vehicle_param.max_acceleration, _x.vehicle_param.max_deceleration, _x.vehicle_param.min_turning_radius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicle_param is None:
        self.vehicle_param = ros_interface.msg.VehicleParam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_param.brand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_param.brand = str[start:end]
      _x = self
      start = end
      end += 348
      (_x.vehicle_param.steer_mode, _x.vehicle_param.length, _x.vehicle_param.width, _x.vehicle_param.height, _x.vehicle_param.mass_fl, _x.vehicle_param.mass_fr, _x.vehicle_param.mass_rl, _x.vehicle_param.mass_rr, _x.vehicle_param.wheel_radius, _x.vehicle_param.wheelbase, _x.vehicle_param.front_edge_to_center, _x.vehicle_param.back_edge_to_center, _x.vehicle_param.lf, _x.vehicle_param.lr, _x.vehicle_param.cf, _x.vehicle_param.cr, _x.vehicle_param.steer_ratio, _x.vehicle_param.rolling_coefficient, _x.vehicle_param.air_density, _x.vehicle_param.air_damping_coefficient, _x.vehicle_param.max_front_steer_angle, _x.vehicle_param.min_front_steer_angle, _x.vehicle_param.max_rear_steer_angle, _x.vehicle_param.min_rear_steer_angle, _x.vehicle_param.speed_limit, _x.vehicle_param.max_brake_value, _x.vehicle_param.min_brake_value, _x.vehicle_param.max_accel_value, _x.vehicle_param.min_accel_value, _x.vehicle_param.speed_deadzone, _x.vehicle_param.standstill_acceleration, _x.vehicle_param.max_front_steer_angle_rate, _x.vehicle_param.max_rear_steer_angle_rate, _x.vehicle_param.max_abs_speed_when_stopped, _x.vehicle_param.max_abs_speed_when_stopped_duration, _x.vehicle_param.brake_value_when_gear_transitioning, _x.vehicle_param.accel_deadzone, _x.vehicle_param.brake_deadzone, _x.vehicle_param.acceleration_in_idle, _x.vehicle_param.deceleration_in_idle, _x.vehicle_param.max_acceleration_jerk, _x.vehicle_param.max_acceleration, _x.vehicle_param.max_deceleration, _x.vehicle_param.min_turning_radius,) = _get_struct_i43d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i43d = None
def _get_struct_i43d():
    global _struct_i43d
    if _struct_i43d is None:
        _struct_i43d = struct.Struct("<i43d")
    return _struct_i43d
