# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/TrafficLightDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class TrafficLightDebug(genpy.Message):
  _md5sum = "f6bafdc05f8e0cd03dd05affb896f154"
  _type = "ros_interface/TrafficLightDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """TrafficLightBox   cropbox     #  
TrafficLightBox[] box #  
int32   signal_num     #  
int32   valid_pos     #  
float64   ts_diff_pos     #  
float64   ts_diff_sys     #  
int32   project_error     #  
float64   distance_to_stop_line     #  
int32   camera_id     #  
TrafficLightBox[] crop_roi #  
TrafficLightBox[] projected_roi #  
TrafficLightBox[] rectified_roi #  
TrafficLightBox[] debug_roi #  

================================================================================
MSG: ros_interface/TrafficLightBox
int32   x     # 交通灯目标在图像上中心点横向方向像素位置
int32   y     # 交通灯目标在图像上中心点纵向方向像素位置
int32   width     # 交通灯目标在图像上宽度
int32   height     # 交通灯目标在图像上高度
int32   color     # UNKNOWN = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;
bool   selected     # 是否选择
string   camera_name     # 相机名称
"""
  __slots__ = ['cropbox','box','signal_num','valid_pos','ts_diff_pos','ts_diff_sys','project_error','distance_to_stop_line','camera_id','crop_roi','projected_roi','rectified_roi','debug_roi']
  _slot_types = ['ros_interface/TrafficLightBox','ros_interface/TrafficLightBox[]','int32','int32','float64','float64','int32','float64','int32','ros_interface/TrafficLightBox[]','ros_interface/TrafficLightBox[]','ros_interface/TrafficLightBox[]','ros_interface/TrafficLightBox[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cropbox,box,signal_num,valid_pos,ts_diff_pos,ts_diff_sys,project_error,distance_to_stop_line,camera_id,crop_roi,projected_roi,rectified_roi,debug_roi

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficLightDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cropbox is None:
        self.cropbox = ros_interface.msg.TrafficLightBox()
      if self.box is None:
        self.box = []
      if self.signal_num is None:
        self.signal_num = 0
      if self.valid_pos is None:
        self.valid_pos = 0
      if self.ts_diff_pos is None:
        self.ts_diff_pos = 0.
      if self.ts_diff_sys is None:
        self.ts_diff_sys = 0.
      if self.project_error is None:
        self.project_error = 0
      if self.distance_to_stop_line is None:
        self.distance_to_stop_line = 0.
      if self.camera_id is None:
        self.camera_id = 0
      if self.crop_roi is None:
        self.crop_roi = []
      if self.projected_roi is None:
        self.projected_roi = []
      if self.rectified_roi is None:
        self.rectified_roi = []
      if self.debug_roi is None:
        self.debug_roi = []
    else:
      self.cropbox = ros_interface.msg.TrafficLightBox()
      self.box = []
      self.signal_num = 0
      self.valid_pos = 0
      self.ts_diff_pos = 0.
      self.ts_diff_sys = 0.
      self.project_error = 0
      self.distance_to_stop_line = 0.
      self.camera_id = 0
      self.crop_roi = []
      self.projected_roi = []
      self.rectified_roi = []
      self.debug_roi = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5iB().pack(_x.cropbox.x, _x.cropbox.y, _x.cropbox.width, _x.cropbox.height, _x.cropbox.color, _x.cropbox.selected))
      _x = self.cropbox.camera_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.box)
      buff.write(_struct_I.pack(length))
      for val1 in self.box:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i2didi().pack(_x.signal_num, _x.valid_pos, _x.ts_diff_pos, _x.ts_diff_sys, _x.project_error, _x.distance_to_stop_line, _x.camera_id))
      length = len(self.crop_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.crop_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.projected_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.projected_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rectified_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.rectified_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.debug_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.debug_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cropbox is None:
        self.cropbox = ros_interface.msg.TrafficLightBox()
      if self.box is None:
        self.box = None
      if self.crop_roi is None:
        self.crop_roi = None
      if self.projected_roi is None:
        self.projected_roi = None
      if self.rectified_roi is None:
        self.rectified_roi = None
      if self.debug_roi is None:
        self.debug_roi = None
      end = 0
      _x = self
      start = end
      end += 21
      (_x.cropbox.x, _x.cropbox.y, _x.cropbox.width, _x.cropbox.height, _x.cropbox.color, _x.cropbox.selected,) = _get_struct_5iB().unpack(str[start:end])
      self.cropbox.selected = bool(self.cropbox.selected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cropbox.camera_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cropbox.camera_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.box = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.box.append(val1)
      _x = self
      start = end
      end += 40
      (_x.signal_num, _x.valid_pos, _x.ts_diff_pos, _x.ts_diff_sys, _x.project_error, _x.distance_to_stop_line, _x.camera_id,) = _get_struct_2i2didi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.crop_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.crop_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.projected_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.projected_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rectified_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.rectified_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.debug_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.debug_roi.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5iB().pack(_x.cropbox.x, _x.cropbox.y, _x.cropbox.width, _x.cropbox.height, _x.cropbox.color, _x.cropbox.selected))
      _x = self.cropbox.camera_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.box)
      buff.write(_struct_I.pack(length))
      for val1 in self.box:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i2didi().pack(_x.signal_num, _x.valid_pos, _x.ts_diff_pos, _x.ts_diff_sys, _x.project_error, _x.distance_to_stop_line, _x.camera_id))
      length = len(self.crop_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.crop_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.projected_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.projected_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rectified_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.rectified_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.debug_roi)
      buff.write(_struct_I.pack(length))
      for val1 in self.debug_roi:
        _x = val1
        buff.write(_get_struct_5iB().pack(_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected))
        _x = val1.camera_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cropbox is None:
        self.cropbox = ros_interface.msg.TrafficLightBox()
      if self.box is None:
        self.box = None
      if self.crop_roi is None:
        self.crop_roi = None
      if self.projected_roi is None:
        self.projected_roi = None
      if self.rectified_roi is None:
        self.rectified_roi = None
      if self.debug_roi is None:
        self.debug_roi = None
      end = 0
      _x = self
      start = end
      end += 21
      (_x.cropbox.x, _x.cropbox.y, _x.cropbox.width, _x.cropbox.height, _x.cropbox.color, _x.cropbox.selected,) = _get_struct_5iB().unpack(str[start:end])
      self.cropbox.selected = bool(self.cropbox.selected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cropbox.camera_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cropbox.camera_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.box = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.box.append(val1)
      _x = self
      start = end
      end += 40
      (_x.signal_num, _x.valid_pos, _x.ts_diff_pos, _x.ts_diff_sys, _x.project_error, _x.distance_to_stop_line, _x.camera_id,) = _get_struct_2i2didi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.crop_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.crop_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.projected_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.projected_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rectified_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.rectified_roi.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.debug_roi = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrafficLightBox()
        _x = val1
        start = end
        end += 21
        (_x.x, _x.y, _x.width, _x.height, _x.color, _x.selected,) = _get_struct_5iB().unpack(str[start:end])
        val1.selected = bool(val1.selected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_name = str[start:end]
        self.debug_roi.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2didi = None
def _get_struct_2i2didi():
    global _struct_2i2didi
    if _struct_2i2didi is None:
        _struct_2i2didi = struct.Struct("<2i2didi")
    return _struct_2i2didi
_struct_5iB = None
def _get_struct_5iB():
    global _struct_5iB
    if _struct_5iB is None:
        _struct_5iB = struct.Struct("<5iB")
    return _struct_5iB
