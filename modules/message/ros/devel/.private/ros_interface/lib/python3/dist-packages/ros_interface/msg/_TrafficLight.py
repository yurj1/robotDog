# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/TrafficLight.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class TrafficLight(genpy.Message):
  _md5sum = "8d24a7eb9eebb6222dbbfb397efd4db6"
  _type = "ros_interface/TrafficLight"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32   color     # UNKNOWN = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;
uint32   id     # light id
int32   type     # STRAIGHT = 0; TURN_LEFT = 1; TURN_RIGHT = 2; STRAIGHT_TURN_LEFT = 3; STRAIGHT_TURN_RIGHT =4; CIRCULAR = 5; PEDESTRIAN = 6; CYCLIST = 7; UNKNOWN = 8;
float64   confidence     # 置信度confdence: [0-1]
ImageRect   light_rect     # 交通灯矩形框light rect
Point3D   position     # 交通灯位置position of light
float64   distance     # 距离distance between light and stop line
int32[] light_lanes # corresponding lanes of light
float64   tracking_time     # duration of a light since track
bool   blink     # true:
float64   blinking_time     # duration of a light blinking
float64   remaining_time     # V2X time of light
Time   create_time     # time of light detected

================================================================================
MSG: ros_interface/ImageRect
int32   x     # coordinate x of left-top point of image rect
int32   y     # coordinate y of left-top point of image rect
int32   width     # width of image rect
int32   height     # height of image rect

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/Time
uint32   sec     # 秒
uint32   nsec     # 纳秒
"""
  __slots__ = ['color','id','type','confidence','light_rect','position','distance','light_lanes','tracking_time','blink','blinking_time','remaining_time','create_time']
  _slot_types = ['int32','uint32','int32','float64','ros_interface/ImageRect','ros_interface/Point3D','float64','int32[]','float64','bool','float64','float64','ros_interface/Time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       color,id,type,confidence,light_rect,position,distance,light_lanes,tracking_time,blink,blinking_time,remaining_time,create_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficLight, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.color is None:
        self.color = 0
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.light_rect is None:
        self.light_rect = ros_interface.msg.ImageRect()
      if self.position is None:
        self.position = ros_interface.msg.Point3D()
      if self.distance is None:
        self.distance = 0.
      if self.light_lanes is None:
        self.light_lanes = []
      if self.tracking_time is None:
        self.tracking_time = 0.
      if self.blink is None:
        self.blink = False
      if self.blinking_time is None:
        self.blinking_time = 0.
      if self.remaining_time is None:
        self.remaining_time = 0.
      if self.create_time is None:
        self.create_time = ros_interface.msg.Time()
    else:
      self.color = 0
      self.id = 0
      self.type = 0
      self.confidence = 0.
      self.light_rect = ros_interface.msg.ImageRect()
      self.position = ros_interface.msg.Point3D()
      self.distance = 0.
      self.light_lanes = []
      self.tracking_time = 0.
      self.blink = False
      self.blinking_time = 0.
      self.remaining_time = 0.
      self.create_time = ros_interface.msg.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iIid4i4d().pack(_x.color, _x.id, _x.type, _x.confidence, _x.light_rect.x, _x.light_rect.y, _x.light_rect.width, _x.light_rect.height, _x.position.x, _x.position.y, _x.position.z, _x.distance))
      length = len(self.light_lanes)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.light_lanes))
      _x = self
      buff.write(_get_struct_dB2d2I().pack(_x.tracking_time, _x.blink, _x.blinking_time, _x.remaining_time, _x.create_time.sec, _x.create_time.nsec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.light_rect is None:
        self.light_rect = ros_interface.msg.ImageRect()
      if self.position is None:
        self.position = ros_interface.msg.Point3D()
      if self.create_time is None:
        self.create_time = ros_interface.msg.Time()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.color, _x.id, _x.type, _x.confidence, _x.light_rect.x, _x.light_rect.y, _x.light_rect.width, _x.light_rect.height, _x.position.x, _x.position.y, _x.position.z, _x.distance,) = _get_struct_iIid4i4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.light_lanes = s.unpack(str[start:end])
      _x = self
      start = end
      end += 33
      (_x.tracking_time, _x.blink, _x.blinking_time, _x.remaining_time, _x.create_time.sec, _x.create_time.nsec,) = _get_struct_dB2d2I().unpack(str[start:end])
      self.blink = bool(self.blink)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iIid4i4d().pack(_x.color, _x.id, _x.type, _x.confidence, _x.light_rect.x, _x.light_rect.y, _x.light_rect.width, _x.light_rect.height, _x.position.x, _x.position.y, _x.position.z, _x.distance))
      length = len(self.light_lanes)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.light_lanes.tostring())
      _x = self
      buff.write(_get_struct_dB2d2I().pack(_x.tracking_time, _x.blink, _x.blinking_time, _x.remaining_time, _x.create_time.sec, _x.create_time.nsec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.light_rect is None:
        self.light_rect = ros_interface.msg.ImageRect()
      if self.position is None:
        self.position = ros_interface.msg.Point3D()
      if self.create_time is None:
        self.create_time = ros_interface.msg.Time()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.color, _x.id, _x.type, _x.confidence, _x.light_rect.x, _x.light_rect.y, _x.light_rect.width, _x.light_rect.height, _x.position.x, _x.position.y, _x.position.z, _x.distance,) = _get_struct_iIid4i4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.light_lanes = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 33
      (_x.tracking_time, _x.blink, _x.blinking_time, _x.remaining_time, _x.create_time.sec, _x.create_time.nsec,) = _get_struct_dB2d2I().unpack(str[start:end])
      self.blink = bool(self.blink)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dB2d2I = None
def _get_struct_dB2d2I():
    global _struct_dB2d2I
    if _struct_dB2d2I is None:
        _struct_dB2d2I = struct.Struct("<dB2d2I")
    return _struct_dB2d2I
_struct_iIid4i4d = None
def _get_struct_iIid4i4d():
    global _struct_iIid4i4d
    if _struct_iIid4i4d is None:
        _struct_iIid4i4d = struct.Struct("<iIid4i4d")
    return _struct_iIid4i4d
