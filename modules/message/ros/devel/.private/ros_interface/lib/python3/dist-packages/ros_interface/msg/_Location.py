# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/Location.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class Location(genpy.Message):
  _md5sum = "6b25c2b9af6ab35d68c43d9abb43d342"
  _type = "ros_interface/Location"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # 消息头
PointLLH   position     # 经纬度高程
float64   pitch     # 方向(单位弧度，-π～π,正东:0, 逆时针。都满足右手定则)
float64   roll     #  
float64   heading     #  
Point3D   linear_velocity     # 线速度（m/s，北东地坐标系）
Point3D   linear_acceleration     # 线加速度（m/s2，前右下坐标系）
Point3D   angular_velocity     # 角速度（度/s，前右下，满足右手定则）
int32   rtk_flag     # RTK标志值
int32   odom_type     # 融合标志:0-(纯ins) 1-(纯轮速) 2-(泊车递推) 3-(无) 4-(orb匹配定位)
int32   auxiliary_type     # 辅助方式:0-NULL(无辅助方式) 1-laneliine_map(车道线/标识牌)2-feature_map(lidar)3-feature_map(lidar_camera)
int32   location_valid_flag     # Location有效性标志位0: invalid； 1: valid
float64   origin_lat     # 参考点纬度 GCJ-02格式
float64   origin_lon     # 参考点经度 GCJ-02格式
PointENU   utm_position     # 相对参考点xyz坐标
int32   change_origin_flag     # 0::无坐标系切换 1:坐标系切换成功2:坐标系切换中3:坐标系切换故障
PointENU   utm_position_next     # 相对参考点坐标(切换状态下，为新的原点坐标系下)
Point3D   position_std_dev     # 位置标准差
Point3D   orientation_std_dev     # 方向标准差
Point3D   linear_velocity_std_dev     # 速度标准差
Point3D   linear_acceleration_std_dev     # 加速度标准差
Point3D   angular_velocity_std_dev     # 角速度标准差

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/PointLLH
float64   lon     # Longitude in degrees, ranging from -180 to 180.
float64   lat     # Latitude in degrees, ranging from -90 to 90.
float64   height     # WGS-84 ellipsoid height in meters.

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z

================================================================================
MSG: ros_interface/PointENU
float64   x     # East from the origin, in meters.
float64   y     # North from the origin, in meters.
float64   z     # Up from the WGS-84 ellipsoid, in meters.
"""
  __slots__ = ['header','position','pitch','roll','heading','linear_velocity','linear_acceleration','angular_velocity','rtk_flag','odom_type','auxiliary_type','location_valid_flag','origin_lat','origin_lon','utm_position','change_origin_flag','utm_position_next','position_std_dev','orientation_std_dev','linear_velocity_std_dev','linear_acceleration_std_dev','angular_velocity_std_dev']
  _slot_types = ['std_msgs/Header','ros_interface/PointLLH','float64','float64','float64','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','int32','int32','int32','int32','float64','float64','ros_interface/PointENU','int32','ros_interface/PointENU','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,position,pitch,roll,heading,linear_velocity,linear_acceleration,angular_velocity,rtk_flag,odom_type,auxiliary_type,location_valid_flag,origin_lat,origin_lon,utm_position,change_origin_flag,utm_position_next,position_std_dev,orientation_std_dev,linear_velocity_std_dev,linear_acceleration_std_dev,angular_velocity_std_dev

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Location, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = ros_interface.msg.PointLLH()
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.heading is None:
        self.heading = 0.
      if self.linear_velocity is None:
        self.linear_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = ros_interface.msg.Point3D()
      if self.angular_velocity is None:
        self.angular_velocity = ros_interface.msg.Point3D()
      if self.rtk_flag is None:
        self.rtk_flag = 0
      if self.odom_type is None:
        self.odom_type = 0
      if self.auxiliary_type is None:
        self.auxiliary_type = 0
      if self.location_valid_flag is None:
        self.location_valid_flag = 0
      if self.origin_lat is None:
        self.origin_lat = 0.
      if self.origin_lon is None:
        self.origin_lon = 0.
      if self.utm_position is None:
        self.utm_position = ros_interface.msg.PointENU()
      if self.change_origin_flag is None:
        self.change_origin_flag = 0
      if self.utm_position_next is None:
        self.utm_position_next = ros_interface.msg.PointENU()
      if self.position_std_dev is None:
        self.position_std_dev = ros_interface.msg.Point3D()
      if self.orientation_std_dev is None:
        self.orientation_std_dev = ros_interface.msg.Point3D()
      if self.linear_velocity_std_dev is None:
        self.linear_velocity_std_dev = ros_interface.msg.Point3D()
      if self.linear_acceleration_std_dev is None:
        self.linear_acceleration_std_dev = ros_interface.msg.Point3D()
      if self.angular_velocity_std_dev is None:
        self.angular_velocity_std_dev = ros_interface.msg.Point3D()
    else:
      self.header = std_msgs.msg.Header()
      self.position = ros_interface.msg.PointLLH()
      self.pitch = 0.
      self.roll = 0.
      self.heading = 0.
      self.linear_velocity = ros_interface.msg.Point3D()
      self.linear_acceleration = ros_interface.msg.Point3D()
      self.angular_velocity = ros_interface.msg.Point3D()
      self.rtk_flag = 0
      self.odom_type = 0
      self.auxiliary_type = 0
      self.location_valid_flag = 0
      self.origin_lat = 0.
      self.origin_lon = 0.
      self.utm_position = ros_interface.msg.PointENU()
      self.change_origin_flag = 0
      self.utm_position_next = ros_interface.msg.PointENU()
      self.position_std_dev = ros_interface.msg.Point3D()
      self.orientation_std_dev = ros_interface.msg.Point3D()
      self.linear_velocity_std_dev = ros_interface.msg.Point3D()
      self.linear_acceleration_std_dev = ros_interface.msg.Point3D()
      self.angular_velocity_std_dev = ros_interface.msg.Point3D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_15d4i5di18d().pack(_x.position.lon, _x.position.lat, _x.position.height, _x.pitch, _x.roll, _x.heading, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.rtk_flag, _x.odom_type, _x.auxiliary_type, _x.location_valid_flag, _x.origin_lat, _x.origin_lon, _x.utm_position.x, _x.utm_position.y, _x.utm_position.z, _x.change_origin_flag, _x.utm_position_next.x, _x.utm_position_next.y, _x.utm_position_next.z, _x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.orientation_std_dev.x, _x.orientation_std_dev.y, _x.orientation_std_dev.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.linear_acceleration_std_dev.x, _x.linear_acceleration_std_dev.y, _x.linear_acceleration_std_dev.z, _x.angular_velocity_std_dev.x, _x.angular_velocity_std_dev.y, _x.angular_velocity_std_dev.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = ros_interface.msg.PointLLH()
      if self.linear_velocity is None:
        self.linear_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = ros_interface.msg.Point3D()
      if self.angular_velocity is None:
        self.angular_velocity = ros_interface.msg.Point3D()
      if self.utm_position is None:
        self.utm_position = ros_interface.msg.PointENU()
      if self.utm_position_next is None:
        self.utm_position_next = ros_interface.msg.PointENU()
      if self.position_std_dev is None:
        self.position_std_dev = ros_interface.msg.Point3D()
      if self.orientation_std_dev is None:
        self.orientation_std_dev = ros_interface.msg.Point3D()
      if self.linear_velocity_std_dev is None:
        self.linear_velocity_std_dev = ros_interface.msg.Point3D()
      if self.linear_acceleration_std_dev is None:
        self.linear_acceleration_std_dev = ros_interface.msg.Point3D()
      if self.angular_velocity_std_dev is None:
        self.angular_velocity_std_dev = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 324
      (_x.position.lon, _x.position.lat, _x.position.height, _x.pitch, _x.roll, _x.heading, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.rtk_flag, _x.odom_type, _x.auxiliary_type, _x.location_valid_flag, _x.origin_lat, _x.origin_lon, _x.utm_position.x, _x.utm_position.y, _x.utm_position.z, _x.change_origin_flag, _x.utm_position_next.x, _x.utm_position_next.y, _x.utm_position_next.z, _x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.orientation_std_dev.x, _x.orientation_std_dev.y, _x.orientation_std_dev.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.linear_acceleration_std_dev.x, _x.linear_acceleration_std_dev.y, _x.linear_acceleration_std_dev.z, _x.angular_velocity_std_dev.x, _x.angular_velocity_std_dev.y, _x.angular_velocity_std_dev.z,) = _get_struct_15d4i5di18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_15d4i5di18d().pack(_x.position.lon, _x.position.lat, _x.position.height, _x.pitch, _x.roll, _x.heading, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.rtk_flag, _x.odom_type, _x.auxiliary_type, _x.location_valid_flag, _x.origin_lat, _x.origin_lon, _x.utm_position.x, _x.utm_position.y, _x.utm_position.z, _x.change_origin_flag, _x.utm_position_next.x, _x.utm_position_next.y, _x.utm_position_next.z, _x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.orientation_std_dev.x, _x.orientation_std_dev.y, _x.orientation_std_dev.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.linear_acceleration_std_dev.x, _x.linear_acceleration_std_dev.y, _x.linear_acceleration_std_dev.z, _x.angular_velocity_std_dev.x, _x.angular_velocity_std_dev.y, _x.angular_velocity_std_dev.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = ros_interface.msg.PointLLH()
      if self.linear_velocity is None:
        self.linear_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = ros_interface.msg.Point3D()
      if self.angular_velocity is None:
        self.angular_velocity = ros_interface.msg.Point3D()
      if self.utm_position is None:
        self.utm_position = ros_interface.msg.PointENU()
      if self.utm_position_next is None:
        self.utm_position_next = ros_interface.msg.PointENU()
      if self.position_std_dev is None:
        self.position_std_dev = ros_interface.msg.Point3D()
      if self.orientation_std_dev is None:
        self.orientation_std_dev = ros_interface.msg.Point3D()
      if self.linear_velocity_std_dev is None:
        self.linear_velocity_std_dev = ros_interface.msg.Point3D()
      if self.linear_acceleration_std_dev is None:
        self.linear_acceleration_std_dev = ros_interface.msg.Point3D()
      if self.angular_velocity_std_dev is None:
        self.angular_velocity_std_dev = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 324
      (_x.position.lon, _x.position.lat, _x.position.height, _x.pitch, _x.roll, _x.heading, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.rtk_flag, _x.odom_type, _x.auxiliary_type, _x.location_valid_flag, _x.origin_lat, _x.origin_lon, _x.utm_position.x, _x.utm_position.y, _x.utm_position.z, _x.change_origin_flag, _x.utm_position_next.x, _x.utm_position_next.y, _x.utm_position_next.z, _x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.orientation_std_dev.x, _x.orientation_std_dev.y, _x.orientation_std_dev.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.linear_acceleration_std_dev.x, _x.linear_acceleration_std_dev.y, _x.linear_acceleration_std_dev.z, _x.angular_velocity_std_dev.x, _x.angular_velocity_std_dev.y, _x.angular_velocity_std_dev.z,) = _get_struct_15d4i5di18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15d4i5di18d = None
def _get_struct_15d4i5di18d():
    global _struct_15d4i5di18d
    if _struct_15d4i5di18d is None:
        _struct_15d4i5di18d = struct.Struct("<15d4i5di18d")
    return _struct_15d4i5di18d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
