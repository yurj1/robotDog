# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/VehicleMotion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class VehicleMotion(genpy.Message):
  _md5sum = "7c74308fe22ff4f1bcd4e63067f250c9"
  _type = "ros_interface/VehicleMotion"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string   name     # 名称
VehicleMotionPoint[] vehicle_motion_point #  

================================================================================
MSG: ros_interface/VehicleMotionPoint
TrajectoryPoint   trajectory_point     # trajectory point
float64   steer     # The angle between vehicle front wheel and vehicle longitudinal axis

================================================================================
MSG: ros_interface/TrajectoryPoint
PathPoint   path_point     # path point
float64   v     # linear velocity
float64   a     # linear acceleration
float64   relative_time     # relative time from beginning of the trajectory
float64   da     # longitudinal jerk
bool   is_steer_valid     # 转向是否有效
float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis
float64   rear_steer     # 后轮转角
int32   gear     # 档位

================================================================================
MSG: ros_interface/PathPoint
float64   x     # coordinates x
float64   y     # coordinates y
float64   z     # coordinates z
float64   theta     # direction on the x-y plane
float64   kappa     # curvature on the x-y planning
float64   s     # accumulated distance from beginning of the path
float64   dkappa     # derivative of kappa w.r.t s.
float64   ddkappa     # derivative of derivative of kappa w.r.t s.
float64   lane_id     # The lane ID where the path point is on
float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline
float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline
"""
  __slots__ = ['name','vehicle_motion_point']
  _slot_types = ['string','ros_interface/VehicleMotionPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,vehicle_motion_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleMotion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.vehicle_motion_point is None:
        self.vehicle_motion_point = []
    else:
      self.name = ''
      self.vehicle_motion_point = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.vehicle_motion_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_motion_point:
        _v1 = val1.trajectory_point
        _v2 = _v1.path_point
        _x = _v2
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = _v1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
        _x = val1.steer
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehicle_motion_point is None:
        self.vehicle_motion_point = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_motion_point = []
      for i in range(0, length):
        val1 = ros_interface.msg.VehicleMotionPoint()
        _v3 = val1.trajectory_point
        _v4 = _v3.path_point
        _x = _v4
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = _v3
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        _v3.is_steer_valid = bool(_v3.is_steer_valid)
        start = end
        end += 8
        (val1.steer,) = _get_struct_d().unpack(str[start:end])
        self.vehicle_motion_point.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.vehicle_motion_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_motion_point:
        _v5 = val1.trajectory_point
        _v6 = _v5.path_point
        _x = _v6
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = _v5
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
        _x = val1.steer
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehicle_motion_point is None:
        self.vehicle_motion_point = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_motion_point = []
      for i in range(0, length):
        val1 = ros_interface.msg.VehicleMotionPoint()
        _v7 = val1.trajectory_point
        _v8 = _v7.path_point
        _x = _v8
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = _v7
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        _v7.is_steer_valid = bool(_v7.is_steer_valid)
        start = end
        end += 8
        (val1.steer,) = _get_struct_d().unpack(str[start:end])
        self.vehicle_motion_point.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_4dB2di = None
def _get_struct_4dB2di():
    global _struct_4dB2di
    if _struct_4dB2di is None:
        _struct_4dB2di = struct.Struct("<4dB2di")
    return _struct_4dB2di
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
