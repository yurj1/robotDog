# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/RadarObstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class RadarObstacle(genpy.Message):
  _md5sum = "d415f3f1097d79c4238ba7b7df30ac73"
  _type = "ros_interface/RadarObstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32   id     # obstacle ID.
uint8   life_time     # 障碍物存在时间
Point2D   relative_position     # 雷达坐标系障碍物位置
Point2D   relative_position_rms     # 雷达坐标系障碍物位置标准差
Point2D   relative_velocity     # 雷达坐标系障碍物速度
Point2D   relative_velocity_rms     # 雷达坐标系障碍物速度标准差
Point2D   relative_acceleration     # 雷达坐标系障碍物加速度
Point2D   relative_acceleration_rms     # 雷达坐标系障碍物加速度标准差
float64   rcs     # 雷达散射面积
float64   snr     #  
int32   moving_status     # STATIONARY = 0; NEARING = 1; AWAYING = 2; NONE = 3;
float64   width     # 雷达障碍物宽度
float64   length     # 雷达障碍物长度
float64   height     # 雷达障碍物高度
float64   theta     #  
Point2D   absolute_position     # obstacle position in map coordinate system
Point2D   absolute_position_rms     #  
Point2D   absolute_velocity     # obstacle position in map coordinate system
Point2D   absolute_velocity_rms     #  
Point2D   absolute_acceleration     #  
Point2D   absolute_acceleration_rms     #  
float64   orientation     # 雷达障碍物方位角
float64   orient_rms     # 雷达障碍物方位角标准差
float64   yaw     #  
float64   yaw_rms     #  
int32   count     #  
int32   moving_frames_count     #  
Status   status     # 状态码
float64   underpass_probability     #  
float64   overpass_probability     #  
uint8   exist_probability     # 障碍物存在的概率
uint8   mov_property     # 障碍物移动属性：MOVING_PROPERTY_MOVING=0，MOVING_PROPERTY_STATIONARY=1，MOVING_PROPERTY_ONCOMING=2，MOVING_PROPERTY_STATIONARY_CANDIDATE=3，MOVING_PROPERTY_UNKOWN=4，MOVING_PROPERTY_CROSSING_STATIONARY=5，MOVING_PROPERTY_CROSSING_MOVING=6，MOVING_PROPERTY_STOPPED=7
uint8   track_state     # 跟踪状态：TRACK_STATE_DELETED=0；TRACK_STATE_INITED=1；TRACK_STATE_MEASURED=2；TRACK_STATE_PREDICTED=3；TRACK_STATE_DELETED_FOR_MERGE=4；TRACK_STATE_NEW_FOR_MERGE=5；
uint8   track_type     # 追踪的障碍物类型：TRACK_TYPE_POINT=0；TRACK_TYPE_CAR=1；TRACK_TYPE_TRUCK=2；TRACK_TYPE_PEDESTRIAN=3；TRACK_TYPE_MOTORCYCLE=4；TRACK_TYPE_BICYCLE=5；TRACK_TYPE_WIDE=6；TRACK_TYPE_RESERVED=7；TRACK_TYPE_BRIDGE=8；

================================================================================
MSG: ros_interface/Point2D
float64   x     # 位置坐标x
float64   y     # 位置坐标y

================================================================================
MSG: ros_interface/Status
int32   error_code     # 错误码
string   msg     # 错误码描述
"""
  __slots__ = ['id','life_time','relative_position','relative_position_rms','relative_velocity','relative_velocity_rms','relative_acceleration','relative_acceleration_rms','rcs','snr','moving_status','width','length','height','theta','absolute_position','absolute_position_rms','absolute_velocity','absolute_velocity_rms','absolute_acceleration','absolute_acceleration_rms','orientation','orient_rms','yaw','yaw_rms','count','moving_frames_count','status','underpass_probability','overpass_probability','exist_probability','mov_property','track_state','track_type']
  _slot_types = ['int32','uint8','ros_interface/Point2D','ros_interface/Point2D','ros_interface/Point2D','ros_interface/Point2D','ros_interface/Point2D','ros_interface/Point2D','float64','float64','int32','float64','float64','float64','float64','ros_interface/Point2D','ros_interface/Point2D','ros_interface/Point2D','ros_interface/Point2D','ros_interface/Point2D','ros_interface/Point2D','float64','float64','float64','float64','int32','int32','ros_interface/Status','float64','float64','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,life_time,relative_position,relative_position_rms,relative_velocity,relative_velocity_rms,relative_acceleration,relative_acceleration_rms,rcs,snr,moving_status,width,length,height,theta,absolute_position,absolute_position_rms,absolute_velocity,absolute_velocity_rms,absolute_acceleration,absolute_acceleration_rms,orientation,orient_rms,yaw,yaw_rms,count,moving_frames_count,status,underpass_probability,overpass_probability,exist_probability,mov_property,track_state,track_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarObstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.life_time is None:
        self.life_time = 0
      if self.relative_position is None:
        self.relative_position = ros_interface.msg.Point2D()
      if self.relative_position_rms is None:
        self.relative_position_rms = ros_interface.msg.Point2D()
      if self.relative_velocity is None:
        self.relative_velocity = ros_interface.msg.Point2D()
      if self.relative_velocity_rms is None:
        self.relative_velocity_rms = ros_interface.msg.Point2D()
      if self.relative_acceleration is None:
        self.relative_acceleration = ros_interface.msg.Point2D()
      if self.relative_acceleration_rms is None:
        self.relative_acceleration_rms = ros_interface.msg.Point2D()
      if self.rcs is None:
        self.rcs = 0.
      if self.snr is None:
        self.snr = 0.
      if self.moving_status is None:
        self.moving_status = 0
      if self.width is None:
        self.width = 0.
      if self.length is None:
        self.length = 0.
      if self.height is None:
        self.height = 0.
      if self.theta is None:
        self.theta = 0.
      if self.absolute_position is None:
        self.absolute_position = ros_interface.msg.Point2D()
      if self.absolute_position_rms is None:
        self.absolute_position_rms = ros_interface.msg.Point2D()
      if self.absolute_velocity is None:
        self.absolute_velocity = ros_interface.msg.Point2D()
      if self.absolute_velocity_rms is None:
        self.absolute_velocity_rms = ros_interface.msg.Point2D()
      if self.absolute_acceleration is None:
        self.absolute_acceleration = ros_interface.msg.Point2D()
      if self.absolute_acceleration_rms is None:
        self.absolute_acceleration_rms = ros_interface.msg.Point2D()
      if self.orientation is None:
        self.orientation = 0.
      if self.orient_rms is None:
        self.orient_rms = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.yaw_rms is None:
        self.yaw_rms = 0.
      if self.count is None:
        self.count = 0
      if self.moving_frames_count is None:
        self.moving_frames_count = 0
      if self.status is None:
        self.status = ros_interface.msg.Status()
      if self.underpass_probability is None:
        self.underpass_probability = 0.
      if self.overpass_probability is None:
        self.overpass_probability = 0.
      if self.exist_probability is None:
        self.exist_probability = 0
      if self.mov_property is None:
        self.mov_property = 0
      if self.track_state is None:
        self.track_state = 0
      if self.track_type is None:
        self.track_type = 0
    else:
      self.id = 0
      self.life_time = 0
      self.relative_position = ros_interface.msg.Point2D()
      self.relative_position_rms = ros_interface.msg.Point2D()
      self.relative_velocity = ros_interface.msg.Point2D()
      self.relative_velocity_rms = ros_interface.msg.Point2D()
      self.relative_acceleration = ros_interface.msg.Point2D()
      self.relative_acceleration_rms = ros_interface.msg.Point2D()
      self.rcs = 0.
      self.snr = 0.
      self.moving_status = 0
      self.width = 0.
      self.length = 0.
      self.height = 0.
      self.theta = 0.
      self.absolute_position = ros_interface.msg.Point2D()
      self.absolute_position_rms = ros_interface.msg.Point2D()
      self.absolute_velocity = ros_interface.msg.Point2D()
      self.absolute_velocity_rms = ros_interface.msg.Point2D()
      self.absolute_acceleration = ros_interface.msg.Point2D()
      self.absolute_acceleration_rms = ros_interface.msg.Point2D()
      self.orientation = 0.
      self.orient_rms = 0.
      self.yaw = 0.
      self.yaw_rms = 0.
      self.count = 0
      self.moving_frames_count = 0
      self.status = ros_interface.msg.Status()
      self.underpass_probability = 0.
      self.overpass_probability = 0.
      self.exist_probability = 0
      self.mov_property = 0
      self.track_state = 0
      self.track_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iB14di20d3i().pack(_x.id, _x.life_time, _x.relative_position.x, _x.relative_position.y, _x.relative_position_rms.x, _x.relative_position_rms.y, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_rms.x, _x.relative_velocity_rms.y, _x.relative_acceleration.x, _x.relative_acceleration.y, _x.relative_acceleration_rms.x, _x.relative_acceleration_rms.y, _x.rcs, _x.snr, _x.moving_status, _x.width, _x.length, _x.height, _x.theta, _x.absolute_position.x, _x.absolute_position.y, _x.absolute_position_rms.x, _x.absolute_position_rms.y, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_rms.x, _x.absolute_velocity_rms.y, _x.absolute_acceleration.x, _x.absolute_acceleration.y, _x.absolute_acceleration_rms.x, _x.absolute_acceleration_rms.y, _x.orientation, _x.orient_rms, _x.yaw, _x.yaw_rms, _x.count, _x.moving_frames_count, _x.status.error_code))
      _x = self.status.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d4B().pack(_x.underpass_probability, _x.overpass_probability, _x.exist_probability, _x.mov_property, _x.track_state, _x.track_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.relative_position is None:
        self.relative_position = ros_interface.msg.Point2D()
      if self.relative_position_rms is None:
        self.relative_position_rms = ros_interface.msg.Point2D()
      if self.relative_velocity is None:
        self.relative_velocity = ros_interface.msg.Point2D()
      if self.relative_velocity_rms is None:
        self.relative_velocity_rms = ros_interface.msg.Point2D()
      if self.relative_acceleration is None:
        self.relative_acceleration = ros_interface.msg.Point2D()
      if self.relative_acceleration_rms is None:
        self.relative_acceleration_rms = ros_interface.msg.Point2D()
      if self.absolute_position is None:
        self.absolute_position = ros_interface.msg.Point2D()
      if self.absolute_position_rms is None:
        self.absolute_position_rms = ros_interface.msg.Point2D()
      if self.absolute_velocity is None:
        self.absolute_velocity = ros_interface.msg.Point2D()
      if self.absolute_velocity_rms is None:
        self.absolute_velocity_rms = ros_interface.msg.Point2D()
      if self.absolute_acceleration is None:
        self.absolute_acceleration = ros_interface.msg.Point2D()
      if self.absolute_acceleration_rms is None:
        self.absolute_acceleration_rms = ros_interface.msg.Point2D()
      if self.status is None:
        self.status = ros_interface.msg.Status()
      end = 0
      _x = self
      start = end
      end += 293
      (_x.id, _x.life_time, _x.relative_position.x, _x.relative_position.y, _x.relative_position_rms.x, _x.relative_position_rms.y, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_rms.x, _x.relative_velocity_rms.y, _x.relative_acceleration.x, _x.relative_acceleration.y, _x.relative_acceleration_rms.x, _x.relative_acceleration_rms.y, _x.rcs, _x.snr, _x.moving_status, _x.width, _x.length, _x.height, _x.theta, _x.absolute_position.x, _x.absolute_position.y, _x.absolute_position_rms.x, _x.absolute_position_rms.y, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_rms.x, _x.absolute_velocity_rms.y, _x.absolute_acceleration.x, _x.absolute_acceleration.y, _x.absolute_acceleration_rms.x, _x.absolute_acceleration_rms.y, _x.orientation, _x.orient_rms, _x.yaw, _x.yaw_rms, _x.count, _x.moving_frames_count, _x.status.error_code,) = _get_struct_iB14di20d3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.msg = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.underpass_probability, _x.overpass_probability, _x.exist_probability, _x.mov_property, _x.track_state, _x.track_type,) = _get_struct_2d4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iB14di20d3i().pack(_x.id, _x.life_time, _x.relative_position.x, _x.relative_position.y, _x.relative_position_rms.x, _x.relative_position_rms.y, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_rms.x, _x.relative_velocity_rms.y, _x.relative_acceleration.x, _x.relative_acceleration.y, _x.relative_acceleration_rms.x, _x.relative_acceleration_rms.y, _x.rcs, _x.snr, _x.moving_status, _x.width, _x.length, _x.height, _x.theta, _x.absolute_position.x, _x.absolute_position.y, _x.absolute_position_rms.x, _x.absolute_position_rms.y, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_rms.x, _x.absolute_velocity_rms.y, _x.absolute_acceleration.x, _x.absolute_acceleration.y, _x.absolute_acceleration_rms.x, _x.absolute_acceleration_rms.y, _x.orientation, _x.orient_rms, _x.yaw, _x.yaw_rms, _x.count, _x.moving_frames_count, _x.status.error_code))
      _x = self.status.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d4B().pack(_x.underpass_probability, _x.overpass_probability, _x.exist_probability, _x.mov_property, _x.track_state, _x.track_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.relative_position is None:
        self.relative_position = ros_interface.msg.Point2D()
      if self.relative_position_rms is None:
        self.relative_position_rms = ros_interface.msg.Point2D()
      if self.relative_velocity is None:
        self.relative_velocity = ros_interface.msg.Point2D()
      if self.relative_velocity_rms is None:
        self.relative_velocity_rms = ros_interface.msg.Point2D()
      if self.relative_acceleration is None:
        self.relative_acceleration = ros_interface.msg.Point2D()
      if self.relative_acceleration_rms is None:
        self.relative_acceleration_rms = ros_interface.msg.Point2D()
      if self.absolute_position is None:
        self.absolute_position = ros_interface.msg.Point2D()
      if self.absolute_position_rms is None:
        self.absolute_position_rms = ros_interface.msg.Point2D()
      if self.absolute_velocity is None:
        self.absolute_velocity = ros_interface.msg.Point2D()
      if self.absolute_velocity_rms is None:
        self.absolute_velocity_rms = ros_interface.msg.Point2D()
      if self.absolute_acceleration is None:
        self.absolute_acceleration = ros_interface.msg.Point2D()
      if self.absolute_acceleration_rms is None:
        self.absolute_acceleration_rms = ros_interface.msg.Point2D()
      if self.status is None:
        self.status = ros_interface.msg.Status()
      end = 0
      _x = self
      start = end
      end += 293
      (_x.id, _x.life_time, _x.relative_position.x, _x.relative_position.y, _x.relative_position_rms.x, _x.relative_position_rms.y, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_rms.x, _x.relative_velocity_rms.y, _x.relative_acceleration.x, _x.relative_acceleration.y, _x.relative_acceleration_rms.x, _x.relative_acceleration_rms.y, _x.rcs, _x.snr, _x.moving_status, _x.width, _x.length, _x.height, _x.theta, _x.absolute_position.x, _x.absolute_position.y, _x.absolute_position_rms.x, _x.absolute_position_rms.y, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_rms.x, _x.absolute_velocity_rms.y, _x.absolute_acceleration.x, _x.absolute_acceleration.y, _x.absolute_acceleration_rms.x, _x.absolute_acceleration_rms.y, _x.orientation, _x.orient_rms, _x.yaw, _x.yaw_rms, _x.count, _x.moving_frames_count, _x.status.error_code,) = _get_struct_iB14di20d3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.msg = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.underpass_probability, _x.overpass_probability, _x.exist_probability, _x.mov_property, _x.track_state, _x.track_type,) = _get_struct_2d4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d4B = None
def _get_struct_2d4B():
    global _struct_2d4B
    if _struct_2d4B is None:
        _struct_2d4B = struct.Struct("<2d4B")
    return _struct_2d4B
_struct_iB14di20d3i = None
def _get_struct_iB14di20d3i():
    global _struct_iB14di20d3i
    if _struct_iB14di20d3i is None:
        _struct_iB14di20d3i = struct.Struct("<iB14di20d3i")
    return _struct_iB14di20d3i
