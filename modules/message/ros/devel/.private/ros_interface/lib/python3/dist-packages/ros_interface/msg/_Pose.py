# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/Pose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class Pose(genpy.Message):
  _md5sum = "0c21debd869f05bb5d743b9f76884b06"
  _type = "ros_interface/Pose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """PointENU   position     # Position of the vehicle reference point (VRP) in the map reference frame.   The VRP is the center of rear axle.
Quaternion   orientation     # A quaternion that represents the rotation from the IMU coordinate (Right/Forward/Up) to the world coordinate (East/North/Up).
Point3D   linear_velocity     # Linear velocity of the VRP in the map reference frame.East/north/up in meters per second.
Point3D   linear_acceleration     # Linear acceleration of the VRP in the map reference frame. East/north/up in meters per square second.
Point3D   angular_velocity     # Angular velocity of the vehicle in the map reference frame.Around east/north/up axes in radians per second.
float64   heading     # The heading is zero when the car is facing East and positive when facing North
Point3D   linear_acceleration_vrf     # Linear acceleration of the VRP in the vehicle reference frame.Right/forward/up in meters per square second.
Point3D   angular_velocity_vrf     # Angular velocity of the VRP in the vehicle reference frame. Around right/forward/up axes in radians per second.
Point3D   euler_angles     # // Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.   // in world coordinate (East/North/Up)   // The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.   // The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.   // The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.   // The direction of rotation follows the right-hand rule.

================================================================================
MSG: ros_interface/PointENU
float64   x     # East from the origin, in meters.
float64   y     # North from the origin, in meters.
float64   z     # Up from the WGS-84 ellipsoid, in meters.

================================================================================
MSG: ros_interface/Quaternion
float64   qx     # 四维空间x
float64   qy     # 四维空间y
float64   qz     # 四维空间z
float64   qw     # 四维空间w

================================================================================
MSG: ros_interface/Point3D
float64   x     # 位置坐标x
float64   y     # 位置坐标y
float64   z     # 位置坐标z
"""
  __slots__ = ['position','orientation','linear_velocity','linear_acceleration','angular_velocity','heading','linear_acceleration_vrf','angular_velocity_vrf','euler_angles']
  _slot_types = ['ros_interface/PointENU','ros_interface/Quaternion','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D','float64','ros_interface/Point3D','ros_interface/Point3D','ros_interface/Point3D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,orientation,linear_velocity,linear_acceleration,angular_velocity,heading,linear_acceleration_vrf,angular_velocity_vrf,euler_angles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = ros_interface.msg.PointENU()
      if self.orientation is None:
        self.orientation = ros_interface.msg.Quaternion()
      if self.linear_velocity is None:
        self.linear_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = ros_interface.msg.Point3D()
      if self.angular_velocity is None:
        self.angular_velocity = ros_interface.msg.Point3D()
      if self.heading is None:
        self.heading = 0.
      if self.linear_acceleration_vrf is None:
        self.linear_acceleration_vrf = ros_interface.msg.Point3D()
      if self.angular_velocity_vrf is None:
        self.angular_velocity_vrf = ros_interface.msg.Point3D()
      if self.euler_angles is None:
        self.euler_angles = ros_interface.msg.Point3D()
    else:
      self.position = ros_interface.msg.PointENU()
      self.orientation = ros_interface.msg.Quaternion()
      self.linear_velocity = ros_interface.msg.Point3D()
      self.linear_acceleration = ros_interface.msg.Point3D()
      self.angular_velocity = ros_interface.msg.Point3D()
      self.heading = 0.
      self.linear_acceleration_vrf = ros_interface.msg.Point3D()
      self.angular_velocity_vrf = ros_interface.msg.Point3D()
      self.euler_angles = ros_interface.msg.Point3D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_26d().pack(_x.position.x, _x.position.y, _x.position.z, _x.orientation.qx, _x.orientation.qy, _x.orientation.qz, _x.orientation.qw, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.heading, _x.linear_acceleration_vrf.x, _x.linear_acceleration_vrf.y, _x.linear_acceleration_vrf.z, _x.angular_velocity_vrf.x, _x.angular_velocity_vrf.y, _x.angular_velocity_vrf.z, _x.euler_angles.x, _x.euler_angles.y, _x.euler_angles.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = ros_interface.msg.PointENU()
      if self.orientation is None:
        self.orientation = ros_interface.msg.Quaternion()
      if self.linear_velocity is None:
        self.linear_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = ros_interface.msg.Point3D()
      if self.angular_velocity is None:
        self.angular_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration_vrf is None:
        self.linear_acceleration_vrf = ros_interface.msg.Point3D()
      if self.angular_velocity_vrf is None:
        self.angular_velocity_vrf = ros_interface.msg.Point3D()
      if self.euler_angles is None:
        self.euler_angles = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 208
      (_x.position.x, _x.position.y, _x.position.z, _x.orientation.qx, _x.orientation.qy, _x.orientation.qz, _x.orientation.qw, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.heading, _x.linear_acceleration_vrf.x, _x.linear_acceleration_vrf.y, _x.linear_acceleration_vrf.z, _x.angular_velocity_vrf.x, _x.angular_velocity_vrf.y, _x.angular_velocity_vrf.z, _x.euler_angles.x, _x.euler_angles.y, _x.euler_angles.z,) = _get_struct_26d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_26d().pack(_x.position.x, _x.position.y, _x.position.z, _x.orientation.qx, _x.orientation.qy, _x.orientation.qz, _x.orientation.qw, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.heading, _x.linear_acceleration_vrf.x, _x.linear_acceleration_vrf.y, _x.linear_acceleration_vrf.z, _x.angular_velocity_vrf.x, _x.angular_velocity_vrf.y, _x.angular_velocity_vrf.z, _x.euler_angles.x, _x.euler_angles.y, _x.euler_angles.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = ros_interface.msg.PointENU()
      if self.orientation is None:
        self.orientation = ros_interface.msg.Quaternion()
      if self.linear_velocity is None:
        self.linear_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = ros_interface.msg.Point3D()
      if self.angular_velocity is None:
        self.angular_velocity = ros_interface.msg.Point3D()
      if self.linear_acceleration_vrf is None:
        self.linear_acceleration_vrf = ros_interface.msg.Point3D()
      if self.angular_velocity_vrf is None:
        self.angular_velocity_vrf = ros_interface.msg.Point3D()
      if self.euler_angles is None:
        self.euler_angles = ros_interface.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 208
      (_x.position.x, _x.position.y, _x.position.z, _x.orientation.qx, _x.orientation.qy, _x.orientation.qz, _x.orientation.qw, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.heading, _x.linear_acceleration_vrf.x, _x.linear_acceleration_vrf.y, _x.linear_acceleration_vrf.z, _x.angular_velocity_vrf.x, _x.angular_velocity_vrf.y, _x.angular_velocity_vrf.z, _x.euler_angles.x, _x.euler_angles.y, _x.euler_angles.z,) = _get_struct_26d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_26d = None
def _get_struct_26d():
    global _struct_26d
    if _struct_26d is None:
        _struct_26d = struct.Struct("<26d")
    return _struct_26d
