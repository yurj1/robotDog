# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/Grid.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg

class Grid(genpy.Message):
  _md5sum = "9568bcb9570b90eb25fe5d5c120e6ee7"
  _type = "ros_interface/Grid"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64   x     # 世界坐标系下的x
float64   y     # 世界坐标系下的y
SLPoint   sl_point     # Frenet坐标系下的x
float64   yaw     #  
float64   potential     # 势场值
int32   region_id     # 区域编号

================================================================================
MSG: ros_interface/SLPoint
float64   s     # 纵向位移
float64   l     # 横向位移
"""
  __slots__ = ['x','y','sl_point','yaw','potential','region_id']
  _slot_types = ['float64','float64','ros_interface/SLPoint','float64','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,sl_point,yaw,potential,region_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Grid, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.sl_point is None:
        self.sl_point = ros_interface.msg.SLPoint()
      if self.yaw is None:
        self.yaw = 0.
      if self.potential is None:
        self.potential = 0.
      if self.region_id is None:
        self.region_id = 0
    else:
      self.x = 0.
      self.y = 0.
      self.sl_point = ros_interface.msg.SLPoint()
      self.yaw = 0.
      self.potential = 0.
      self.region_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6di().pack(_x.x, _x.y, _x.sl_point.s, _x.sl_point.l, _x.yaw, _x.potential, _x.region_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sl_point is None:
        self.sl_point = ros_interface.msg.SLPoint()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.x, _x.y, _x.sl_point.s, _x.sl_point.l, _x.yaw, _x.potential, _x.region_id,) = _get_struct_6di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6di().pack(_x.x, _x.y, _x.sl_point.s, _x.sl_point.l, _x.yaw, _x.potential, _x.region_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sl_point is None:
        self.sl_point = ros_interface.msg.SLPoint()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.x, _x.y, _x.sl_point.s, _x.sl_point.l, _x.yaw, _x.potential, _x.region_id,) = _get_struct_6di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6di = None
def _get_struct_6di():
    global _struct_6di
    if _struct_6di is None:
        _struct_6di = struct.Struct("<6di")
    return _struct_6di
