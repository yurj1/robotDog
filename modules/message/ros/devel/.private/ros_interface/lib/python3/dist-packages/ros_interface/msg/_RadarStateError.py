# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/RadarStateError.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadarStateError(genpy.Message):
  _md5sum = "4942ff8a1bc3c01e0fec7de2001e444c"
  _type = "ros_interface/RadarStateError"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8   persistent_error     #  
uint8   temporary_error     #  
uint8   interference_error     #  
uint8   temperature_error     #  
uint8   voltage_error     #  
uint8   block_error     #  
uint8   broadcast_error     #  
uint8   electric_axis_error     #  
uint8   config_error     #  
uint8   calibration_error     #  
"""
  __slots__ = ['persistent_error','temporary_error','interference_error','temperature_error','voltage_error','block_error','broadcast_error','electric_axis_error','config_error','calibration_error']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       persistent_error,temporary_error,interference_error,temperature_error,voltage_error,block_error,broadcast_error,electric_axis_error,config_error,calibration_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarStateError, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.persistent_error is None:
        self.persistent_error = 0
      if self.temporary_error is None:
        self.temporary_error = 0
      if self.interference_error is None:
        self.interference_error = 0
      if self.temperature_error is None:
        self.temperature_error = 0
      if self.voltage_error is None:
        self.voltage_error = 0
      if self.block_error is None:
        self.block_error = 0
      if self.broadcast_error is None:
        self.broadcast_error = 0
      if self.electric_axis_error is None:
        self.electric_axis_error = 0
      if self.config_error is None:
        self.config_error = 0
      if self.calibration_error is None:
        self.calibration_error = 0
    else:
      self.persistent_error = 0
      self.temporary_error = 0
      self.interference_error = 0
      self.temperature_error = 0
      self.voltage_error = 0
      self.block_error = 0
      self.broadcast_error = 0
      self.electric_axis_error = 0
      self.config_error = 0
      self.calibration_error = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.persistent_error, _x.temporary_error, _x.interference_error, _x.temperature_error, _x.voltage_error, _x.block_error, _x.broadcast_error, _x.electric_axis_error, _x.config_error, _x.calibration_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.persistent_error, _x.temporary_error, _x.interference_error, _x.temperature_error, _x.voltage_error, _x.block_error, _x.broadcast_error, _x.electric_axis_error, _x.config_error, _x.calibration_error,) = _get_struct_10B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.persistent_error, _x.temporary_error, _x.interference_error, _x.temperature_error, _x.voltage_error, _x.block_error, _x.broadcast_error, _x.electric_axis_error, _x.config_error, _x.calibration_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.persistent_error, _x.temporary_error, _x.interference_error, _x.temperature_error, _x.voltage_error, _x.block_error, _x.broadcast_error, _x.electric_axis_error, _x.config_error, _x.calibration_error,) = _get_struct_10B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B = None
def _get_struct_10B():
    global _struct_10B
    if _struct_10B is None:
        _struct_10B = struct.Struct("<10B")
    return _struct_10B
