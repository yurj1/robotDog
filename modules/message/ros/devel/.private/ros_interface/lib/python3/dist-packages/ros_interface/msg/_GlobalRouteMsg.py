# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/GlobalRouteMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class GlobalRouteMsg(genpy.Message):
  _md5sum = "9a9de06349ba12c560c2c024a6bcece7"
  _type = "ros_interface/GlobalRouteMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # 消息头
LaneletInfo[] route # 一次导航的全程道路集合，从起点到终点排序
LaneletInfo   current_lanelet     # 当前所在车道的信息
float64   total_mileage     # 总里程
float64   cur_mileage     # 当前里程
LaneletInfo[] cur_slice # 当前地图切片,用来绘制局部地图

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/LaneletInfo
int32   lanelet_id     # 道路id，与地图文件对应
float64   length     # 道路长度
"""
  __slots__ = ['header','route','current_lanelet','total_mileage','cur_mileage','cur_slice']
  _slot_types = ['std_msgs/Header','ros_interface/LaneletInfo[]','ros_interface/LaneletInfo','float64','float64','ros_interface/LaneletInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,route,current_lanelet,total_mileage,cur_mileage,cur_slice

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalRouteMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.route is None:
        self.route = []
      if self.current_lanelet is None:
        self.current_lanelet = ros_interface.msg.LaneletInfo()
      if self.total_mileage is None:
        self.total_mileage = 0.
      if self.cur_mileage is None:
        self.cur_mileage = 0.
      if self.cur_slice is None:
        self.cur_slice = []
    else:
      self.header = std_msgs.msg.Header()
      self.route = []
      self.current_lanelet = ros_interface.msg.LaneletInfo()
      self.total_mileage = 0.
      self.cur_mileage = 0.
      self.cur_slice = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.route)
      buff.write(_struct_I.pack(length))
      for val1 in self.route:
        _x = val1
        buff.write(_get_struct_id().pack(_x.lanelet_id, _x.length))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.current_lanelet.lanelet_id, _x.current_lanelet.length, _x.total_mileage, _x.cur_mileage))
      length = len(self.cur_slice)
      buff.write(_struct_I.pack(length))
      for val1 in self.cur_slice:
        _x = val1
        buff.write(_get_struct_id().pack(_x.lanelet_id, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.route is None:
        self.route = None
      if self.current_lanelet is None:
        self.current_lanelet = ros_interface.msg.LaneletInfo()
      if self.cur_slice is None:
        self.cur_slice = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.route = []
      for i in range(0, length):
        val1 = ros_interface.msg.LaneletInfo()
        _x = val1
        start = end
        end += 12
        (_x.lanelet_id, _x.length,) = _get_struct_id().unpack(str[start:end])
        self.route.append(val1)
      _x = self
      start = end
      end += 28
      (_x.current_lanelet.lanelet_id, _x.current_lanelet.length, _x.total_mileage, _x.cur_mileage,) = _get_struct_i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cur_slice = []
      for i in range(0, length):
        val1 = ros_interface.msg.LaneletInfo()
        _x = val1
        start = end
        end += 12
        (_x.lanelet_id, _x.length,) = _get_struct_id().unpack(str[start:end])
        self.cur_slice.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.route)
      buff.write(_struct_I.pack(length))
      for val1 in self.route:
        _x = val1
        buff.write(_get_struct_id().pack(_x.lanelet_id, _x.length))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.current_lanelet.lanelet_id, _x.current_lanelet.length, _x.total_mileage, _x.cur_mileage))
      length = len(self.cur_slice)
      buff.write(_struct_I.pack(length))
      for val1 in self.cur_slice:
        _x = val1
        buff.write(_get_struct_id().pack(_x.lanelet_id, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.route is None:
        self.route = None
      if self.current_lanelet is None:
        self.current_lanelet = ros_interface.msg.LaneletInfo()
      if self.cur_slice is None:
        self.cur_slice = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.route = []
      for i in range(0, length):
        val1 = ros_interface.msg.LaneletInfo()
        _x = val1
        start = end
        end += 12
        (_x.lanelet_id, _x.length,) = _get_struct_id().unpack(str[start:end])
        self.route.append(val1)
      _x = self
      start = end
      end += 28
      (_x.current_lanelet.lanelet_id, _x.current_lanelet.length, _x.total_mileage, _x.cur_mileage,) = _get_struct_i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cur_slice = []
      for i in range(0, length):
        val1 = ros_interface.msg.LaneletInfo()
        _x = val1
        start = end
        end += 12
        (_x.lanelet_id, _x.length,) = _get_struct_id().unpack(str[start:end])
        self.cur_slice.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
