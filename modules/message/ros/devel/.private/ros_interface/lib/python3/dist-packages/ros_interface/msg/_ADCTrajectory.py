# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/ADCTrajectory.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class ADCTrajectory(genpy.Message):
  _md5sum = "d9f458508166ede977b350e04581bce4"
  _type = "ros_interface/ADCTrajectory"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     # timestamp is included in header
float64   total_path_length     # unit meters(m)
float64   total_path_time     # unit seconds(s)
TrajectoryPoint[] trajectory_points # 规划轨迹点列
int32   car_action     # 车辆行为： CAR_ACTION_NONE=0  //无效值 CAR_ACTION_SINGLE=1 //单车 CAR_ACTION_PLATOON_HEAD=2 //车队头车 CAR_ACTION_PLATOON_OTHER=3 //车队其他车辆
int32   behaviour_lat_state     # 自动驾驶状态（主要指横向状态）
int32   behaviour_lon_state     # 自动驾驶状态（主要指纵向状态）
int32   scenario     # 驾驶场景 0-UNKNOWN, 1-CRUISE, 2-CRUISE_URBAN 3-CRUISE_HIGHWAY, 2000-JUNCTION  2001-JUNCTION_TRAFFIC_LIGHT 2002-JUNCTION_STOP_SIGN
int32   driving_mode     # 驾驶模式： 1：人工驾驶， 2：辅助驾驶， 3：自动驾驶
int32   adc_trajectory_type     # 轨迹类型： TRAJECTORY_TYPE_ABSOLUTE=0 //绝对规划轨迹 TRAJECTORY_TYPE_RELATIVE=1 //相对规划轨迹 TRAJECTORY_TYPE_INVALID=2 //无效规划轨迹
EStop   estop     # emergency stop
bool   is_replan     # is_replan == truemean replan triggered(default = false)
string   replan_reason     #  
int32   right_of_way_status     # UNPROTECTED = 0;PROTECTED = 1;
RSSInfo   rss_info     # output related to RSS

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/TrajectoryPoint
PathPoint   path_point     # path point
float64   v     # linear velocity
float64   a     # linear acceleration
float64   relative_time     # relative time from beginning of the trajectory
float64   da     # longitudinal jerk
bool   is_steer_valid     # 转向是否有效
float64   front_steer     # The angle between vehicle front wheel and vehicle longitudinal axis
float64   rear_steer     # 后轮转角
int32   gear     # 档位

================================================================================
MSG: ros_interface/PathPoint
float64   x     # coordinates x
float64   y     # coordinates y
float64   z     # coordinates z
float64   theta     # direction on the x-y plane
float64   kappa     # curvature on the x-y planning
float64   s     # accumulated distance from beginning of the path
float64   dkappa     # derivative of kappa w.r.t s.
float64   ddkappa     # derivative of derivative of kappa w.r.t s.
float64   lane_id     # The lane ID where the path point is on
float64   x_derivative     # derivative of x w.r.t parametric parameter t in CosThetareferenceline
float64   y_derivative     # derivative of y w.r.t parametric parameter t in CosThetareferenceline

================================================================================
MSG: ros_interface/EStop
bool   is_estop     # is_estop == true when emergency stop is required
string   reason     # 原因

================================================================================
MSG: ros_interface/RSSInfo
bool   is_rss_safe     #  
float64   cur_dist_lon     # current longitudinal distance
float64   rss_safe_dist_lon     # longitudinal safe distance of rss
float64   acc_lon_range_minimum     # Minimum range of longitudinal acceleration
float64   acc_lon_range_maximum     # Maximum range of longitudinal acceleration
float64   acc_lat_left_range_minimum     # Minimum left range of lateral acceleration
float64   acc_lat_left_range_maximum     # Maximum left range of lateral acceleration
float64   acc_lat_right_range_minimum     # Minimum right range of lateral acceleration
float64   acc_lat_right_range_maximum     # Maximum right range of lateral acceleration
"""
  __slots__ = ['header','total_path_length','total_path_time','trajectory_points','car_action','behaviour_lat_state','behaviour_lon_state','scenario','driving_mode','adc_trajectory_type','estop','is_replan','replan_reason','right_of_way_status','rss_info']
  _slot_types = ['std_msgs/Header','float64','float64','ros_interface/TrajectoryPoint[]','int32','int32','int32','int32','int32','int32','ros_interface/EStop','bool','string','int32','ros_interface/RSSInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,total_path_length,total_path_time,trajectory_points,car_action,behaviour_lat_state,behaviour_lon_state,scenario,driving_mode,adc_trajectory_type,estop,is_replan,replan_reason,right_of_way_status,rss_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADCTrajectory, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.total_path_length is None:
        self.total_path_length = 0.
      if self.total_path_time is None:
        self.total_path_time = 0.
      if self.trajectory_points is None:
        self.trajectory_points = []
      if self.car_action is None:
        self.car_action = 0
      if self.behaviour_lat_state is None:
        self.behaviour_lat_state = 0
      if self.behaviour_lon_state is None:
        self.behaviour_lon_state = 0
      if self.scenario is None:
        self.scenario = 0
      if self.driving_mode is None:
        self.driving_mode = 0
      if self.adc_trajectory_type is None:
        self.adc_trajectory_type = 0
      if self.estop is None:
        self.estop = ros_interface.msg.EStop()
      if self.is_replan is None:
        self.is_replan = False
      if self.replan_reason is None:
        self.replan_reason = ''
      if self.right_of_way_status is None:
        self.right_of_way_status = 0
      if self.rss_info is None:
        self.rss_info = ros_interface.msg.RSSInfo()
    else:
      self.header = std_msgs.msg.Header()
      self.total_path_length = 0.
      self.total_path_time = 0.
      self.trajectory_points = []
      self.car_action = 0
      self.behaviour_lat_state = 0
      self.behaviour_lon_state = 0
      self.scenario = 0
      self.driving_mode = 0
      self.adc_trajectory_type = 0
      self.estop = ros_interface.msg.EStop()
      self.is_replan = False
      self.replan_reason = ''
      self.right_of_way_status = 0
      self.rss_info = ros_interface.msg.RSSInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
      length = len(self.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_points:
        _v1 = val1.path_point
        _x = _v1
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self
      buff.write(_get_struct_6iB().pack(_x.car_action, _x.behaviour_lat_state, _x.behaviour_lon_state, _x.scenario, _x.driving_mode, _x.adc_trajectory_type, _x.estop.is_estop))
      _x = self.estop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_replan
      buff.write(_get_struct_B().pack(_x))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB8d().pack(_x.right_of_way_status, _x.rss_info.is_rss_safe, _x.rss_info.cur_dist_lon, _x.rss_info.rss_safe_dist_lon, _x.rss_info.acc_lon_range_minimum, _x.rss_info.acc_lon_range_maximum, _x.rss_info.acc_lat_left_range_minimum, _x.rss_info.acc_lat_left_range_maximum, _x.rss_info.acc_lat_right_range_minimum, _x.rss_info.acc_lat_right_range_maximum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trajectory_points is None:
        self.trajectory_points = None
      if self.estop is None:
        self.estop = ros_interface.msg.EStop()
      if self.rss_info is None:
        self.rss_info = ros_interface.msg.RSSInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v2 = val1.path_point
        _x = _v2
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.trajectory_points.append(val1)
      _x = self
      start = end
      end += 25
      (_x.car_action, _x.behaviour_lat_state, _x.behaviour_lon_state, _x.scenario, _x.driving_mode, _x.adc_trajectory_type, _x.estop.is_estop,) = _get_struct_6iB().unpack(str[start:end])
      self.estop.is_estop = bool(self.estop.is_estop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estop.reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estop.reason = str[start:end]
      start = end
      end += 1
      (self.is_replan,) = _get_struct_B().unpack(str[start:end])
      self.is_replan = bool(self.is_replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.right_of_way_status, _x.rss_info.is_rss_safe, _x.rss_info.cur_dist_lon, _x.rss_info.rss_safe_dist_lon, _x.rss_info.acc_lon_range_minimum, _x.rss_info.acc_lon_range_maximum, _x.rss_info.acc_lat_left_range_minimum, _x.rss_info.acc_lat_left_range_maximum, _x.rss_info.acc_lat_right_range_minimum, _x.rss_info.acc_lat_right_range_maximum,) = _get_struct_iB8d().unpack(str[start:end])
      self.rss_info.is_rss_safe = bool(self.rss_info.is_rss_safe)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
      length = len(self.trajectory_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_points:
        _v3 = val1.path_point
        _x = _v3
        buff.write(_get_struct_11d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_4dB2di().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear))
      _x = self
      buff.write(_get_struct_6iB().pack(_x.car_action, _x.behaviour_lat_state, _x.behaviour_lon_state, _x.scenario, _x.driving_mode, _x.adc_trajectory_type, _x.estop.is_estop))
      _x = self.estop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_replan
      buff.write(_get_struct_B().pack(_x))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB8d().pack(_x.right_of_way_status, _x.rss_info.is_rss_safe, _x.rss_info.cur_dist_lon, _x.rss_info.rss_safe_dist_lon, _x.rss_info.acc_lon_range_minimum, _x.rss_info.acc_lon_range_maximum, _x.rss_info.acc_lat_left_range_minimum, _x.rss_info.acc_lat_left_range_maximum, _x.rss_info.acc_lat_right_range_minimum, _x.rss_info.acc_lat_right_range_maximum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trajectory_points is None:
        self.trajectory_points = None
      if self.estop is None:
        self.estop = ros_interface.msg.EStop()
      if self.rss_info is None:
        self.rss_info = ros_interface.msg.RSSInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_points = []
      for i in range(0, length):
        val1 = ros_interface.msg.TrajectoryPoint()
        _v4 = val1.path_point
        _x = _v4
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa, _x.lane_id, _x.x_derivative, _x.y_derivative,) = _get_struct_11d().unpack(str[start:end])
        _x = val1
        start = end
        end += 53
        (_x.v, _x.a, _x.relative_time, _x.da, _x.is_steer_valid, _x.front_steer, _x.rear_steer, _x.gear,) = _get_struct_4dB2di().unpack(str[start:end])
        val1.is_steer_valid = bool(val1.is_steer_valid)
        self.trajectory_points.append(val1)
      _x = self
      start = end
      end += 25
      (_x.car_action, _x.behaviour_lat_state, _x.behaviour_lon_state, _x.scenario, _x.driving_mode, _x.adc_trajectory_type, _x.estop.is_estop,) = _get_struct_6iB().unpack(str[start:end])
      self.estop.is_estop = bool(self.estop.is_estop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estop.reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estop.reason = str[start:end]
      start = end
      end += 1
      (self.is_replan,) = _get_struct_B().unpack(str[start:end])
      self.is_replan = bool(self.is_replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.right_of_way_status, _x.rss_info.is_rss_safe, _x.rss_info.cur_dist_lon, _x.rss_info.rss_safe_dist_lon, _x.rss_info.acc_lon_range_minimum, _x.rss_info.acc_lon_range_maximum, _x.rss_info.acc_lat_left_range_minimum, _x.rss_info.acc_lat_left_range_maximum, _x.rss_info.acc_lat_right_range_minimum, _x.rss_info.acc_lat_right_range_maximum,) = _get_struct_iB8d().unpack(str[start:end])
      self.rss_info.is_rss_safe = bool(self.rss_info.is_rss_safe)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4dB2di = None
def _get_struct_4dB2di():
    global _struct_4dB2di
    if _struct_4dB2di is None:
        _struct_4dB2di = struct.Struct("<4dB2di")
    return _struct_4dB2di
_struct_6iB = None
def _get_struct_6iB():
    global _struct_6iB
    if _struct_6iB is None:
        _struct_6iB = struct.Struct("<6iB")
    return _struct_6iB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_iB8d = None
def _get_struct_iB8d():
    global _struct_iB8d
    if _struct_iB8d is None:
        _struct_iB8d = struct.Struct("<iB8d")
    return _struct_iB8d
